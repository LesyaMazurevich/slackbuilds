From 6df5632377f64067f928043629be7dd596909467 Mon Sep 17 00:00:00 2001
From: RiCON <wiiaboo@gmail.com>
Date: Sun, 6 Sep 2015 01:39:57 +0100
Subject: [PATCH] Unbreak compilation with FFmpeg git

Disclaimer: I just "s//"'d until compilation was successful.
---
 configure.ac                     |  4 ++--
 src/core/ffms.cpp                |  4 ++--
 src/core/videosource.cpp         | 44 ++++++++++++++++++++--------------------
 src/core/videosource.h           | 12 +++++------
 src/core/videoutils.cpp          | 18 ++++++++--------
 src/core/videoutils.h            |  4 ++--
 src/vapoursynth/vapoursource.cpp | 18 ++++++++--------
 8 files changed, 55 insertions(+), 55 deletions(-)

diff --git a/configure.ac b/configure.ac
index c1c7e1c..91064e3 100644
--- a/configure.ac
+++ b/configure.ac
@@ -95,7 +95,7 @@ AC_DEFUN([TEST_IS_FFMPEG],
                 /* is ffmpeg */
                 #elif LIBAVCODEC_VERSION_INT < AV_VERSION_INT(53, 47, 100)
                 /* hopefully libav doesn''t add G2M before 53.47.... */
-                (void)CODEC_ID_G2M;
+                (void)AV_CODEC_ID_G2M;
                 #else
                 #error is libav or old enough that the distinction doesn't matter
                 #endif
@@ -122,7 +122,7 @@ AC_DEFUN([TEST_LIBAV],
                 avcodec_register_all();
                 swscale_version();
                 #ifdef FFMS_USE_FFMPEG_COMPAT
-                int bogus = CODEC_ID_G2M;
+                int bogus = AV_CODEC_ID_G2M;
                 (void) bogus;
                 #endif
             ]])], [eval $1=yes], [eval $1=no])
diff --git a/src/core/ffms.cpp b/src/core/ffms.cpp
index e95cb98..3c15393 100644
--- a/src/core/ffms.cpp
+++ b/src/core/ffms.cpp
@@ -187,7 +187,7 @@ FFMS_API(int) FFMS_GetAudio(FFMS_AudioSource *A, void *Buf, int64_t Start, int64
 FFMS_API(int) FFMS_SetOutputFormatV2(FFMS_VideoSource *V, const int *TargetFormats, int Width, int Height, int Resizer, FFMS_ErrorInfo *ErrorInfo) {
 	ClearErrorInfo(ErrorInfo);
 	try {
-		V->SetOutputFormat(reinterpret_cast<const PixelFormat *>(TargetFormats), Width, Height, Resizer);
+		V->SetOutputFormat(reinterpret_cast<const AVPixelFormat *>(TargetFormats), Width, Height, Resizer);
 	} catch (FFMS_Exception &e) {
 		return e.CopyOut(ErrorInfo);
 	}
@@ -201,7 +201,7 @@ FFMS_API(void) FFMS_ResetOutputFormatV(FFMS_VideoSource *V) {
 FFMS_API(int) FFMS_SetInputFormatV(FFMS_VideoSource *V, int ColorSpace, int ColorRange, int Format, FFMS_ErrorInfo *ErrorInfo) {
 	ClearErrorInfo(ErrorInfo);
 	try {
-		V->SetInputFormat(ColorSpace, ColorRange, static_cast<PixelFormat>(Format));
+		V->SetInputFormat(ColorSpace, ColorRange, static_cast<AVPixelFormat>(Format));
 	} catch (FFMS_Exception &e) {
 		return e.CopyOut(ErrorInfo);
 	}
diff --git a/src/core/videosource.cpp b/src/core/videosource.cpp
index 6134d71..e37bd45 100644
--- a/src/core/videosource.cpp
+++ b/src/core/videosource.cpp
@@ -57,7 +57,7 @@ FFMS_Frame *FFMS_VideoSource::OutputFrame(AVFrame *Frame) {
 	if (LastFrameWidth != CodecContext->width || LastFrameHeight != CodecContext->height || LastFramePixelFormat != CodecContext->pix_fmt) {
 		if (TargetHeight > 0 && TargetWidth > 0 && !TargetPixelFormats.empty()) {
 			if (!InputFormatOverridden) {
-				InputFormat = PIX_FMT_NONE;
+				InputFormat = AV_PIX_FMT_NONE;
 				InputColorSpace = AVCOL_SPC_UNSPECIFIED;
 				InputColorRange = AVCOL_RANGE_UNSPECIFIED;
 			}
@@ -134,18 +134,18 @@ FFMS_VideoSource::FFMS_VideoSource(const char *SourceFile, FFMS_Index &Index, in
 
 	LastFrameHeight = -1;
 	LastFrameWidth = -1;
-	LastFramePixelFormat = PIX_FMT_NONE;
+	LastFramePixelFormat = AV_PIX_FMT_NONE;
 
 	TargetHeight = -1;
 	TargetWidth = -1;
 	TargetResizer = 0;
 
-	OutputFormat = PIX_FMT_NONE;
+	OutputFormat = AV_PIX_FMT_NONE;
 	OutputColorSpace = AVCOL_SPC_UNSPECIFIED;
 	OutputColorRange = AVCOL_RANGE_UNSPECIFIED;
 
 	InputFormatOverridden = false;
-	InputFormat = PIX_FMT_NONE;
+	InputFormat = AV_PIX_FMT_NONE;
 	InputColorSpace = AVCOL_SPC_UNSPECIFIED;
 	InputColorRange = AVCOL_RANGE_UNSPECIFIED;
 	if (Threads < 1)
@@ -157,7 +157,7 @@ FFMS_VideoSource::FFMS_VideoSource(const char *SourceFile, FFMS_Index &Index, in
 	LastDecodedFrame = av_frame_alloc();
 
 	// Dummy allocations so the unallocated case doesn't have to be handled later
-	avpicture_alloc(&SWSFrame, PIX_FMT_GRAY8, 16, 16);
+	avpicture_alloc(&SWSFrame, AV_PIX_FMT_GRAY8, 16, 16);
 
 	Index.AddRef();
 }
@@ -178,33 +178,33 @@ FFMS_Frame *FFMS_VideoSource::GetFrameByTime(double Time) {
 	return GetFrame(Frame);
 }
 
-static AVColorRange handle_jpeg(PixelFormat *format) {
+static AVColorRange handle_jpeg(AVPixelFormat *format) {
 	switch (*format) {
-		case PIX_FMT_YUVJ420P: *format = PIX_FMT_YUV420P; return AVCOL_RANGE_JPEG;
-		case PIX_FMT_YUVJ422P: *format = PIX_FMT_YUV422P; return AVCOL_RANGE_JPEG;
-		case PIX_FMT_YUVJ444P: *format = PIX_FMT_YUV444P; return AVCOL_RANGE_JPEG;
-		case PIX_FMT_YUVJ440P: *format = PIX_FMT_YUV440P; return AVCOL_RANGE_JPEG;
+		case AV_PIX_FMT_YUVJ420P: *format = AV_PIX_FMT_YUV420P; return AVCOL_RANGE_JPEG;
+		case AV_PIX_FMT_YUVJ422P: *format = AV_PIX_FMT_YUV422P; return AVCOL_RANGE_JPEG;
+		case AV_PIX_FMT_YUVJ444P: *format = AV_PIX_FMT_YUV444P; return AVCOL_RANGE_JPEG;
+		case AV_PIX_FMT_YUVJ440P: *format = AV_PIX_FMT_YUV440P; return AVCOL_RANGE_JPEG;
 		default:                                          return AVCOL_RANGE_UNSPECIFIED;
 	}
 }
 
-void FFMS_VideoSource::SetOutputFormat(const PixelFormat *TargetFormats, int Width, int Height, int Resizer) {
+void FFMS_VideoSource::SetOutputFormat(const AVPixelFormat *TargetFormats, int Width, int Height, int Resizer) {
 	TargetWidth = Width;
 	TargetHeight = Height;
 	TargetResizer = Resizer;
 	TargetPixelFormats.clear();
-	while (*TargetFormats != PIX_FMT_NONE)
+	while (*TargetFormats != AV_PIX_FMT_NONE)
 		TargetPixelFormats.push_back(*TargetFormats++);
-	OutputFormat = PIX_FMT_NONE;
+	OutputFormat = AV_PIX_FMT_NONE;
 
 	ReAdjustOutputFormat();
 	OutputFrame(DecodeFrame);
 }
 
-void FFMS_VideoSource::SetInputFormat(int ColorSpace, int ColorRange, PixelFormat Format) {
+void FFMS_VideoSource::SetInputFormat(int ColorSpace, int ColorRange, AVPixelFormat Format) {
 	InputFormatOverridden = true;
 
-	if (Format != PIX_FMT_NONE)
+	if (Format != AV_PIX_FMT_NONE)
 		InputFormat = Format;
 	if (ColorRange != AVCOL_RANGE_UNSPECIFIED)
 		InputColorRange = (AVColorRange)ColorRange;
@@ -218,7 +218,7 @@ void FFMS_VideoSource::SetInputFormat(int ColorSpace, int ColorRange, PixelForma
 }
 
 void FFMS_VideoSource::DetectInputFormat() {
-	if (InputFormat == PIX_FMT_NONE)
+	if (InputFormat == AV_PIX_FMT_NONE)
 		InputFormat = CodecContext->pix_fmt;
 
 	AVColorRange RangeFromFormat = handle_jpeg(&InputFormat);
@@ -245,7 +245,7 @@ void FFMS_VideoSource::ReAdjustOutputFormat() {
 	DetectInputFormat();
 
 	OutputFormat = FindBestPixelFormat(TargetPixelFormats, InputFormat);
-	if (OutputFormat == PIX_FMT_NONE) {
+	if (OutputFormat == AV_PIX_FMT_NONE) {
 		ResetOutputFormat();
 		throw FFMS_Exception(FFMS_ERROR_SCALING, FFMS_ERROR_INVALID_ARGUMENT,
 			"No suitable output format found");
@@ -293,7 +293,7 @@ void FFMS_VideoSource::ResetOutputFormat() {
 	TargetHeight = -1;
 	TargetPixelFormats.clear();
 
-	OutputFormat = PIX_FMT_NONE;
+	OutputFormat = AV_PIX_FMT_NONE;
 	OutputColorSpace = AVCOL_SPC_UNSPECIFIED;
 	OutputColorRange = AVCOL_RANGE_UNSPECIFIED;
 
@@ -302,7 +302,7 @@ void FFMS_VideoSource::ResetOutputFormat() {
 
 void FFMS_VideoSource::ResetInputFormat() {
 	InputFormatOverridden = false;
-	InputFormat = PIX_FMT_NONE;
+	InputFormat = AV_PIX_FMT_NONE;
 	InputColorSpace = AVCOL_SPC_UNSPECIFIED;
 	InputColorRange = AVCOL_RANGE_UNSPECIFIED;
 
@@ -324,9 +324,9 @@ void FFMS_VideoSource::SetVideoProperties() {
 	VP.ColorSpace = CodecContext->colorspace;
 	VP.ColorRange = CodecContext->color_range;
 	// these pixfmt's are deprecated but still used
-	if (CodecContext->pix_fmt == PIX_FMT_YUVJ420P ||
-		CodecContext->pix_fmt == PIX_FMT_YUVJ422P ||
-		CodecContext->pix_fmt == PIX_FMT_YUVJ444P
+	if (CodecContext->pix_fmt == AV_PIX_FMT_YUVJ420P ||
+		CodecContext->pix_fmt == AV_PIX_FMT_YUVJ422P ||
+		CodecContext->pix_fmt == AV_PIX_FMT_YUVJ444P
 		)
 		VP.ColorRange = AVCOL_RANGE_JPEG;
 
diff --git a/src/core/videosource.h b/src/core/videosource.h
index 9b3f7e8..f13146c 100644
--- a/src/core/videosource.h
+++ b/src/core/videosource.h
@@ -39,19 +39,19 @@ friend class FFSourceResources<FFMS_VideoSource>;
 
 	int LastFrameHeight;
 	int LastFrameWidth;
-	PixelFormat LastFramePixelFormat;
+	AVPixelFormat LastFramePixelFormat;
 
 	int TargetHeight;
 	int TargetWidth;
-	std::vector<PixelFormat> TargetPixelFormats;
+	std::vector<AVPixelFormat> TargetPixelFormats;
 	int TargetResizer;
 
-	PixelFormat OutputFormat;
+	AVPixelFormat OutputFormat;
 	AVColorRange OutputColorRange;
 	AVColorSpace OutputColorSpace;
 
 	bool InputFormatOverridden;
-	PixelFormat InputFormat;
+	AVPixelFormat InputFormat;
 	AVColorRange InputColorRange;
 	AVColorSpace InputColorSpace;
 
@@ -89,9 +89,9 @@ friend class FFSourceResources<FFMS_VideoSource>;
 	virtual FFMS_Frame *GetFrame(int n) = 0;
 	void GetFrameCheck(int n);
 	FFMS_Frame *GetFrameByTime(double Time);
-	void SetOutputFormat(const PixelFormat *TargetFormats, int Width, int Height, int Resizer);
+	void SetOutputFormat(const AVPixelFormat *TargetFormats, int Width, int Height, int Resizer);
 	void ResetOutputFormat();
-	void SetInputFormat(int ColorSpace, int ColorRange, PixelFormat Format);
+	void SetInputFormat(int ColorSpace, int ColorRange, AVPixelFormat Format);
 	void ResetInputFormat();
 };
 
diff --git a/src/core/videoutils.cpp b/src/core/videoutils.cpp
index 83be448..9aab427 100644
--- a/src/core/videoutils.cpp
+++ b/src/core/videoutils.cpp
@@ -29,7 +29,7 @@ extern "C" {
 #include <libavutil/opt.h>
 }
 
-SwsContext *GetSwsContext(int SrcW, int SrcH, PixelFormat SrcFormat, int SrcColorSpace, int SrcColorRange, int DstW, int DstH, PixelFormat DstFormat, int DstColorSpace, int DstColorRange, int64_t Flags) {
+SwsContext *GetSwsContext(int SrcW, int SrcH, AVPixelFormat SrcFormat, int SrcColorSpace, int SrcColorRange, int DstW, int DstH, AVPixelFormat DstFormat, int DstColorSpace, int DstColorRange, int64_t Flags) {
 	Flags |= SWS_FULL_CHR_H_INT | SWS_FULL_CHR_H_INP | SWS_ACCURATE_RND | SWS_BITEXACT;
 	SwsContext *Context = sws_alloc_context();
 	if (!Context) return nullptr;
@@ -120,9 +120,9 @@ enum BCSType {
 	cUNUSABLE
 };
 
-static BCSType GuessCSType(PixelFormat p) {
+static BCSType GuessCSType(AVPixelFormat p) {
 	// guessing the colorspace type from the name is kinda hackish but libav doesn't export this kind of metadata
-	if (av_pix_fmt_desc_get(p)->flags & PIX_FMT_HWACCEL)
+	if (av_pix_fmt_desc_get(p)->flags & AV_PIX_FMT_FLAG_HWACCEL)
 		return cUNUSABLE;
 	const char *n = av_get_pix_fmt_name(p);
 	if (strstr(n, "gray") || strstr(n, "mono") || strstr(n, "y400a"))
@@ -135,7 +135,7 @@ static BCSType GuessCSType(PixelFormat p) {
 }
 
 struct LossAttributes {
-	PixelFormat Format;
+	AVPixelFormat Format;
 	int ChromaUndersampling;
 	int ChromaOversampling;
 	int DepthDifference;
@@ -150,7 +150,7 @@ static int GetPseudoDepth(const AVPixFmtDescriptor &Desc) {
 	return depth + 1;
 }
 
-static LossAttributes CalculateLoss(PixelFormat Dst, PixelFormat Src) {
+static LossAttributes CalculateLoss(AVPixelFormat Dst, AVPixelFormat Src) {
 	const AVPixFmtDescriptor &SrcDesc = *av_pix_fmt_desc_get(Src);
 	const AVPixFmtDescriptor &DstDesc = *av_pix_fmt_desc_get(Dst);
 	BCSType SrcCS = GuessCSType(Src);
@@ -190,10 +190,10 @@ static LossAttributes CalculateLoss(PixelFormat Dst, PixelFormat Src) {
 	return Loss;
 }
 
-PixelFormat FindBestPixelFormat(const std::vector<PixelFormat> &Dsts, PixelFormat Src) {
+AVPixelFormat FindBestPixelFormat(const std::vector<AVPixelFormat> &Dsts, AVPixelFormat Src) {
 	// some trivial special cases to make sure there's as little conversion as possible
 	if (Dsts.empty())
-		return PIX_FMT_NONE;
+		return AV_PIX_FMT_NONE;
 	if (Dsts.size() == 1)
 		return Dsts[0];
 
@@ -203,8 +203,8 @@ PixelFormat FindBestPixelFormat(const std::vector<PixelFormat> &Dsts, PixelForma
 		return Src;
 
 	// If it's an evil paletted format pretend it's normal RGB when calculating loss
-    if (Src == PIX_FMT_PAL8)
-        Src = PIX_FMT_RGB32;
+    if (Src == AV_PIX_FMT_PAL8)
+		Src = AV_PIX_FMT_RGB32;
 
 	i = Dsts.begin();
 	LossAttributes Loss = CalculateLoss(*i++, Src);
diff --git a/src/core/videoutils.h b/src/core/videoutils.h
index 6e166e0..3cc220f 100644
--- a/src/core/videoutils.h
+++ b/src/core/videoutils.h
@@ -35,7 +35,7 @@ extern "C" {
 
 // swscale and pp-related functions
 int64_t GetSWSCPUFlags();
-SwsContext *GetSwsContext(int SrcW, int SrcH, PixelFormat SrcFormat, int SrcColorSpace, int SrcColorRange, int DstW, int DstH, PixelFormat DstFormat, int DstColorSpace, int DstColorRange, int64_t Flags);
+SwsContext *GetSwsContext(int SrcW, int SrcH, AVPixelFormat SrcFormat, int SrcColorSpace, int SrcColorRange, int DstW, int DstH, AVPixelFormat DstFormat, int DstColorSpace, int DstColorRange, int64_t Flags);
 AVColorSpace GetAssumedColorSpace(int Width, int Height);
 
 // timebase-related functions
@@ -43,6 +43,6 @@ void CorrectRationalFramerate(int *Num, int *Den);
 void CorrectTimebase(FFMS_VideoProperties *VP, FFMS_TrackTimeBase *TTimebase);
 
 // our implementation of avcodec_find_best_pix_fmt()
-PixelFormat FindBestPixelFormat(const std::vector<PixelFormat> &Dsts, PixelFormat Src);
+AVPixelFormat FindBestPixelFormat(const std::vector<AVPixelFormat> &Dsts, AVPixelFormat Src);
 
 void RegisterCustomParsers();
diff --git a/src/vapoursynth/vapoursource.cpp b/src/vapoursynth/vapoursource.cpp
index c4500bd..2a4fa7c 100644
--- a/src/vapoursynth/vapoursource.cpp
+++ b/src/vapoursynth/vapoursource.cpp
@@ -31,7 +31,7 @@
 
 static int GetNumPixFmts() {
 	int n = 0;
-	while (av_get_pix_fmt_name((PixelFormat)n))
+	while (av_get_pix_fmt_name((AVPixelFormat)n))
 		n++;
 	return n;
 }
@@ -41,23 +41,23 @@ static bool IsRealNativeEndianPlanar(const AVPixFmtDescriptor &desc) {
 	for (int i = 0; i < desc.nb_components; i++)
 		used_planes = std::max(used_planes, (int)desc.comp[i].plane + 1);
 	bool temp = (used_planes == desc.nb_components) && (desc.comp[0].depth_minus1 + 1 >= 8) &&
-		(!(desc.flags & PIX_FMT_PAL));
+		(!(desc.flags & AV_PIX_FMT_FLAG_PAL));
 	if (!temp)
 		return false;
 	else if (desc.comp[0].depth_minus1 + 1 == 8)
 		return temp;
 	else
-		return (PIX_FMT_YUV420P10 == PIX_FMT_YUV420P10BE ? !!(desc.flags & PIX_FMT_BE) : !(desc.flags & PIX_FMT_BE));
+		return (AV_PIX_FMT_YUV420P10 == AV_PIX_FMT_YUV420P10BE ? !!(desc.flags & AV_PIX_FMT_FLAG_BE) : !(desc.flags & AV_PIX_FMT_FLAG_BE));
 }
 
 static bool HasAlpha(const AVPixFmtDescriptor &desc) {
-	return !!(desc.flags & PIX_FMT_ALPHA);
+	return !!(desc.flags & AV_PIX_FMT_FLAG_ALPHA);
 }
 
 static int GetColorFamily(const AVPixFmtDescriptor &desc) {
 	if (desc.nb_components <= 2)
 		return cmGray;
-	else if (desc.flags & PIX_FMT_RGB)
+	else if (desc.flags & AV_PIX_FMT_FLAG_RGB)
 		return cmRGB;
 	else
 		return cmYUV;
@@ -88,7 +88,7 @@ static int FormatConversionToPixelFormat(int id, bool Alpha, VSCore *core, const
 			&& desc.log2_chroma_h == f->subSamplingH)
 			return i;
 	}
-	return PIX_FMT_NONE;
+	return AV_PIX_FMT_NONE;
 }
 
 static const VSFormat *FormatConversionToVS(int id, VSCore *core, const VSAPI *vsapi) {
@@ -269,12 +269,12 @@ void VSVideoSource::InitOutputFormat(int ResizeToWidth, int ResizeToHeight,
 	for (int i = 0; i < npixfmt; i++)
 		if (IsRealNativeEndianPlanar(*av_pix_fmt_desc_get((AVPixelFormat)i)))
 			TargetFormats.push_back(i);
-	TargetFormats.push_back(PIX_FMT_NONE);
+	TargetFormats.push_back(AV_PIX_FMT_NONE);
 
-	int TargetPixelFormat = PIX_FMT_NONE;
+	int TargetPixelFormat = AV_PIX_FMT_NONE;
 	if (ConvertToFormat != pfNone) {
 		TargetPixelFormat = FormatConversionToPixelFormat(ConvertToFormat, OutputAlpha, core, vsapi);
-		if (TargetPixelFormat == PIX_FMT_NONE)
+		if (TargetPixelFormat == AV_PIX_FMT_NONE)
 			throw std::runtime_error(std::string("Source: Invalid output colorspace specified"));
 
 		TargetFormats.clear();
