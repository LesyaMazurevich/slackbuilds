#!/bin/sh
#-- postgresql for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ postgresql.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.postgresql.org/ 

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=postgresql
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-9.4.2}
SVER=$(echo ${VERSION} | cut -d . -f1-2)
DVER=${DVER:-${VERSION}}
DTVER=${DTVER:-20070115}
SETVER=${SETVER=2.0}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable krb gssapi support
SB_KRB5=${SB_KRB5:-NO}
# Set to YES to enable tests.
SB_TEST=${SB_TEST:-YES}

grep --quiet '^postgres:' /etc/group && SB_HGROUP=1
grep --quiet '^postgres:' /etc/passwd && SB_HUSER=1

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SETSRCDIR=${NAME}-setup-${SETVER}
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.md5
SRCARCHIVE2=postgresql-${DVER}-US.pdf
SETSRCARCHIVE=${SETSRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_PGRE=${MIRROR_PGRE:-http://ftp.postgresql.org/pub}
DL_URL="${MIRROR_PGRE}/source/v${VERSION}"
DL_URL2="http://www.postgresql.org/files/documentation/pdf/${SVER}/${SRCARCHIVE2}"
SETDL_URL="http://praiskup.fedorapeople.org/proj/postgresql-setup/${SETSRCARCHIVE}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
#test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1
test -r ${CWD}/${SETSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${SETDL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SETSRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

unset SB_KRB5OPTS
[ "${SB_KRB5}" = "YES" ] && SB_KRB5OPTS='--with-krb5 --with-gssapi'

# Strip out -ffast-math from CFLAGS....
SLKCFLAGS="$(echo ${SLKCFLAGS}|xargs -n 1|grep -v ffast-math|xargs -n 100)"

export CFLAGS="${SLKCFLAGS} -DLINUX_OOM_SCORE_ADJ=0"
export CXXFLAGS="${SLKCFLAGS}"

SB_CONFIGURE(){
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc/pgsql \
  --localstatedir=/var \
  --datadir=/usr/share/pgsql \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-silent-rules \
  --disable-dependency-tracking \
  --build=${SLKTARGET}-${SLKDTARGET}-linux "$@"
}

( cd ${SETSRCDIR} || exit $?

  export POSTGRES_BIN=/usr/bin/postgres \
    PG_CTL_BIN=/usr/bin/pg_ctl \
    PGVERSION=${VERSION} \
    PGMAJORVERSION=${SVER} \
    PGENGINE=/usr/bin \
    PREVMAJORVERSION=${SVER} \
    PREVPGENGINE=/dev/null \
    README_DIST=/usr/doc/${NAME}-${VERSION}/README.rpm-dist \
    PKGCONFIG_DIR=/etc/pgsql

  export pgsetup_cv_os_family=redhat

  SB_CONFIGURE \
     --docdir=/usr/doc/${NAME}-${VERSION} || exit $?
  make -j${NJOBS} || make || exit $?
  make install DESTDIR=${PKG} systemdunitsdir=/lib/systemd/system || exit $?

  rm -rf ${PKG}/usr/libexec/initscripts

) || exit $?

SB_CONFIGURE \
  --with-docdir=/usr/doc \
  --disable-rpath \
  --with-perl \
  --with-tcl \
  --with-tclconfig=/usr/lib${LIBDIRSUFFIX} \
  --with-python \
  --with-openssl \
  ${SB_KRB5OPTS} \
  --enable-nls \
  --enable-thread-safety \
  --with-system-tzdata=/usr/share/zoneinfo || exit 1

make -j${NJOBS} world || make world || exit $?

# Have to hack makefile to put correct path into tutorial scripts
sed "s|C=\`pwd\`;|C=/usr/lib${LIBDIRSUFFIX}/pgsql/tutorial;|" < src/tutorial/Makefile > src/tutorial/GNUmakefile
make -j${NJOBS} -C src/tutorial NO_PGXS=1 all || exit 1
rm -f src/tutorial/GNUmakefile

if [ "${SB_TEST}" = "YES" ] ;then
  echo ====================TESTING=========================
  ( cd src/test/regress
    make all
    cp ../../../contrib/spi/refint.so .
    cp ../../../contrib/spi/autoinc.so .
    make MAX_CONNECTIONS=5 check || exit 1
    make clean
    rm -f refint.so autoinc.so
  ) || exit 1
  echo ====================TESTING END=====================
fi

make DESTDIR=${PKG} install-world || exit $?

# make sure these directories exist even if we suppressed all contrib modules
mkdir -p ${PKG}/usr/share/pgsql/contrib
mkdir -p ${PKG}/usr/share/pgsql/extension

unset MARCH
# multilib header hacks
case "${ARCH}" in
  i[3-6]86)  MARCH=i386
             ;;
    s390)    MARCH=s390
             ;;
    x86_64)  MARCH=x86_64
             ;;
esac

if [ -n "${MARCH}" ] ;then
  mv ${PKG}/usr/include/pg_config.h ${PKG}/usr/include/pg_config_${MARCH}.h || exit 1
  zcat ${CWD}/pg_config.h.gz > ${PKG}/usr/include/pg_config.h || exit 1
  mv ${PKG}/usr/include/pgsql/server/pg_config.h \
    ${PKG}/usr/include/pgsql/server/pg_config_${MARCH}.h || exit 1
  zcat ${CWD}/ecpg_config.h.gz > ${PKG}/usr/include/pgsql/server/ecpg_config.h || exit 1
  mv ${PKG}/usr/include/ecpg_config.h ${PKG}/usr/include/ecpg_config_${MARCH}.h || exit 1
  zcat ${CWD}/ecpg_config.h.gz > ${PKG}/usr/include/ecpg_config_${MARCH}.h || exit 1
fi

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/pgsql/tutorial
cp src/tutorial/* ${PKG}/usr/lib${LIBDIRSUFFIX}/pgsql/tutorial/ || exit 1

# PGDATA needs removal of group and world permissions due to pg_pwd hole.
mkdir -p ${PKG}/var/lib/pgsql/data
chmod 0700 ${PKG}/var/lib/pgsql
chmod 700 ${PKG}/var/lib/pgsql/data

# backups of data go here...
mkdir -p ${PKG}/var/lib/pgsql/backups
chmod 700 ${PKG}/var/lib/pgsql/backups

# postgres' .bash_profile
zcat ${CWD}/${NAME}-bashprofile.gz \
  > ${PKG}/var/lib/pgsql/.bash_profile.new || exit 1

# Create the multiple postmaster startup directory
mkdir -p ${PKG}/etc/pgsql
chmod 0700 ${PKG}/etc/pgsql

mkdir -p ${PKG}/etc/rc.d
sed "s/^PGVERSION=.*$/PGVERSION=${VERSION}/" ${CWD}/rc.${NAME} \
  > ${PKG}/etc/rc.d/rc.${NAME} || exit 1
chmod 0755 ${PKG}/etc/rc.d/rc.${NAME} || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${NAME}.gz \
  > ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/lib/tmpfiles.d
echo 'd /run/postgresql 0755 postgres postgres -' > ${PKG}/usr/lib/tmpfiles.d/${NAME}.conf

# Create the directory for sockets.
mkdir -p ${PKG}/var/run/postgresql

# Add a documentation directory:
if [ -d ${PKG}/usr/doc/pgsql ] ; then
  mv ${PKG}/usr/doc/pgsql/* ${DOCDIR}/
fi
mkdir -p ${DOCDIR}/contrib
if [ -d ${PKG}/usr/share/doc ] ; then
  mv ${PKG}/usr/share/doc/*/* ${DOCDIR}/
  rm -rf ${PKG}/usr/share/doc
  rmdir -p ${PKG}/usr/share
fi
cp -a \
  COPYRIGHT README HISTORY doc/src/FAQ ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -f ${CWD}/${SRCARCHIVE2} ] && cp -a ${CWD}/${SRCARCHIVE2} ${DOCDIR}/
cp -a  contrib/*/README.* contrib/spi/*.example ${DOCDIR}/contrib/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 100 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^postgres:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            postgres 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^postgres:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/var/lib/pgsql:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "postgres"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
            -d /var/lib/pgsql \
            -u ${USER_ID} \
            -s /bin/bash \
            -g postgres \
            ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
            -c 'PostgreSQL Server' \
           -u $(free_user_id) \
            -g postgres \
            -s /bin/bash \
            -d /var/lib/pgsql \
            postgres 2> /dev/null
fi
EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions' >> ${PKG}/install/doinst.sh
${CHROOT} /bin/chown postgres.postgres /var/lib/pgsql
${CHROOT} /bin/chmod 0700 /var/lib/pgsql
${CHROOT} /bin/chown postgres.postgres /var/lib/pgsql/data
${CHROOT} /bin/chmod 0700 /var/lib/pgsql/data
${CHROOT} /bin/chown postgres.postgres /var/lib/pgsql/backups
${CHROOT} /bin/chmod 0700 /var/lib/pgsql/backups
${CHROOT} /bin/chown postgres.postgres /var/lib/pgsql/.bash_profile*
${CHROOT} /bin/chown postgres.postgres /var/run/postgresql

if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}-bashprofile.gz ${CWD}/*.h.gz \
    ${CWD}/setup.onlyonce.rc*.gz ${CWD}/rc.${NAME} ${CWD}/Makefile*.gz \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown postgres.postgres ./var/lib/pgsql ./var/lib/pgsql/{data,backups,.bash_profile*} ./var/run/postgresql ; "


ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
