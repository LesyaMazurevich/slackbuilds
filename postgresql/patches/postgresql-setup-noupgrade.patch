diff -up postgresql-setup-2.0/README.rpm-dist.in.noprev postgresql-setup-2.0/README.rpm-dist.in
--- postgresql-setup-2.0/README.rpm-dist.in.noprev	2014-09-19 09:21:20.000000000 -0300
+++ postgresql-setup-2.0/README.rpm-dist.in	2015-02-05 22:00:37.587298275 -0200
@@ -81,27 +81,6 @@ dump and reload process to bring your da
 Shut down the old postmaster, upgrade to the new version RPMs, perform initdb,
 and run the dump file through psql to restore your data.
 
-In some major releases, the RPMs also support in-place upgrade from the
-immediately previous major release.  Currently, you can upgrade in-place
-from @PREVMAJORVERSION@.x to @PGMAJORVERSION@.x.  This is much faster than a dump and reload.
-To do an in-place upgrade:
-* shut down the old postmaster ("systemctl stop @pkgname@.service")
-* optionally make a backup of @PGDATADIR@ (recommended!)
-* install the new version's RPMs (install all the ones you had before,
-  plus @pkgname@-upgrade)
-* as root, run "@pkgname@-setup --upgrade"
-* update the configuration files @PGDATADIR@/*.conf with any
-  customizations you had before (your old configuration files are in
-  @POSTGRES_HOMEDIR@/data-old/)
-* as root, run "systemctl start @pkgname@.service"
-* the @pkgname@-upgrade package can be removed after the update is complete,
-  as can @POSTGRES_HOMEDIR@/data-old/
-
-NOTE: The in-place upgrade process is new and relatively poorly tested,
-so if your data is critical it's a really good idea to make a tarball
-backup of @PGDATADIR@ before running the upgrade.  This will
-let you get back to where you were in case of disaster.
-
 POSTGRESQL RPM PACKAGES AND RATIONALE.
 -----------------------------------------------------------------------------
 PostgreSQL is split up into multiple packages so that users can 'pick and
diff -up postgresql-setup-2.0/postgresql-check-db-dir.in.noprev postgresql-setup-2.0/postgresql-check-db-dir.in
--- postgresql-setup-2.0/postgresql-check-db-dir.in.noprev	2014-10-02 12:49:43.000000000 -0300
+++ postgresql-setup-2.0/postgresql-check-db-dir.in	2015-02-05 22:01:02.678995013 -0200
@@ -42,9 +42,6 @@ PGVERSION=@PGVERSION@
 # Major version of PostgreSQL, e.g. 9.0
 PGMAJORVERSION=@PGMAJORVERSION@
 
-# Previous major version, e.g., 8.4, for upgrades
-PREVMAJORVERSION=@PREVMAJORVERSION@
-
 # Distribution README file
 README_DIST=@README_DIST@
 
@@ -55,12 +52,6 @@ then
     if [ x`cat "$PGDATA/PG_VERSION"` = x"$PGMAJORVERSION" ]
     then
         : A-OK
-    elif [ x`cat "$PGDATA/PG_VERSION"` = x"$PREVMAJORVERSION" ]
-    then
-        echo $"An old version of the database format was found."
-        echo $"Use \"postgresql-setup --upgrade\" to upgrade to version $PGMAJORVERSION."
-        echo $"See $README_DIST for more information."
-        exit 1
     else
         echo $"An old version of the database format was found."
         echo $"You need to dump and reload before using PostgreSQL $PGMAJORVERSION."
diff -up postgresql-setup-2.0/postgresql-setup.in.noprev postgresql-setup-2.0/postgresql-setup.in
--- postgresql-setup-2.0/postgresql-setup.in.noprev	2014-10-02 12:16:28.000000000 -0300
+++ postgresql-setup-2.0/postgresql-setup.in	2015-02-05 21:55:57.784445166 -0200
@@ -15,12 +15,6 @@ PGMAJORVERSION=@PGMAJORVERSION@
 # Directory containing the postmaster executable
 PGENGINE=@PGENGINE@
 
-# Previous major version, e.g., 8.4, for upgrades
-PREVMAJORVERSION=@PREVMAJORVERSION@
-
-# Directory containing the previous postmaster executable
-PREVPGENGINE=@PREVPGENGINE@
-
 # Distribution README file
 README_DIST=@README_DIST@
 
@@ -45,9 +39,6 @@ file $README_DIST.
 Available operation mode:
   --initdb      Create a new PostgreSQL database cluster.  This is usually the
                 first action you perform after PostgreSQL server installation.
-  --upgrade     Upgrade database cluster for new major version of PostgreSQL
-                server.  This installation is configured to perform upgrade
-                from $PREVMAJORVERSION.X to $PGMAJORVERSION.X.
 
 Options:
   --unit=UNIT_NAME           The UNIT_NAME is used to select proper systemd's
@@ -96,7 +87,6 @@ print_version()
 {
     echo "postgresql@DISTSUFF@-setup @VERSION@"
     echo $"Built against PostgreSQL version @PGMAJORVERSION@ and configured"
-    echo $"to upgrade from PostgreSQL version @PREVMAJORVERSION@."
 }
 
 
@@ -175,91 +165,6 @@ initdb()
 }
 
 
-upgrade()
-{
-    # must see previous version in PG_VERSION
-    if [ ! -f "$pgdata/PG_VERSION" -o \
-         x`cat "$pgdata/PG_VERSION"` != x"$PREVMAJORVERSION" ]
-    then
-        error   $"Cannot upgrade because the database in $pgdata is not of"
-        error_q $"compatible previous version $PREVMAJORVERSION."
-        exit 1
-    fi
-    if [ ! -x "$PGENGINE/pg_upgrade" ]; then
-        error $"Please install the postgresql-upgrade package."
-        exit 5
-    fi
-
-    # Set up log file for pg_upgrade
-    rm -f "$upgrade_log"
-    touch "$upgrade_log" || exit 1
-    chown postgres:postgres "$upgrade_log"
-    chmod go-rwx "$upgrade_log"
-    [ -x /sbin/restorecon ] && /sbin/restorecon "$upgrade_log"
-
-    # Move old DB to pgdataold
-    pgdataold="${pgdata}-old"
-    rm -rf "$pgdataold"
-    mv "$pgdata" "$pgdataold" || exit 1
-
-    # Create configuration file for upgrade process
-    HBA_CONF_BACKUP="$pgdataold/pg_hba.conf.postgresql-setup.`date +%s`"
-    HBA_CONF_BACKUP_EXISTS=0
-
-    if [ ! -f $HBA_CONF_BACKUP ]; then
-        mv "$pgdataold/pg_hba.conf" "$HBA_CONF_BACKUP"
-        HBA_CONF_BACKUP_EXISTS=1
-
-        # For fluent upgrade 'postgres' user should be able to connect
-        # to any database without password.  Temporarily, no other type
-        # of connection is needed.
-        echo "local all postgres ident" > "$pgdataold/pg_hba.conf"
-    fi
-
-    info $"Upgrading database."
-
-    # Create empty new-format database
-    if perform_initdb; then
-        # Do the upgrade
-        $SU -l postgres -c "$PGENGINE/pg_upgrade \
-                        '--old-bindir=$PREVPGENGINE' \
-                        '--new-bindir=$PGENGINE' \
-                        '--old-datadir=$pgdataold' \
-                        '--new-datadir=$pgdata' \
-                        --link \
-                        '--old-port=$PGPORT' '--new-port=$PGPORT' \
-                        --user=postgres \
-                        $PGSETUP_PGUPGRADE_OPTIONS" \
-                                >> "$upgrade_log" 2>&1 < /dev/null
-        if [ $? -ne 0 ]; then
-            # pg_upgrade failed
-            script_result=1
-        fi
-    else
-        # initdb failed
-        script_result=1
-    fi
-
-    # Move back the backed-up pg_hba.conf regardless of the script_result.
-    if [ x$HBA_CONF_BACKUP_EXISTS = x1 ]; then
-        mv -f "$HBA_CONF_BACKUP" "$pgdataold/pg_hba.conf"
-    fi
-
-    if [ $script_result -eq 0 ]; then
-        info $"Upgraded OK."
-        warn $"The configuration files were replaced by default configuration."
-        warn $"The previous configuration and data are stored in folder"
-        warn $pgdataold.
-    else
-        # Clean up after failure
-        rm -rf "$pgdata"
-        mv "$pgdataold" "$pgdata"
-        error $"failed"
-    fi
-    info $"See $upgrade_log for details."
-}
-
-
 generate_systemd_dropin()
 {
     local service="$1"
@@ -573,11 +478,6 @@ test -n "$envfile_pgport" && pgport="$en
 test -n "$option_port" -a "$option_port" != "$pgport" \
     && warn $"--pgport ignored, by configuration pgport='$pgport'"
 
-# We expect that for upgrade - the previous stack was in working state (thus
-# running on the default port).
-test "$option_mode" = upgrade -a "$pgport" = default \
-    && pgport=$PGPORT_DEF
-
 # This is mostly for 'initdb'.  We assume that the default port is $PGPORT_DEF
 # if not set explicitly (only for default service name 'postgresql').
 if test "$pgport" = default -a $option_service == postgresql; then
@@ -617,9 +517,6 @@ case "$option_mode" in
     initdb)
         initdb
         ;;
-    upgrade)
-        upgrade
-        ;;
     *)
         echo >&2 "$USAGE_STRING"
         exit 2
