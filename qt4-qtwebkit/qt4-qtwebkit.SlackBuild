#!/bin/sh
#-- qt4-qtwebkit for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ qt4-qtwebkit.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://trac.webkit.org/wiki/QtWebKit

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=qtwebkit
NAME=qt4-${PNAME}
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.3.4}
SVER=$(echo ${VERSION} | cut -d. -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-tgz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KDE=${MIRROR_KDE:-ftp://ftp.kde.org/pub/kde}
DL_URL="${MIRROR_KDE}/stable/${PNAME}-${SVER}/${VERSION}/src/${SRCARCHIVE}"
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || sh ${CWD}/${FEDORADIST} ${PNAME} ${FEDORABRANCH} ${SRCARCHIVE} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
  ASM_OPTS=""
else
  LIBDIRSUFFIX=""
  ASM_OPTS='--no-force-sse2'
fi

# Set the config option variables if they are not already set:
[ -r ../qt4.options ] && source ../qt4.options

_qt4_prefix=${_qt4_prefix:-/usr/lib${LIBDIRSUFFIX}/qt4}
_qt4_bindir=${_qt4_bindir:-${_qt4_prefix}/bin}
_qt4_datadir=${_qt4_datadir:-${_qt4_prefix}}
_qt4_demosdir=${_qt4_demosdir:-${_qt4_prefix}/demos}
_qt4_docdir=${_qt4_docdir:-/usr/doc/qt4}
_qt4_examplesdir=${_qt4_examplesdir:-${_qt4_prefix}/examples}
_qt4_headerdir=${_qt4_headerdir:-/usr/include}
_qt4_libdir=${_qt4_libdir:-/usr/lib${LIBDIRSUFFIX}}
_qt4_plugindir=${_qt4_plugindir:-${_qt4_prefix}/plugins}
_qt4_sysconfdir=${_qt4_sysconfdir:-/etc}
_qt4_translationdir=${_qt4_translationdir:-/usr/share/qt4/translations}
_qt4_qmake=${_qt4_qmake:-${_qt4_bindir}/qmake}

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

for filepro in $(find . -type f -name '*.pro') ; do
  echo >> "${filepro}"
  echo "QMAKE_CFLAGS_RELEASE += ${SLKCFLAGS}" >> "${filepro}"
  echo "QMAKE_CXXFLAGS_RELEASE += ${SLKCFLAGS}" >> "${filepro}"
  echo "QMAKE_LFLAGS_RELEASE += ${LDFLAGS}" >> "${filepro}"
done

sed -i -e "/QMAKE_CXXFLAGS_RELEASE/s|-O3|\0 ${SLKCFLAGS}|g" Source/JavaScriptCore/Target.pri
sed -i -e "/QMAKE_CXXFLAGS_RELEASE/s|-g1|\0 ${SLKCFLAGS}|g" Source/WebCore/WebCore.pri

sed -i \
  -e "/QMAKE_CXXFLAGS_RELEASE/s|-O2||g" \
  Source/WTF/WTF.pro \
  Source/JavaScriptCore/Target.pri \
  Source/WebCore/WebCore.pri || exit 1

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

mkdir bin
cat > bin/qmake <<EOF
#!/bin/sh
${_qt4_qmake} \
  \$@ \
  QMAKE_CFLAGS="${CFLAGS}" \
  QMAKE_CXXFLAGS="${CXXFLAGS}" \
  QMAKE_LFLAGS="${LDFLAGS}" 
EOF
chmod 0755 bin/qmake

SB_SROOT="$(pwd)"

PATH="${SB_SROOT}"/bin${PATH:+:${PATH}}; export PATH
QMAKEPATH="${SB_SROOT}"/Tools/qmake; export QMAKEPATH

mkdir -p build_${PNAME}
( cd build_${PNAME}
  WEBKITOUTPUTDIR=$(pwd); export WEBKITOUTPUTDIR
  ../Tools/Scripts/build-webkit \
    --qt \
    --no-webkit2 \
    --release \
    --qmakearg="CONFIG+=production_build DEFINES+=HAVE_LIBWEBP=1" \
    --makeargs=-j${NJOBS} \
    --system-malloc ${ASM_OPTS} \
    || exit $?

  make install INSTALL_ROOT=${PKG} -C Release || exit $?

) || exit $?

if [ -x /usr/bin/chrpath ] ;then
  chrpath --delete -k ${PKG}/${_qt4_libdir}/libQt*.so*
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

sed -i \
  -e "/^QMAKE_PRL_BUILD_DIR/d" \
  -e "s|-L${SB_SROOT}/lib||g" \
  -e "/^QMAKE_PRL_LIBS/s|-L/usr/lib${LIBDIRSUFFIX} ||g" \
  -e "s|-ljscore ||g" \
  -e "s|-lwebcore ||g" \
  -e 's|-L../../WebCore/release ||g' \
  -e 's|-L../../JavaScriptCore/release ||g' \
  -e 's|-L../JavaScriptCore/release ||g' \
  ${PKG}/${_qt4_libdir}/*.prl

sed -i -e '/^Libs.private:/d' ${PKG}/${_qt4_libdir}/pkgconfig/*.pc

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING LICENSE README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${FEDORADIST} ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
