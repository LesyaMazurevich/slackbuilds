#!/bin/sh
#-- netpbm for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ netpbm.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://netpbm.sourceforge.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

SNAPBUILD=${SNAPBUILD:-YES}

NAME=netpbm
PKG=${PKG:-${TMP}/package-${NAME}}

VSRCARCHIVE=${NAME}-version

# For version, see https://netpbm.svn.sourceforge.net/svnroot/netpbm/stable/Makefile.version
if [ "${SNAPBUILD}" = "YES" ] ;then
  export branch=${branch:-advanced}
  if [ -x /usr/bin/wget ] ;then
    if ! [ -r ${CWD}/${VSRCARCHIVE} ] ;then
      echo "Retrieving version"
      wget --no-check-certificate -O - \
        https://netpbm.svn.sourceforge.net/svnroot/netpbm/${branch}/version.mk | \
        sed -e 's| ||g' > ${CWD}/${VSRCARCHIVE}
    fi
    source ${CWD}/${VSRCARCHIVE}
    VERSION=${VERSION:-"${NETPBM_MAJOR_RELEASE}.${NETPBM_MINOR_RELEASE}.${NETPBM_POINT_RELEASE}"}
    unset NETPBM_MAJOR_RELEASE NETPBM_MINOR_RELEASE NETPBM_POINT_RELEASE
  fi
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
else
  VERSION=${VERSION:-10.69.2}
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"
SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible
if [ "${SNAPBUILD}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
else
  test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .
chmod 755 configure buildtools/stamp-date buildtools/install.sh buildtools/mkinstalldirs 

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e "s|\$(LDSHLIB)|\$(LDSHLIB) ${LDFLAGS}|g" lib/Makefile || exit 1

mv buildtools/pkgconfig_template buildtools/pkgconfig_template.orig

cat > buildtools/pkgconfig_template <<EOF
prefix=/usr
exec_prefix=\${prefix}
libdir=/usr/lib${LIBDIRSUFFIX}
includedir=\${prefix}/include

EOF

sed \
  -e "s|@VERSION@|${VERSION}|g" \
  -e 's|@LINKDIR@|${libdir}|g' \
  -e 's|@INCLUDEDIR@|${includedir}|g' \
  buildtools/pkgconfig_template.orig \
  >> buildtools/pkgconfig_template || exit 1

SOVER="$(grep '^MAJ =' lib/Makefile |  awk '{print $3}')"

#sed -i -e '/config_mk/d' buildtools/configure.pl
./configure <<EOF



















EOF

TOP=$(pwd)
make -e \
  CC=/usr/bin/gcc \
  LDFLAGS="-L${TOP}/pbm -L${TOP}/pgm -L${TOP}/pnm -L${TOP}/ppm ${LDFLAGS}" \
  CFLAGS="${SLKCFLAGS} -fPIC -ffast-math -pedantic -fno-common -Wall -Wno-uninitialized -Wmissing-declarations -Wimplicit -Wwrite-strings -Wmissing-prototypes -Wundef -I/usr/include/jbigkit" \
  LADD="-lm" \
  DEFAULT_TARGET=nonmerge \
  NETPBMLIBTYPE=unixshared \
  NETPBMLIBSUFFIX=so \
  STATICLIB_TOO=n \
  JPEGINC_DIR=/usr/include \
  PNGINC_DIR=/usr/include \
  TIFFINC_DIR=/usr/include \
  JPEGLIB_DIR=/usr/lib${LIBDIRSUFFIX} \
  PNGLIB_DIR=/usr/lib${LIBDIRSUFFIX} \
  TIFFLIB_DIR=/usr/lib${LIBDIRSUFFIX} \
  LINUXSVGALIB="NONE" \
  X11LIB=/usr/lib${LIBDIRSUFFIX}/libX11.so \
  XML2LIBS="NONE" \
  JASPERLIB="" \
  JASPERDEPLIBS="-ljasper" \
  JBIGLIB='-ljbig' \
  NETPBM_DOCURL="http://netpbm.sourceforge.net/doc/" || exit 1

# prepare man files
( cd userguide
  for i in *.html ; do
    ../buildtools/makeman ${i}
  done
  for i in 1 3 5 ; do
    mkdir -p man/man${i}
    mv *.${i} man/man${i}
  done
) || exit 1

mkdir -p ${PKG} || exit 1
make package pkgdir=${PKG}/usr LINUXSVGALIB="NONE" XML2LIBS="NONE" STATICLIB_TOO=n || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
if [ "/usr/lib${LIBDIRSUFFIX}" != "/usr/lib" ]; then
  mv ${PKG}/usr/lib/lib* ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1
  rmdir ${PKG}/usr/lib
fi

ln -sf libnetpbm.so.${SOVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/libnetpbm.so || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig
mv ${PKG}/usr/pkgconfig_template \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/netpbm.pc || exit 1

rm -rf ${PKG}/usr/man
mv userguide/man ${PKG}/usr/ || exit 1

# Get rid of the useless non-ascii character in pgmminkowski.1
sed -i 's/\xa0//' ${PKG}/usr/man/man1/pgmminkowski.1

# Don't ship man pages for non-existent binaries and bogus ones
for i in hpcdtoppm pcdovtoppm pnmtojbig \
  ppmsvgalib vidtoppm picttoppm jbigtopnm \
  directory error extendedopacity \
  pam pbm pgm pnm ppm index libnetpbm_dir \
  liberror pambackground pamfixtrunc \
  pamtogif pamtooctaveimg pamundice ppmtotga; do

  rm -f ${PKG}/usr/man/man1/${i}.1
done
rm -f ${PKG}/usr/man/man5/extendedopacity.5

mkdir -p ${PKG}/usr/share/netpbm
mv ${PKG}/usr/misc/*.map ${PKG}/usr/share/netpbm/
mv ${PKG}/usr/misc/rgb.txt ${PKG}/usr/share/netpbm/
rm -rf ${PKG}/usr/README
rm -rf ${PKG}/usr/VERSION
rm -rf ${PKG}/usr/link
rm -rf ${PKG}/usr/misc
rm -rf ${PKG}/usr/pkginfo
rm -rf ${PKG}/usr/config_template

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  doc/copyright_summary doc/COPYRIGHT.PATENT doc/GPL_LICENSE.txt doc/HISTORY \
  README userguide ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${SNAPUPDATE} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
