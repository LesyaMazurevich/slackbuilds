#!/bin/sh
#-- dropbox for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ dropbox.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.getdropbox.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=dropbox
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.8.8}
# x86 or x86_64
ARCH=${ARCH:-x86_64}
[ "${ARCH}" = "x86_64" ] || ARCH=x86
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Do no blame Dropbox devs if setting YES in these
# Set to YES to use system libs
# bzip2
SB_BZ2=${SB_BZ2:-YES}
# popt
SB_POPT=${SB_POPT:-YES}
# python
SB_PY=${SB_PY:-YES}
# Set to YES if to use system Qt and PyQt
SB_QT=${SB_QT:-NO}

PYSITEARCH=$(python2 -c 'from distutils import sysconfig; print sysconfig.get_python_lib(1)')
PYSITELIB=$(python2 -c 'from distutils import sysconfig; print sysconfig.get_python_lib()')
PYABI=$(python2 -c 'import sys; print (sys.version[:3])')
PYVER=$(python2 -c 'import sys; print sys.version.split(" ")[0]')

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${NAME}-lnx.${ARCH}-${VERSION}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.dropbox.com/download?plat=lnx.${ARCH}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} -O ${CWD}/${SRCARCHIVE} || exit 1

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "${CWD}/${SRCARCHIVE} is empty"
  echo "Delete ${CWD}/${SRCARCHIVE}, and try again."
  exit 1
fi

RVER="$( tar zxOf ${CWD}/${SRCARCHIVE} .dropbox-dist/VERSION 2> /dev/null | head -n 1 )"
if [ "${RVER}" != "${VERSION}" ] ;then
  echo "Version mismatch"
  echo "You have ${RVER} in ${CWD}/${SRCARCHIVE} instead ${VERSION} "
  echo "Edit VERSION variable and try again"
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir ${SRCDIR}
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1

mv .${NAME}-dist ${NAME} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

rm -f ${NAME}/*/lib{dbus*,drm,ffi,GL,stdc++,X11-xcb,z}.so*

PROGDIR=/usr/lib${LIBDIRSUFFIX}/${NAME}
mkdir -p ${PKG}/${PROGDIR}

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}
cp -a ${NAME}/${NAME}-lnx.${ARCH}-${VERSION}/* ${PKG}/${PROGDIR}/ || exit 1

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

xtcsoname(){
  objdump -p "${1}" | grep SONAME | awk '{print $2}'
}

missing(){
  if ! [ -e "$1" ] ;then
    echo "File $1 is missing!"
    return 5
  fi
}

# bzip2
if [ "${SB_BZ2}" = "YES" ] ;then
  ( cd ${PKG}/${PROGDIR} || exit 1
    for file in libbz2*.so* ;do
      SONAME=${file}
      missing /usr/lib${LIBDIRSUFFIX}/${SONAME} || missing /lib${LIBDIRSUFFIX}/${SONAME} || exit $?
      rm -fv ${file}
    done
  ) || exit $?
fi

# popt
if [ "${SB_POPT}" = "YES" ] ;then
  ( cd ${PKG}/${PROGDIR} || exit 1
    for file in libpopt*.so*  ;do
      SONAME=$(xtcsoname ${file})
      missing /usr/lib${LIBDIRSUFFIX}/${SONAME} || missing /lib${LIBDIRSUFFIX}/${SONAME} || exit $?
      rm -fv ${file}
    done
  ) || exit $?
fi

# python
if [ "${SB_PY}" = "YES" ] ;then
  reldir=$(abs2rel /usr/lib${LIBDIRSUFFIX}/python${PYABI}/lib-dynload ${PROGDIR})
  for file in \
    _bisect _codecs_cn _codecs_hk _codecs_iso2022 _codecs_jp _codecs_kr _codecs_tw \
    _collections _csv _ctypes _curses _elementtree _functools _hashlib _heapq \
    _hotshot _io _json _locale _lsprof _multibytecodec _multiprocessing \
    _random _socket _sqlite3 _ssl _struct array binascii bz2 cPickle cStringIO \
    datetime fcntl grp itertools math mmap operator parser pyexpat resource \
    select strop termios time unicodedata zlib
  do
    missing /usr/lib${LIBDIRSUFFIX}/python${PYABI}/lib-dynload/${file}.so
    rm -fv ${PKG}/${PROGDIR}/${file}.so
    ln -sf ${reldir}/${file}.so ${PKG}/${PROGDIR}/${file}.so
    rm -fv ${PKG}/${PROGDIR}/py
    rm -fv ${PKG}/${PROGDIR}/libexpat.so.*
    rm -fv ${PKG}/${PROGDIR}/libsqlite3.so.*
  done

  reldir=$(abs2rel ${PYSITELIB} ${PROGDIR})
  for file in \
    _dbus_bindings _posixsubprocess
  do
    missing ${PYSITELIB}/${file}.so
    rm -fv ${PKG}/${PROGDIR}/${file}.so
    ln -sf ${reldir}/${file}.so ${PKG}/${PROGDIR}/${file}.so
    rm -fv ${PKG}/${PROGDIR}/py
    rm -fv ${PKG}/${PROGDIR}/libexpat.so.*
    rm -fv ${PKG}/${PROGDIR}/libsqlite3.so.*
  done
fi

cat > ${PKG}/${PROGDIR}/dropboxd <<EOF
#!/bin/sh
PAR=${PROGDIR}
exec "\${PAR}/dropbox" "\$@"
EOF
chmod 0755 ${PKG}/${PROGDIR}/dropboxd || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
