#!/bin/sh
#-- xgames for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ xgames.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=xgames
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.3}
CUCKOO_VER=${CUCKOO_VER:-1.1}
MS_VER=${MS_VER:-3.0}
SNOW_VER=${SNOW_VER:-1.42}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-4}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SSRCDIR=spider
MSRCDIR=maze
CMSRCDIR=xcolormap
CUCKOO_SRCDIR=xcuckoo
LSRCDIR=xlander
MSSRCDIR=xminesweep${MS_VER}
NSRCDIR=xneko
RSRCDIR=xroach
SNOW_SRCDIR=xsnow-${SNOW_VER}
SSRCARCHIVE=${SSRCDIR}.tar.gz
MSRCARCHIVE=${MSRCDIR}.tar.gz
CMSRCARCHIVE=${CMSRCDIR}.tar.gz
CUCKOO_SRCARCHIVE=${CUCKOO_SRCDIR}-${CUCKOO_VER}.tar.gz
LSRCARCHIVE=${LSRCDIR}.tar.gz
MSSRCARCHIVE=${MSSRCDIR}.tar.gz
NSSRCARCHIVE=${NSRCDIR}.tar.gz
RSRCARCHIVE=${RSRCDIR}.tar.gz
SNOW_SRCARCHIVE9=${SNOW_SRCDIR}.tar.gz

SB_PATCHDIR=${CWD}/patches

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SLK=${MIRROR_SLK:-ftp://ftp.slackware.com/pub/slackware}
DL_URL="${MIRROR_SLK}/slackware-current/source/xap/${NAME}"

# if source is not present, download in source rootdir if possible, or in /tmp
for file in ${SSRCARCHIVE} ${MSRCARCHIVE} ${CMSRCARCHIVE} ${CUCKOO_SRCARCHIVE} ${LSRCARCHIVE} \
   ${MSSRCARCHIVE} ${NSSRCARCHIVE} ${RSRCARCHIVE} ${SNOW_SRCARCHIVE9} ; do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR}
cd ${SRCDIR} || exit 1
for file in ${SSRCARCHIVE} ${MSRCARCHIVE} ${CMSRCARCHIVE} ${CUCKOO_SRCARCHIVE} ${LSRCARCHIVE} \
   ${MSSRCARCHIVE} ${NSSRCARCHIVE} ${RSRCARCHIVE} ${SNOW_SRCARCHIVE9} ; do
  tar -xvf ${CWD}/${file} || exit 1
done

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

mkdir -p ${PKG}/usr/bin
mkdir -p ${PKG}/usr/man/man6

( cd ${SSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/spider.diff.gz | patch -p1 --verbose || exit 1
  xmkmf || exit 1
  sed -i -e "s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LOCAL_LDFLAGS="${LDFLAGS}" || exit 1
  install -m0755 spider ${PKG}/usr/bin/spider || exit 1
  install -pm0644 spider.man ${PKG}/usr/man/man6/spider.6 || exit 1
  mkdir -p ${DOCDIR}/spider
  cp -a README* ${DOCDIR}/spider
) || exit 1

( cd ${MSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/maze.diff.gz | patch -p1 --verbose || exit 1
  xmkmf || exit 1
  sed -i -e "s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LOCAL_LDFLAGS="${LDFLAGS}" || exit 1
  install -m0755 maze ${PKG}/usr/bin/maze || exit 1
  install -pm0644 maze.man ${PKG}/usr/man/man6/maze-xgames.6 || exit 1
  mkdir -p ${DOCDIR}/maze
  cp -a README* ${DOCDIR}/maze
) || exit 1

( cd ${CMSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/xcolormap.diff.gz | patch -p1 --verbose || exit 1
  make CFLAGS="${SLKCFLAGS} ${LDFLAGS}" || exit 1
  install -m0755 xcolormap ${PKG}/usr/bin/xcolormap || exit 1
  mkdir -p ${DOCDIR}/xcolormap
  cp -a README* ${DOCDIR}/xcolormap
) || exit 1

( cd ${CUCKOO_SRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/xcuckoo.diff.gz | patch -p1 --verbose || exit 1
  xmkmf || exit 1
  sed -i -e "s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LOCAL_LDFLAGS="${LDFLAGS}" || exit 1
  install -m0755 xcuckoo ${PKG}/usr/bin/xcuckoo || exit 1
  install -pm0644 xcuckoo.man ${PKG}/usr/man/man6/xcuckoo.6 || exit 1
  mkdir -p ${DOCDIR}/xcuckoo
  cp -a CHANGES ${DOCDIR}/xcuckoo
) || exit 1

( cd ${LSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/xlander.fixes.diff.gz | patch -p1 --verbose || exit 1
  zcat ${SB_PATCHDIR}/xlander-2009-07-18.diff.gz | patch -p1 --verbose || exit 1
  xmkmf || exit 1
  sed -i -e "s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LOCAL_LDFLAGS="${LDFLAGS}" || exit 1
  install -m0755 xlander ${PKG}/usr/bin/xlander || exit 1
  install -pm0644 xlander.man ${PKG}/usr/man/man6/xlander.6 || exit 1
  mkdir -p ${DOCDIR}/xlander
  cp -a README* ${DOCDIR}/xlander
) || exit 1

( cd ${MSSRCDIR} || exit 1
  xmkmf || exit 1
  sed -i -e "s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LOCAL_LDFLAGS="${LDFLAGS}" || exit 1
  install -m0755 xminesweep ${PKG}/usr/bin/xminesweep || exit 1
  install -pm0644 xminesweep.man ${PKG}/usr/man/man6/xminesweep.6 || exit 1
  mkdir -p ${DOCDIR}/xminesweep
  cp -a README* ${DOCDIR}/xminesweep
) || exit 1

( cd ${NSRCDIR} || exit 1
  xmkmf || exit 1
  sed -i -e "s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LOCAL_LDFLAGS="${LDFLAGS}" || exit 1
  install -m0755 xneko ${PKG}/usr/bin/xneko || exit 1
  install -pm0644 xneko.man ${PKG}/usr/man/man6/xneko.6 || exit 1
  mkdir -p ${DOCDIR}/xneko
  cp -a README* ${DOCDIR}/xneko
) || exit 1

( cd ${RSRCDIR} || exit 1
  xmkmf || exit 1
  sed -i -e "s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LOCAL_LDFLAGS="${LDFLAGS}" || exit 1
  install -m0755 xroach ${PKG}/usr/bin/xroach || exit 1
  install -pm0644 xroach.man ${PKG}/usr/man/man6/xroach.6 || exit 1
  mkdir -p ${DOCDIR}/xroach
  cp -a README* ${DOCDIR}/xroach
) || exit 1

( cd ${SNOW_SRCDIR} || exit 1
  xmkmf || exit 1
  sed -i -e "s|-O2|${SLKCFLAGS}|g" Makefile || exit 1
  make LOCAL_LDFLAGS="${LDFLAGS}" || exit 1
  install -m0755 xsnow ${PKG}/usr/bin/xsnow || exit 1
  install -pm0644 xsnow.man ${PKG}/usr/man/man6/xsnow.6 || exit 1
  mkdir -p ${DOCDIR}/xsnow
  cp -a README* ${DOCDIR}/xsnow
) || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0755 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
