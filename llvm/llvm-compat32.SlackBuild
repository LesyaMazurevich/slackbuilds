#!/bin/bash
#-- llvm-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ llvm-compat32.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://llvm.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=llvm
NAME=llvm-compat32
NAME2=cfe
NAME3=compiler-rt
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.7.0}
SVER=$(echo ${VERSION} | cut -d. -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
SLKTARGET=${SLKTARGET:-x86_64}
SLKTARGET32=${SLKTARGET32:-i586}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}.src
SRCDIR2=${NAME2}-${VERSION}.src
SRCDIR3=${NAME3}-${VERSION}.src
SRCARCHIVE=${SRCDIR}.tar.xz
SRCARCHIVE2=${SRCDIR2}.tar.xz
SRCARCHIVE3=${SRCDIR3}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://llvm.org/releases/${VERSION}"
DL_URLB="http://llvm.org/prereleases/${VERSION}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SRCARCHIVE2} ${SRCARCHIVE3} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS+=" ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE2} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE3} || exit 1

chmod -R u+w,go+r-w,a-s .

rm -rf tools/clang tools/lldb projects/compiler-rt

mv ${SRCDIR2} tools/clang || exit 1
mv ${SRCDIR3} projects/compiler-rt || exit 1

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i \
  -e "/ActiveLibDir/s|/lib\"|/lib${LIBDIRSUFFIX}/${PNAME}\"|g" \
  -e "/ActiveLibDir/s|/lib/\"|/lib${LIBDIRSUFFIX}/${PNAME}/\"|g" \
  tools/llvm-config/llvm-config.cpp || exit 1

# FIXME file this
# configure does not properly specify libdir
sed -i \
  -e "s|(PROJ_prefix)/lib|(PROJ_prefix)/lib${LIBDIRSUFFIX}/${PNAME}|g" \
  -e 's|\$(PROJ_prefix)/etc/llvm|/etc/llvm|g' \
  Makefile.config.in || exit 1

sed -i 's:$(RPATH) -Wl,$(\(ToolDir\|LibDir\|ExmplDir\))::g' Makefile.rules

sed -i "s|/lib /usr/lib \$lt_ld_extra|/lib${LIBDIRSUFFIX} /usr/lib${LIBDIRSUFFIX} \$lt_ld_extra|" \
  ./configure
sed -i "s|${VERSION}svn|${VERSION}|g" configure

find tools/lldb -name Makefile -exec sed -i 's/python-config/python2-config/' {} +
sed -i 's|/usr/bin/env python|&2|' \
  tools/lldb/scripts/Python/{build-swig-Python,finish-swig-Python-LLDB}.sh

# https://llvm.org/bugs/show_bug.cgi?id=22661#c6
sed -ri "/ifeq.*CompilerTargetArch/s#i386#${SLKTARGET32}#g" \
  projects/compiler-rt/make/platform/clang_linux.mk || exit 1

SLKCFLAGS+=" -DLLDB_DISABLE_PYTHON"

export CC='gcc -m32'
export CXX='g++ -m32'

mkdir obj
( cd obj || exit 1
  unset ARCH

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
../configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX}/${PNAME} \
  --datadir=/usr/lib${LIBDIRSUFFIX}/${PNAME} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --with-extra-options="-fno-devirtualize" \
  --with-extra-ld-options=-Wl,-Bsymbolic \
  --disable-polly \
  --disable-libcpp \
  --enable-cxx11 \
  --enable-clang-arcmt \
  --enable-clang-static-analyzer \
  --enable-clang-rewriter \
  --enable-optimized \
  --disable-assertions \
  --disable-profiling \
  --disable-werror \
  --disable-expensive-checks \
  --disable-debug-runtime \
  --disable-keep-symbols \
  --enable-jit \
  --enable-libffi \
  --enable-ltdl-install \
  --enable-threads \
  --enable-pthreads \
  --enable-zlib \
  --enable-pic \
  --enable-shared \
  --disable-embed-stdcxx \
  --enable-timestamps \
  --enable-backtraces \
  --enable-targets=x86,powerpc,arm,aarch64,cpp,nvptx,systemz,r600 \
  --with-binutils-include=/usr/include \
  --with-python=/usr/bin/python2 \
  --enable-bindings=none \
  --disable-doxygen \
  --without-python \
  --build=${SLKTARGET32}-${SLKDTARGET}-linux || exit 1

  export VERBOSE=1
  make -j${NJOBS} REQUIRES_RTTI=1 || make REQUIRES_RTTI=1 || exit $?

  make install DESTDIR=${PKG} PROJ_docsdir=/usr/doc/${NAME}-${VERSION} || exit $?

) || exit $?

rm -rf ${PKG}/usr/{sbin,doc,libexec,man,info,share} ${PKG}/{etc,var}

rm -rf ${PKG}/usr/lib/clang/*/include/

find ${PKG} -name .dir -print0 | xargs -0r rm -f
if [ -x /usr/bin/chrpath ] ;then
  file ${PKG}/usr/bin/* | awk -F: '$2~/ELF/{print $1}' | xargs -r chrpath -d
  file ${PKG}/lib${LIBDIRSUFFIX}/llvm/*.so | awk -F: '$2~/ELF/{print $1}' | xargs -r chrpath -d
fi

# Get rid of erroneously installed example files.
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/${PNAME}/*LLVMHello.*

find ${PKG}/usr/lib${LIBDIRSUFFIX} -name '*.a' -type f -print0 | xargs -0 chmod -x

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mv ${PKG}/usr/bin/llvm-config llvm-config-32 || exit 1
rm -rf ${PKG}/usr/bin/*
mv llvm-config-32 ${PKG}/usr/bin/llvm-config-32 || exit 1

mv ${PKG}/usr/include/llvm/Config/config.h config-32.h || exit 1
mv ${PKG}/usr/include/llvm/Config/llvm-config.h llvm-config-32.h || exit 1

rm -rf ${PKG}/usr/include/*
mkdir -p ${PKG}/usr/include/llvm/Config/

mv config-32.h ${PKG}/usr/include/llvm/Config/config-32.h || exit 1
mv llvm-config-32.h ${PKG}/usr/include/llvm/Config/llvm-config-32.h || exit 1

# Create ld.so.conf.d entry
mkdir -p ${PKG}/etc/ld.so.conf.d
cat > ${PKG}/etc/ld.so.conf.d/llvm-${ARCH32}.conf << EOF
/usr/lib${LIBDIRSUFFIX}/llvm
EOF

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -pm0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
