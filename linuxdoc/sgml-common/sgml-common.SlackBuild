#!/bin/sh
#-- sgml-common for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ sgml-common.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2013 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.w3.org/2003/entities/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=sgml-common
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.6.3}
XMLXSDVER=${XMLXSDVER:-2009/01}
ARCH=noarch
SLKTARGET=${SLKTARGET:-i586}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/linuxdoc/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOWNDIR=${CWD}/updates

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tgz
USRCARCHIVES="xml.dcl xml.soc html.dcl html.soc"
XSDSRCARCHIVE=xml.xsd

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"
XSDDL_URL="http://www.w3.org/${XMLXSDVER}/${XSDSRCARCHIVE}"
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${SRCARCHIVE} || exit 1
mkdir -p ${DOWNDIR}
( cd ${DOWNDIR} || exit 1
  for file in ${USRCARCHIVES} ;do
    test -r ${file} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${file} || exit 1
  done
  test -r ${XSDSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${XSDDL_URL} || exit 1
) || exit $?

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# replace bogus links with files
automakedir=$(ls -1d /usr/share/automake* | head -n +1)
for file in COPYING INSTALL install-sh missing mkinstalldirs; do
  rm -f ${file}
  cp -p ${automakedir}/${file} .
done

./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make install DESTDIR="${PKG}" htmldir="/usr/doc/${NAME}-${VERSION}/html" INSTALL='install -p' || exit 1
mkdir ${PKG}/etc/xml
mkdir -p ${PKG}/etc/sgml/docbook
mkdir -p ${PKG}/usr/share/sgml/docbook
# Touch SGML catalog
touch ${PKG}/etc/sgml/catalog
# Create an empty XML catalog.
XMLCATALOG=${PKG}/etc/xml/catalog
/usr/bin/xmlcatalog --noout --create ${XMLCATALOG} || exit 1

for type in system uri ; do
  for path in 2001 ${XMLXSDVER} ; do
    /usr/bin/xmlcatalog --noout --add ${type} \
    "http://www.w3.org/${path}/xml.xsd" \
    "file:///usr/share/xml/xml.xsd" ${XMLCATALOG} || exit 1
  done
done

# Now put the common DocBook entries in it
/usr/bin/xmlcatalog --noout --add "delegatePublic" \
  "-//OASIS//ENTITIES DocBook XML" \
  "file:///etc/sgml/docbook/xmlcatalog" ${XMLCATALOG} || exit 1
/usr/bin/xmlcatalog --noout --add "delegatePublic" \
  "-//OASIS//DTD DocBook XML" \
  "file:///etc/sgml/docbook/xmlcatalog" ${XMLCATALOG} || exit 1
/usr/bin/xmlcatalog --noout --add "delegatePublic" \
  "ISO 8879:1986" \
  "file:///etc/sgml/docbook/xmlcatalog" ${XMLCATALOG} || exit 1
/usr/bin/xmlcatalog --noout --add "delegateSystem" \
  "http://www.oasis-open.org/docbook/" \
  "file:///etc/sgml/docbook/xmlcatalog" ${XMLCATALOG} || exit 1
/usr/bin/xmlcatalog --noout --add "delegateURI" \
  "http://www.oasis-open.org/docbook/" \
  "file:///etc/sgml/docbook/xmlcatalog" ${XMLCATALOG} || exit 1
# Also create the common DocBook catalog
/usr/bin/xmlcatalog --noout --create \
  ${PKG}/etc/sgml/docbook/xmlcatalog || exit 1
ln -sf ../../../../etc/sgml/docbook/xmlcatalog \
  ${PKG}/usr/share/sgml/docbook/xmlcatalog || exit 1

rm -f ${PKG}/usr/share/sgml/xml.dcl
for file in ${USRCARCHIVES} ;do
  install -pm0644 ${DOWNDIR}/${file} ${PKG}/usr/share/sgml/${file} || exit 1
done
rm -rf ${PKG}/usr/share/xml/*
install -p -m0644 ${DOWNDIR}/${XSDSRCARCHIVE} ${PKG}/usr/share/xml || exit 1

mv ${PKG}/etc/sgml/sgml.conf ${PKG}/etc/sgml/sgml.conf.new || exit 1
mv ${PKG}/etc/sgml/catalog ${PKG}/etc/sgml/catalog.new || exit 1
mv ${PKG}/etc/sgml/docbook/xmlcatalog ${PKG}/etc/sgml/docbook/xmlcatalog.new || exit 1
mv ${PKG}/etc/xml/catalog ${PKG}/etc/xml/catalog.new || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS NEWS ChangeLog README ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

mkdir -p ${PKG}/var/log/setup
cat > ${PKG}/var/log/setup/setup.10.${NAME} <<'EOF'
#!/bin/sh
#BLURB="Updates stylesheets catalog with sgml-common"
EOF

for file in ${PKG}/install/doinst.sh ${PKG}/var/log/setup/setup.10.${NAME} ;do
cat >> ${file} <<'EOF'
if [ -d etc/xml ] && [ -x usr/bin/xmlcatalog ] ;then
  catcmd='chroot . /usr/bin/xmlcatalog --noout'

  for type in system uri ; do
    for path in 2001 _XMLXSDVER_ ; do
      ${catcmd} --add ${type} \
        "http://www.w3.org/${path}/xml.xsd" \
        "file:///usr/share/xml/xml.xsd" \
        /etc/xml/catalog
    done
  done
fi
EOF
sed -i -e "s|_XMLXSDVER_|${XMLXSDVER}|g" ${file}
done

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${FEDORADIST} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${CWD}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
