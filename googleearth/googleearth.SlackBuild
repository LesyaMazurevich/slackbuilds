#!/bin/sh
#-- googleearth for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ googleearth.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://earth.google.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=google-earth
NAME=googleearth
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-7.1.2.2041}
# x86 or x86_64
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  PARCH=${ARCH}
else
  ARCH=x86
  PARCH=i386
fi
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Do not fill bugs if using switches from here, they are experimental.

# Set to YES to use system libs (if some of them is not installed, googleearth will cry on start :) ) 
# curl
SB_CURL=${SB_CURL:-YES}
# mesa
SB_MESA=${SB_MESA:-YES}
# Set to YES to use system nspr/nss
SB_NSS=${SB_NSS:-YES}
# qt
SB_QT=${SB_QT:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${PNAME}-stable_current_${PARCH}.rpm

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://dl.google.com/dl/earth/client/current/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

RVER="$(rpm -qp --qf %{version} ${CWD}/${SRCARCHIVE} 2> /dev/null)"
if [ "${RVER}" != "${VERSION}" ] ;then
  echo "Version mismatch"
  echo "You have ${RVER} in ${CWD}/${SRCARCHIVE} instead ${VERSION} "
  echo "Edit VERSION variable and try again"
  exit 1
fi

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  LDR="/lib${LIBDIRSUFFIX}/ld-linux-x86-64.so.2"
else
  LIBDIRSUFFIX=""
  LDR="/lib/ld-linux.so.2"
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir ${SRCDIR}
cd ${SRCDIR} || exit 1
rpm2cpio ${CWD}/${SRCARCHIVE} | cpio -imdv --no-absolute-filenames || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

rm -f opt/google/earth/free/{${PNAME},${NAME}}
rm -f opt/google/earth/free/xdg-{mime,settings}
mv opt/google/earth/free/{${PNAME},${NAME}}.desktop || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}
mv opt/google/earth/free/* ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit 1

# From Gentoo ebuild, by Nathan Phillip Brink
patchelf --set-interpreter ${LDR} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/googleearth-bin || exit 1
patchelf --set-interpreter ${LDR} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/gpsbabel | exit 1

rm -rf ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/libnss_mdns4_minimal.so.2
[ "${SB_CURL}" = "YES" ] && rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/libcurl.so.4
[ "${SB_MESA}" = "YES" ] && rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/libGLU.so.1
[ "${SB_QT}" = "YES" ] && rm -rf ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/{libQt*.so.*,qt.conf,plugins}

if [ "${SB_NSS}" = "YES" ] ; then
  for file in \
    libnspr4.so libnspr4.so libplc4.so libplds4.so \
    libnss3.so libnssckbi.so libnssdbm3.so libnssutil3.so \
    libfreebl3.so libsoftokn3.so libssl3.so libsmime3.so libnsssysinit.so
  do
    rm -fv ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/${file}
  done
fi

mkdir -p ${PKG}/usr/bin
install -pm0755 ${CWD}/${NAME}.sh \
  ${PKG}/usr/bin/${NAME} || exit 1
chmod 0755 ${PKG}/usr/bin/${NAME} || exit 1

desktop-file-install --delete-original \
  --dir ${PKG}/usr/share/applications \
  --remove-key="Encoding" \
  --remove-key="MultipleArgs" \
  --remove-category="Application" \
  --add-category="Qt" \
  --set-key="Exec" \
  --set-value="${NAME} %f" \
  --set-icon="${NAME}" \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/${NAME}.desktop || exit 1

mkdir -p ${PKG}/usr/share/mime/packages
cat > ${PKG}/usr/share/mime/packages/${NAME}-mimetypes.xml <<'EOF'
<?xml version="1.0"?>
<mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'>
  <mime-type type="application/vnd.google-earth.kml+xml">
    <comment>Keyhole Markup Language data</comment>
    <glob pattern="*.kml"/>
  </mime-type>

  <mime-type type="application/vnd.google-earth.kmz">
    <comment>Keyhole Markup Language archive</comment>
    <glob pattern="*.kmz"/>
  </mime-type>

  <mime-type type="application/keyhole">
    <comment>Keyhole Markup Language data</comment>
  </mime-type>

  <mime-type type="application/earthviewer">
    <comment>Keyhole Markup Language data</comment>
  </mime-type>
</mime-info>
EOF

for res in 16 22 24 32 48 64 128 256 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  mv ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/product_logo_${res}.png \
    ${dir}/${NAME}.png || exit 1
done
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/*.xpm

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  EULA-*.html README.linux ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
if [ -x usr/bin/update-mime-database ]; then
  \${CHROOT} /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${NAME}.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
