#!/bin/sh
#-- NX for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ NX.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008, 2009, 2010, 2011 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.nomachine.com

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=nxclient
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.5.0-7}
SVER=$( echo ${VERSION} | cut -d - -f1)
# x86 or x86_64
ARCH=${ARCH:-x86}
if [ "${ARCH}" = "x86_64" ] ;then
  PARCH=${ARCH}
else
  ARCH=x86
  PARCH=i386
fi
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.${PARCH}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://64.34.173.142/download/${SVER}/Linux/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}

( cd ${PKG}/usr/lib${LIBDIRSUFFIX}
  tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
) || exit 1

#chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

mkdir -p ${PKG}/usr/bin
for file in ${NAME} nxesd nxkill nxprint nxservice ;do
cat > ${PKG}/usr/bin/${file} <<EOF
#!/bin/sh

NXCOMMAND=\$(basename \$0)
export NXDIR=/usr/lib${LIBDIRSUFFIX}/NX
export LD_LIBRARY_PATH=/usr/lib${LIBDIRSUFFIX}/NX/lib\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}
exec /usr/lib${LIBDIRSUFFIX}/NX/bin/\$NXCOMMAND \${1+"\$@"}
EOF
done
chmod 755 ${PKG}/usr/bin/nx*

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Comment=Client for connection to a remote NX server
Exec=${NAME}
Icon=${NAME}-icon
Name=NX Client for Linux
Type=Application
MimeType=application/nx-session
Categories=Network;X-nxclient;
EOF

cat > ${PKG}/usr/share/applications/${NAME}-admin.desktop <<EOF
[Desktop Entry]
Comment=Launch NX session Administrator
Exec=${NAME} -admin
Icon=${NAME}-admin
Name=NX Session Administrator
Type=Application
Categories=Network;X-nxclient;
EOF

cat > ${PKG}/usr/share/applications/${NAME}-wizard.desktop <<EOF
[Desktop Entry]
Comment=Launch connection wizard
Exec=${NAME} -wizard
Icon=${NAME}-wizard
Name=NX Connection Wizard
Type=Application
Categories=Network;X-nxclient;
EOF

mkdir -p ${PKG}/usr/share/mimelnk/application
cat > ${PKG}/usr/share/mimelnk/application/nx-session.desktop <<EOF
[Desktop Entry]
Comment=NX Client session
Hidden=false
Icon=${NAME}-desktop
MimeType=application/nx-session
Patterns=*.nxs
Type=MimeType
EOF

mkdir -p ${PKG}/etc/xdg/menus/applications-merged
install -pm0644 ${CWD}/${NAME}.menu \
  ${PKG}/etc/xdg/menus/applications-merged/${NAME}.menu || exit 1

mkdir -p ${PKG}/usr/share/desktop-directories
cat > ${PKG}/usr/share/desktop-directories/${NAME}.directory <<EOF
[Desktop Entry]
Type=Directory
Icon=${NAME}-icon
Name=NX Client for Linux
EOF

mkdir -p ${PKG}/usr/share/mime/application
zcat ${CWD}/nomachine.xml.gz \
  > ${PKG}/usr/share/mime/application/nomachine.xml || exit 1

for res in 16 22 32 48; do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}
  mkdir -p ${dir}/{apps,mimetypes}
  install -m0644 \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/NX/share/icons/${res}x${res}/${NAME}-{admin,icon,wizard}.png \
    ${dir}/apps/ || exit 1
  install -m0644 \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/NX/share/icons/${res}x${res}/${NAME}-desktop.png \
    ${dir}/mimetypes/ || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat << EOF > ${PKG}/install/doinst.sh
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
if [ -x usr/bin/update-mime-database ]; then
  \${CHROOT} /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}.menu ${CWD}/nomachine.xml.gz ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
