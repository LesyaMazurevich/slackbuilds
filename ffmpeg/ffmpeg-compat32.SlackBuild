#!/bin/sh
#-- ffmpeg-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ ffmpeg.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://ffmpeg.mplayerhq.hu/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

SNAPBUILD=${SNAPBUILD:-YES}

PNAME=ffmpeg
NAME=ffmpeg-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
else
  VERSION=${VERSION:-2.3}
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
RARCH=${RARCH:-${ARCH32}}
SLKTARGET32=${SLKTARGET32:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

# Set to YES to enable nonfree code (unredistributable binaries)
SB_NONFREE=${SB_NONFREE:-YES}
# Set to YES to enable pulseaudio support
SB_PA=${SB_PA:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
if [ "${SNAPBUILD}" = "YES" ] ;then
  SRCARCHIVE=${SRCDIR}.tar.xz
else
  SRCARCHIVE=${SRCDIR}.tar.bz2
fi

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.ffmpeg.org/releases/${SRCARCHIVE}"
SNAPUPDATE=${PNAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible, or in /tmp
if [ "${SNAPBUILD}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
else
  test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
SLKCFLAGS="${SLKCFLAGS} -fomit-frame-pointer"
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

unset CFLAGS CXXFLAGS CPPFLAGS

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# for some reason it tries to #include <X11/Xlib.h>, but doesn't use it
sed -i s:\#define\ HAVE_X11:\#define\ HAVE_LINUX: ffplay.c || exit 1
# To make sure the ffserver test will work
sed -i -e "s:-e debug=off::" tests/ffserver-regression.sh || exit 1

sed -i -e 's/opteron/opteron|athlon64-sse3|k8-sse3|opteron-sse3/g' configure || exit 1

unset SB_NONFREEOPTS SB_PAOPTS
[ "${SB_NONFREE}" = "YES" ] && SB_NONFREEOPTS="--enable-nonfree"
[ "${SB_PA}" = "YES" ] && SB_PAOPTS="--enable-libpulse"

./configure \
  --prefix=/usr \
  --incdir=/usr/include \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --shlibdir=/usr/lib${LIBDIRSUFFIX} \
  --mandir=/usr/man \
  --arch=${ARCH} \
  --cpu=${RARCH} \
  --extra-cflags="${SLKCFLAGS} $(pkg-config x264 --cflags)" \
  --enable-libopencore-amrnb \
  --enable-libopencore-amrwb \
  --enable-libaacplus \
  --enable-libass \
  --enable-libcdio \
  --enable-libcelt \
  --enable-libdc1394 \
  --enable-libmp3lame \
  --enable-libfaac \
  --enable-libfdk-aac \
  --enable-gnutls \
  --enable-libgsm \
  --enable-libmodplug \
  --enable-libnut \
  --enable-libopenjpeg \
  --enable-libopus \
  --enable-librtmp \
  --enable-libschroedinger \
  --enable-libspeex \
  --enable-libxvid \
  --enable-libtheora \
  --enable-libvo-aacenc \
  --enable-libvo-amrwbenc \
  --enable-libvorbis \
  --enable-libvpx \
  --enable-libwebp \
  --enable-libx265 \
  --enable-libx264 \
  --enable-vaapi \
  --enable-vdpau \
  --disable-encoder=vorbis \
  --enable-openal ${SB_PAOPTS} \
  --enable-libv4l2 \
  --enable-x11grab \
  --enable-avfilter \
  --enable-avresample \
  --enable-postproc \
  --enable-pthreads \
  --disable-static \
  --enable-shared \
  --enable-gpl --enable-version3 ${SB_NONFREEOPTS} \
  --disable-debug \
  --disable-optimizations \
  --disable-stripping \
  --extra-version="${SLKDIST}-${BUILD}${PACKAGER_ID}" \
  --disable-ffmpeg \
  --disable-ffplay \
  --disable-ffprobe \
  --disable-ffserver \
  --disable-doc \
  --cc="${CC}" || exit $?

make -j${NJOBS} V=1 || make V=1 || exit $?
make install DESTDIR=${PKG} V=1 || exit $?

rm -rf ${PKG}/usr/{bin,sbin,doc,include,libexec,man,info,share} ${PKG}/{etc,var}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
