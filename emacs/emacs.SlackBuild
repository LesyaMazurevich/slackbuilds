#!/bin/sh
#-- emacs for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ emacs.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.gnu.org/software/emacs/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=emacs
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-24.5}
RVER=${VERSION%[a-z]}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${RVER}
SRCARCHIVE=${NAME}-${VERSION}.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.sig

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${NAME}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

SB_ELDIR=${CWD}/el
site_lisp=/usr/share/emacs/site-lisp
site_start_d=${site_lisp}/site-start.d
bytecompargs='-batch --no-init-file --no-site-file -f batch-byte-compile'

info_files="ada-mode auth autotype bovine calc ccmode cl dbus dired-x ebrowse ede ediff edt eieio emacs-mime epa erc ert eshell eudc efaq eww flymake forms gnus emacs-gnutls htmlfontify idlwave ido info.info mairix-el message mh-e newsticker nxml-mode octave-mode org pcl-cvs pgg rcirc remember reftex sasl sc semantic ses sieve smtpmail speedbar srecode todo-mode tramp url vip viper widget wisent woman"

if test "$(perl -e 'while (<>) { if (/^INFO_COMMON/) { s/.*=//; while (s/\\$//) { s/\\//; $_ .= <>; }; s/\s+/ /g; s/^ //; s/ $//; print; exit; } }' doc/misc/Makefile.in)" != "${info_files}"; then
  echo Please update info_files >&2
  exit 1
fi

info_files="${info_files/info.info /g}"

cp ${SB_ELDIR}/{php-mode,ssl,rpm-spec-mode,po-mode}.el site-lisp/ || exit 1

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

grep -v "tetris.elc" lisp/Makefile.in > lisp/Makefile.in.new \
   && mv lisp/Makefile.in.new lisp/Makefile.in

export ac_cv_lib_gif_EGifPutExtensionLast=yes

SB_CONFIGURE(){
  CFLAGS="${SLKCFLAGS} -DMAIL_USE_LOCKF -fno-optimize-sibling-calls" \
  CXXFLAGS="${SLKCFLAGS}" \
  ../configure \
    --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --sysconfdir=/etc \
    --localstatedir=/var \
    --infodir=/usr/info \
    --mandir=/usr/man \
    --docdir=/usr/doc/${NAME}-${VERSION} \
    --disable-static \
    --enable-shared \
    --without-gconf \
    --without-gsettings \
    --build=${SLKTARGET}-${SLKDTARGET}-linux $@
}

mkdir build-gtk
( cd build-gtk

SB_CONFIGURE \
  --with-x \
  --with-dbus \
  --with-gif \
  --with-jpeg \
  --with-png \
  --with-rsvg \
  --with-tiff \
  --with-xft \
  --with-xpm \
  --with-x-toolkit=gtk3 || exit 1

make -j${NJOBS} || make || exit 1

rm -f src/emacs-${RVER}.*

TOPDIR=$(pwd)
${TOPDIR}/src/emacs ${bytecompargs} site-lisp/*.el

make -j${NJOBS} -C lisp updates || make C lisp updates || exit 1

make install DESTDIR=${PKG} || exit 1

) || exit $?

rm -f ${PKG}/usr/bin/emacs
mv ${PKG}/usr/bin/emacs-${RVER} ${PKG}/usr/bin/emacs-${RVER}-with-x11 || exit 
ln -sf emacs-${RVER}-with-x11 ${PKG}/usr/bin/emacs

gunzip ${PKG}/usr/share/emacs/${RVER}/lisp/jka-compr.el.gz
gunzip ${PKG}/usr/share/emacs/${RVER}/lisp/jka-cmpr-hook.el.gz

mkdir build-nox
( cd build-nox

SB_CONFIGURE --with-x=no || exit 1
make -j${NJOBS} || make || exit 1

# install the emacs without X
install -p -m 0755 src/emacs-${RVER}.1 ${PKG}/usr/bin/emacs-${RVER}-no-x11 || exit 1

) || exit $?

chmod 755 ${PKG}/usr/libexec/emacs/*/*/movemail

mkdir -p ${PKG}/${site_lisp}
install -p -m 0644 ${SB_ELDIR}/site-start.el \
  ${PKG}/${site_lisp}/site-start.el.new || exit 1
install -p -m 0644 ${SB_ELDIR}/default.el ${PKG}/${site_lisp}/default.el.new || exit 1

#this solves bz#474958, "update-directory-autoloads" now finally works
#the path is different each version, so we'll generate it here
echo "(setq source-directory \"/usr/share/emacs/${RVER}/\")" \
 >> ${PKG}/${site_lisp}/site-start.el

mv ${PKG}/usr/bin/ctags ${PKG}/usr/bin/ctags-emacs
mv ${PKG}/usr/man/man1/ctags.1 ${PKG}/usr/man/man1/ctags-emacs.1

# install site-lisp files
install -p -m 0644 site-lisp/*.el{,c} ${PKG}/${site_lisp}

mkdir -p ${PKG}/${site_lisp}/site-start.d
install -p -m 0644 ${SB_ELDIR}/{php-mode-init,rpm-spec-mode-init,focus-init,po-mode-init}.el \
  ${PKG}/${site_lisp}/site-start.d/ || exit 1

# default initialization file
mkdir -p ${PKG}/etc/skel
install -p -m 0644 ${SB_ELDIR}/dotemacs.el ${PKG}/etc/skel/.emacs.new || exit 1

chmod 755 ${PKG}/var/games/emacs
rm -f ${PKG}/var/games/emacs/*

rm -f ${PKG}/usr/man/man1/ctags.1*
rm -f ${PKG}/usr/share/emacs/site-lisp/po-mode.el

rm -f ${PKG}/usr/info/info.info*

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# install pkgconfig file
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/emacs.pc << EOF
sitepkglispdir=${site_lisp}
sitestartdir=${site_start_d}

Name: emacs
Description: GNU Emacs text editor
Version: ${RVER}
EOF

# install rpm macro definition file
mkdir -p ${PKG}/usr/lib/rpm/macros.d
cat > ${PKG}/usr/lib/rpm/macros.d/macros.emacs << EOF
%_emacs_version ${RVER}
%_emacs_ev ${RVER}
%_emacs_evr ${VERSION}-${BUILD}
%_emacs_sitelispdir ${site_lisp}
%_emacs_sitestartdir ${site_start_d}
%_emacs_bytecompile /usr/bin/emacs ${bytecompargs}
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING* README ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  for file in ${info_files}; do
    \${CHROOT} /usr/bin/install-info --info-dir=/usr/info /usr/info/\${file}.info.gz 2>/dev/null 
  done
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find usr/share/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

( cd ${PKG}
  find var/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
  echo '# Fix permissions' >> ${PKG}/install/doinst.sh
  echo "\${CHROOT} /bin/chmod 1755 /usr/bin/emacs-${RVER}-no-x11" >> ${PKG}/install/doinst.sh
  echo '${CHROOT} /bin/chown root.games /var/games/emacs' >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{el,patches}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/el/*.el \
                 ${SBDIR}/el/
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
 rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 1755 ./usr/bin/emacs-${RVER}-no-x11 ;
  /bin/chown root.games ./var/games/emacs ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
