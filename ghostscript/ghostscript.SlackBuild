#!/bin/sh
#-- ghostscript for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ ghostscript.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.ghostscript.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=ghostscript
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-9.16}
SVER=$(echo ${VERSION} | cut -d . -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://downloads.ghostscript.com/public/${SRCARCHIVE}"
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URLB="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .
rm -rf cups/libs expat jbig2dec jasper jpeg lcms lcms2 libpng openjpeg tiff zlib

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

find . -name '*.orig' -delete

rm -f man/{de/,}pdfopt.1

# Convert manual pages to UTF-8
from8859_1() {
  iconv -f iso-8859-1 -t utf-8 < "$1" > "${1}_"
  mv "${1}_" "$1"
}
for i in man/de/*.1; do from8859_1 "$i"; done

sed -i -e '/\$srcdir\/configure/d;/Now type/d' autogen.sh ijs/autogen.sh || exit 1

sed -i \
  -e "s|/usr/X11R6/lib|/usr/lib${LIBDIRSUFFIX}|g" \
  configure.ac base/*.mak  || exit 1
sed -i -e 's|/usr/X11R6|/usr|g' \
  base/*.mak lib/unix-lpr.sh || exit 1

sed -i \
  -e 's|AM_PROG_CC_STDC|AC_PROG_CC|g' \
  -e 's|AM_CONFIG_HEADER|AC_CONFIG_HEADERS|g' \
  ijs/configure.ac || exit 1

( cd ijs || exit 1
  rm -f ltmain.sh
  sh ./autogen.sh || exit 1
) || exit 1

if /bin/false ;then
( cd jbig2dec || exit 1
  autoreconf -ivf || exit 1
) || exit 1
fi

sh ./autogen.sh || exit 1

export CFLAGS="${SLKCFLAGS} -fno-strict-aliasing"

SB_CONFIGURE() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux $@
}

SB_CONFIGURE \
  --enable-fontconfig \
  --with-fontpath="/usr/share/fonts/TTF:/usr/share/fonts/Type1:/usr/share/${NAME}/conf.d:/etc/${NAME}:/etc/${NAME}/${SVER}" \
  --with-drivers=ALL \
  --with-ijs \
  --disable-compile-inits \
  --enable-dynamic \
  --with-jbig2dec \
  --with-libpaper \
  --without-luratech \
  --with-system-libtiff \
  || exit 1

# Build IJS
( cd ijs
  automake --add-missing --copy || exit $?
  SB_CONFIGURE \
    --enable-shared \
    --enable-static || exit 1

  make -j${NJOBS} || make || exit $?
) || exit 1

make -j${NJOBS} so prefix=/usr || make so prefix=/usr || exit $?
make -j${NJOBS} prefix=/usr || make prefix=/usr || exit $?

make -j${NJOBS} cups || make cups || exit $?

mkdir -p ${PKG}/usr/bin ${PKG}/usr/man ${PKG}/usr/share ${DOCDIR}
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX} ${PKG}/usr/include/ijs

make install soinstall DESTDIR=${PKG} || exit 1

mv -f ${PKG}/usr/bin/gsc ${PKG}/usr/bin/gs

( cd ijs
  make install DESTDIR=${PKG} || exit 1
) || exit 1

rm -f ${PKG}/usr/lib*/*.la

# Rename an original cidfmap to cidfmap.GS
if [ -r ${PKG}/usr/share/ghostscript/${SVER}/Resource/Init/cidfmap ]; then
  mv ${PKG}/usr/share/ghostscript/${SVER}/Resource/Init/cidfmap \
     ${PKG}/usr/share/ghostscript/${SVER}/Resource/Init/cidfmap.GS
  install -pm0644 ${CWD}/cidfmap \
    ${PKG}/usr/share/ghostscript/${SVER}/Resource/Init/cidfmap.new || exit 1
  zcat ${CWD}/CIDFnmap.gz \
    > ${PKG}/usr/share/ghostscript/${SVER}/Resource/Init/CIDFnmap || exit 1
fi

for file in gs_init.ps Fontmap Fontmap.GS ;do
  mv ${PKG}/usr/share/ghostscript/${SVER}/Resource/Init/${file} \
    ${PKG}/usr/share/ghostscript/${SVER}/Resource/Init/${file}.new || exit 1
done

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

echo ".so man1/gs.1" > ${PKG}/usr/man/man1/ghostscript.1
ln -sf gs ${PKG}/usr/bin/ghostscript

# Don't ship ijs example client or server
rm -f ${PKG}/usr/bin/ijs_{client,server}_example

# cups-filters
rm -f ${PKG}/usr/lib/cups/filter/{gstopxl,gstoraster}
rmdir -p ${PKG}/usr/lib/cups/filter

# Don't ship URW fonts; we already have them (ghostscript-fonts-std or urw-fonts-type1).
rm -rf ${PKG}/usr/share/ghostscript/${SVER}/Resource/Font

mkdir -p ${PKG}/usr/share/${NAME}/conf.d
mkdir -p ${PKG}/etc/ghostscript/${SVER}
touch ${PKG}/etc/ghostscript/${SVER}/Fontmap.local.new
touch ${PKG}/etc/ghostscript/${SVER}/cidfmap.local.new
touch ${PKG}/etc/ghostscript/${SVER}/CIDFnmap.local.new

# The man/de/man1 symlinks are broken (bug #66238).
find ${PKG}/usr/man/de/man1 -type l | xargs rm -f

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  doc/COPYING LICENSE doc/README ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
ln -sf ../../share/ghostscript/${SVER}/doc ${DOCDIR}/doc
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find usr/share/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find ./ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/cidfmap ${CWD}/CIDFnmap.gz \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
