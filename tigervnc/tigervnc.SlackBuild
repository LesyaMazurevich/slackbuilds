#!/bin/sh
#-- tigervnc for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ tigervnc.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://tigervnc.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

SNAPBUILD=${SNAPBUILD:-NO}

NAME=tigervnc
PKG=${PKG:-${TMP}/package-${NAME}}

if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
else
  VERSION=${VERSION:-1.5.0}
fi
XVER=${XVER:-$(pkg-config xorg-server --modversion || /usr/libexec/Xorg -version 2>&1 | grep '^X.Org X Server' | awk '{print $4}')}
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-$(awk '{print $2}' /etc/slackware-version)}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
if [ -d "/usr/share/xorg-server-source" ] ;then
  XSRCDIR=/usr/share/xorg-server-source
  XSRCSDIR=YES
else
  XSRCDIR=xorg-server-${XVER}
  XSRCSDIR=NO
  XSRCARCHIVE=${XSRCDIR}.tar.bz2
fi
if [ "${SNAPBUILD}" = "YES" ] ;then
  SRCARCHIVE=${SRCDIR}.tar.xz
else
  SRCARCHIVE=v${VERSION}.tar.gz
fi

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="https://github.com/TigerVNC/${NAME}/archive/${SRCARCHIVE}"
XDL_URL="http://xorg.freedesktop.org/releases/individual/xserver/${XSRCARCHIVE}"
SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible, or in /tmp
if [ "${SNAPBUILD}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
else
  SRCARCHIVE=${SRCDIR}.tar.gz
  test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} -O ${CWD}/${SRCARCHIVE} || exit 1
fi
if [ "${XSRCSDIR}" != "YES" ] ;then
  test -r ${CWD}/${XSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${XDL_URL} || exit 1
fi

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "${CWD}/${SRCARCHIVE} is empty"
  echo "Delete ${CWD}/${SRCARCHIVE}, check VERSION and try again."
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
if [ "${XSRCSDIR}" != "YES" ] ;then
  tar -xvf ${CWD}/${XSRCARCHIVE} || exit 1
fi

chmod -R u+w,go+r-w,a-s .

mv unix/xserver/hw/vnc hw-vnc
rmdir unix/xserver/hw || exit 1
if [ "${XSRCSDIR}" = "YES" ] ;then
  cp -r ${XSRCDIR}/* unix/xserver/ || exit 1
else
  mv ${XSRCDIR}/* unix/xserver/ || exit 1
fi

mv hw-vnc unix/xserver/hw/vnc || exit 1

if [ -r ${CWD}/tapply-patches.sh ]; then
  . ${CWD}/tapply-patches.sh
fi

( cd unix/xserver || exit 1
  if [ "${XSRCSDIR}" != "YES" ] ;then
    if [ -r ${CWD}/apply-patches.sh ]; then
      . ${CWD}/apply-patches.sh
    fi
  fi
) || exit 1

export CFLAGS="${SLKCFLAGS} -fpic"
export CXXFLAGS="${CFLAGS} -fpermissive "
export FFLAGS="${CFLAGS}"

( cd unix/xserver && autoreconf -fiv ) || exit $?

cmake . \
  -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
  -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
  -DCMAKE_INSTALL_PREFIX:PATH=/usr \
  -DSYSCONF_INSTALL_DIR:PATH=/etc \
  -DINCLUDE_INSTALL_DIR:PATH=/usr/include \
  -DLIB_INSTALL_DIR:PATH=/usr/lib${LIBDIRSUFFIX} \
  -DLIB_SUFFIX=${LIBDIRSUFFIX} \
  -DSHARE_INSTALL_PREFIX:PATH=/usr/share \
  -DMAN_INSTALL_DIR:PATH=/usr/man \
  -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DCMAKE_SKIP_RPATH:BOOL=ON \
  -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
  -DENABLE_PAM:BOOL=OFF \
  || exit $?

  make -j${NJOBS} || make || exit $?
  make install DESTDIR=${PKG} || exit $?

( cd unix/xserver || exit 1
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --disable-static \
  --disable-xorg --disable-xnest --disable-xvfb --disable-dmx \
  --disable-xwin --disable-xephyr --disable-kdrive --with-pic \
  --disable-xwayland \
  --disable-xorgcfg --disable-xprint --disable-static \
  --disable-xtrap --enable-xcsecurity \
  --disable-xinerama \
  --without-dtrace \
  --disable-present \
  --disable-xevie \
  --with-default-font-path="/usr/share/fonts/TTF,/usr/share/fonts/OTF,/usr/share/fonts/Type1,/usr/share/fonts/misc,/usr/share/fonts/75dpi/:unscaled" \
  --with-module-dir=/usr/lib${LIBDIRSUFFIX}/xorg/modules \
  --with-dri-driver-path=/usr/lib${LIBDIRSUFFIX}/xorg/modules/dri \
  --with-rgb-path=/usr/share/X11/rgb \
  --with-os-vendor="${SLKDIST} Linux Project" \
  --with-builderstring="Build ID: ${NAME} ${VERSION}-${BUILD}" \
  --with-xkb-path=/etc/X11/xkb \
  --with-xkb-output=/var/lib/xkb \
  --enable-glx-tls \
  --disable-dri \
  --enable-dri2 \
  --enable-dri3 \
  --disable-config-dbus \
  --disable-config-hal \
  --disable-config-udev \
  --disable-silent-rules \
  --disable-unit-tests \
  --disable-docs \
  --disable-devel-docs \
  --without-doxygen \
  --without-xmlto \
  --disable-selective-werror \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

    make -j${NJOBS} || make || exit 1
    cd hw/vnc || exit 1
    make install DESTDIR=${PKG} || exit 1
) || exit 1

( cd java || exit 1
  cmake . || exit $?
  make || exit $?
) || exit $?

mkdir -p ${PKG}/usr/share/vnc/classes
install -m755 java/VncViewer.jar ${PKG}/usr/share/vnc/classes/ || exit 1
install -m644 java/com/tigervnc/vncviewer/index.vnc \
  ${PKG}/usr/share/vnc/classes/ || exit 1

mkdir -p ${PKG}/etc/rc.d
install -pm0755 ${CWD}/rc.vncserver \
  ${PKG}/etc/rc.d/rc.vncserver.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rcvncserver.gz \
  > ${PKG}/var/log/setup/setup.onlyonce.rcvncserver || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rcvncserver || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/vncserver.new << 'EOF'
# The VNCSERVERS variable is a list of display:user pairs.
#
# Uncomment the lines below to start a VNC server on display :2
# as my 'myusername' (adjust this to your own).  You will also
# need to set a VNC password; run 'man vncpasswd' to see how
# to do that.  
#
# DO NOT RUN THIS SERVICE if your local area network is
# untrusted!  For a secure way of using VNC, see
# http://kbase.redhat.com/faq/docs/DOC-7028

# Use "-nolisten tcp" to prevent X connections to your VNC server via TCP.

# Use "-localhost" to prevent remote VNC clients connecting except when
# doing so through a secure tunnel.  See the "-via" option in the
# `man vncviewer' manual page.

# VNCSERVERS="2:myusername"
# VNCSERVERARGS[2]="-geometry 800x600 -nolisten tcp -localhost"
EOF

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions/libvnc.la

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/vncserver.service \
  ${PKG}/lib/systemd/system/vncserver@.service || exit 1

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/vncviewer.desktop <<EOF
[Desktop Entry]
Name=VNC Viewer
Comment=Connect to VNC server and display remote desktop
Exec=/usr/bin/vncviewer
Icon=tigervnc
Terminal=false
Type=Application
Categories=Network;RemoteAccess;
StartupWMClass=VNC Viewer: Connection Details
EOF

for res in 16 20 22 24 32 36 48 64 72 96 128 192 256 512 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  rsvg-convert media/${NAME}.svg -h ${res} -w ${res} \
    -o ${dir}/${NAME}.png || exit 1
done

mkdir -p ${PKG}/usr/share/icons/hicolor/scalable/apps
install -pm0644 media/${NAME}.svg ${PKG}/usr/share/icons/hicolor/scalable/apps/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
if [ -d ${PKG}/usr/share/doc ] ;then
  mv ${PKG}/usr/share/doc/*/* ${DOCDIR}/
  rm -rf ${PKG}/usr/share/doc
  rmdir -p ${PKG}/usr/share
fi
cp -a \
  LICENCE.TXT README.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.vncserver.new:
if [ -r etc/rc.d/rc.vncserver -a -r etc/rc.d/rc.vncserver.new ]; then
  chmod --reference=etc/rc.d/rc.vncserver etc/rc.d/rc.vncserver.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,tpatches}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/${SNAPUPDATE} ${CWD}/*apply-patches.sh ${CWD}/*.service \
    ${CWD}/rc.vncserver ${CWD}/setup.onlyonce.rc*.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/tpatches/*.* \
    ${SBDIR}/tpatches/
  rmdir ${SBDIR}/patches ${SBDIR}/tpatches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
