#!/bin/sh
#-- qtcurve for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ qtcurve.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# https://projects.kde.org/projects/playground/base/qtcurve

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=qtcurve
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.8.18}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/kde/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to build with gtk+2
SB_GTK2=${SB_GTK2:-YES}
# Set to YES to build with KDE4
SB_KDE4=${SB_KDE4:-YES}
# Set to YES to build with Qt4 (defaut if all is NO)
SB_QT4=${SB_QT4:-YES}
# Set to YES to build with Qt5
SB_QT5=${SB_QT5:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${VERSION}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="https://github.com/QtCurve/qtcurve/archive/${SRCARCHIVE}"

SRCARCHIVE=${SRCDIR}.tar.gz
# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} --no-check-certificate ${DL_OPTS} ${DL_URL} -O ${CWD}/${SRCARCHIVE} || exit 1

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "${CWD}/${SRCARCHIVE} is empty"
  echo "Delete ${CWD}/${SRCARCHIVE}, check VERSION and try again."
  exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ "${SB_KDE4}" = "YES" ] ;then
# Set the config option variables if they are not already set:
[ -r ../KDE.options ] && source ../KDE.options
[ -r /etc/profile.d/kde4.sh ] && source /etc/profile.d/kde4.sh

_kde4_prefix=${_kde4_prefix:-/usr}
_kde4_sysconfdir=${_kde4_sysconfdir:-/etc}
_kde4_libdir=${_kde4_libdir:-/usr/lib${LIBDIRSUFFIX}}
_kde4_libexecdir=${_kde4_libexecdir:-/usr/libexec/kde4}
_kde4_datadir=${_kde4_datadir:-/usr/share}
_kde4_sharedir=${_kde4_sharedir:-/usr/share}
_kde4_iconsdir=${_kde4_iconsdir:-${_kde4_sharedir}/icons}
_kde4_configdir=${_kde4_configdir:-${_kde4_sharedir}/config}
_kde4_appsdir=${_kde4_appsdir:-${_kde4_sharedir}/kde4/apps}
_kde4_docdir=${_kde4_docdir:-${_kde4_prefix}/doc}
_kde4_bindir=${_kde4_bindir=:-${_kde4_prefix}/bin}
_kde4_sbindir=${_kde4_sbindir:-${_kde4_prefix}/sbin}
_kde4_includedir=${_kde4_includedir:-${_kde4_prefix}/include/kde4}
_kde4_buildtype=${_kde4_buildtype:-release}
_kde4_macros_api=${_kde4_macros_api:-2}
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
mkdir -p ${SRCDIR}/build
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

[ "${SB_GTK2}" != "YES" -a "${SB_KDE4}" != "YES" -a "${SB_QT4}" != "YES" -a "${SB_QT5}" != "YES" ] && SB_QT4=YES

unset SB_GTK2OPTS SB_KDE4OPTS SB_QT4OPTS SB_QT5OPTS
[ "${SB_GTK2}" = "YES" ] || SB_GTK2OPTS=OFF
[ "${SB_KDE4}" = "YES" ] || SB_KDE4OPTS=OFF
[ "${SB_QT4}" = "YES" ] || SB_QT4OPTS=OFF
[ "${SB_QT5}" = "YES" ] || SB_QT5OPTS=OFF

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
export FFLAGS="${SLKCFLAGS}"

SB_CONFIGURE() {
  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DMAN_INSTALL_DIR:PATH=/usr/man \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DCMAKE_SKIP_RPATH:BOOL=ON \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON $@

}

if [ "${SB_GTK2}" = "YES" -o "${SB_QT4}" = "YES" -o "${SB_QT5}" = "YES" ] ;then

  mkdir -p build
  ( cd build || exit 1
    SB_CONFIGURE \
      -DCMAKE_INSTALL_PREFIX:PATH=/usr \
      -DSYSCONF_INSTALL_DIR:PATH=/etc \
      -DINCLUDE_INSTALL_DIR:PATH=/usr/include \
      -DLIB_INSTALL_DIR:PATH=/usr/lib${LIBDIRSUFFIX} \
      -DSHARE_INSTALL_PREFIX:PATH=/usr/share \
      -DCMAKE_BUILD_TYPE=Release \
      -DBUILD_SHARED_LIBS:BOOL=ON \
      -DCMAKE_SKIP_RPATH:BOOL=ON \
      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
      -DQTC_QT4_ENABLE_KDE:BOOL=OFF \
      -DENABLE_GTK2:BOOL=${SB_GTK2OPTS:-ON} \
      -DENABLE_QT4:BOOL=${SB_QT4OPTS:-ON} \
      -DENABLE_QT5:BOOL=${SB_QT5OPTS:-ON} \
       || exit $?

    make -j${NJOBS} || make || exit $?
    make install/fast DESTDIR=${PKG} || exit $?
  ) || exit $?
fi

if [ "${SB_KDE4}" = "YES" ] ;then

  mkdir -p build-kde4
  ( cd build-kde4 || exit 1
    SB_CONFIGURE \
      -DCMAKE_INSTALL_PREFIX:PATH=${_kde4_prefix} \
      -DSYSCONF_INSTALL_DIR:PATH=${_kde4_sysconfdir} \
      -DINCLUDE_INSTALL_DIR:PATH=${_kde4_includedir} \
      -DLIB_INSTALL_DIR:PATH=${_kde4_libdir} \
      -DLIBEXEC_INSTALL_DIR:PATH=${_kde4_libexecdir} \
      -DDATA_INSTALL_DIR:PATH=${_kde4_appsdir} \
      -DCMAKE_BUILD_TYPE=${_kde4_buildtype} \
      -DENABLE_GTK2:BOOL=OFF \
      -DENABLE_QT4:BOOL=ON \
      -DENABLE_QT5:BOOL=OFF \
      || exit $?

    make -j${NJOBS} || make || exit $?
    ( cd qt4 && make install/fast DESTDIR=${PKG} ) || exit $?
    ( cd po && make install/fast DESTDIR=${PKG} ) || exit $?
    if [ "${SB_GTK2}" != "YES" -a "${SB_QT4}" != "YES" -a "${SB_QT5}" != "YES" ] ;then
      ( cd qtcurve-utils && make install/fast DESTDIR=${PKG} ) || exit $?
    fi
  ) || exit $?

fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS Bugs.md COPYING README.md TODO.md ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog.md ] && head -n 1000 ChangeLog.md > ${DOCDIR}/ChangeLog.md
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
