#!/bin/sh
#-- avidemux for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ avidemux.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.avidemux.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

SNAPBUILD=${SNAPBUILD:-NO}

NAME=avidemux
PKG=${PKG:-${TMP}/package-${NAME}}

if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
else
  VERSION=${VERSION:-2.6.10}
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable gtk port.
SB_GTK=${SB_GTK:-NO}
# Set to YES to enable qt4 port.
SB_QT=${SB_QT:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

if [ "${SNAPBUILD}" = "YES" ] ;then
  SRCDIR=${NAME}-${VERSION}
  SRCARCHIVE=${SRCDIR}.tar.xz
else
  SRCDIR=${NAME}_${VERSION//rc/}
  SRCARCHIVE=${NAME}_${VERSION}.tar.gz
fi

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_BERLIOS=${MIRROR_BERLIOS:-http://download.berlios.de}
DL_URL="${MIRROR_BERLIOS}/${NAME}/${SRCARCHIVE}"
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URLB="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"
SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible, or in /tmp
if [ "${SNAPBUILD}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
else
  test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../qt4.options ] && source ../qt4.options

_qt4_prefix=${_qt4_prefix:-/usr/lib${LIBDIRSUFFIX}/qt4}
_qt4_bindir=${_qt4_bindir:-${_qt4_prefix}/bin}
_qt4_qmake=${_qt4_qmake:-${_qt4_bindir}/qmake}

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# Remove sources of bundled libraries.
rm -rf avidemux_plugins/ADM_videoFilters6/ass/ADM_libass
rm -rf avidemux_plugins/ADM_audioEncoders/twolame/ADM_libtwolame
rm -rf avidemux_plugins/ADM_audioDecoders/ADM_ad_mad/ADM_libMad 
rm -rf avidemux_plugins/ADM_audioDecoders/ADM_ad_ac3/ADM_liba52 

sed -i -e '/Build Option/d' avidemux/common/ADM_commonUI/myOwnMenu.h || exit 1

if [ "${SB_GTK}" != "YES" ] ;then
  sed -i.nogtk -e 's|DO_GTK    1)|DO_GTK    0)|g' avidemux_plugins/CMakeLists.txt || exit 1
fi
if [ "${SB_QT}" != "YES" ] ;then
  sed -i.noqt -e 's|DO_QT4    1)|DO_QT4    0)|g' avidemux_plugins/CMakeLists.txt || exit 1
fi

export BINUTILS_LD=bfd

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS} -fpermissive"
export FFLAGS="${SLKCFLAGS}"
export LDFLAGS="${LDFLAGS} -Wl,--as-needed"

SB_CONFIGURE() {
  cmake \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_LIBDIR:PATH=/usr/lib${LIBDIRSUFFIX} \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DSYSCONF_INSTALL_DIR=/etc \
    -DMAN_INSTALL_DIR:PATH=/usr/man \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_VERBOSE_MAKEFILE=ON \
    -DARTS:BOOL=N \
    -DESD:BOOL=N \
    -DLIBVA=N \
    -DSPIDERMONKEY_INCLUDE_DIR=/usr/include/js \
    -DUSE_SYSTEM_SPIDERMONKEY:BOOL=TRUE \
    -D_X264_INCLUDE_DIR=/usr/include/x264 \
    -DX264_INCLUDE_DIR=/usr/include/x264 \
    -D_X265_INCLUDE_DIR=/usr/include/x265 \
    -DX265_INCLUDE_DIR=/usr/include/x265 \
    $@
}

mkdir -p build_core
( cd build_core || exit 1

  SB_CONFIGURE ../avidemux_core || exit $?

  make -j${NJOBS} -k || make || exit $?
  make install DESTDIR=${PKG} || exit $?

) || exit $?

# Build cli interface
mkdir -p build_cli
( cd build_cli || exit 1
  SB_CONFIGURE \
    -DFAKEROOT:PATH=${PKG} \
    ../avidemux/cli || exit $?
    make -j${NJOBS} -k || make || exit $?
    make install DESTDIR=${PKG} || exit $?
) || exit $?


if [ "${SB_GTK}" = "YES" ] ;then
# Build GTK gui
  mkdir -p build_gtk
  ( cd build_gtk || exit 1
    SB_CONFIGURE \
      -DFAKEROOT:PATH=${PKG} \
      ../avidemux/gtk
    make -j${NJOBS} -k || make || exit $?
    make install DESTDIR=${PKG} || exit $?
  ) || exit $?
fi

if [ "${SB_QT}" = "YES" ] ;then
  # Build QT4 gui
  mkdir -p build_qt4
  ( cd build_qt4 || exit 1
    SB_CONFIGURE \
      -DFAKEROOT:PATH=${PKG} \
      ../avidemux/qt4
    make -j${NJOBS} -k || make || exit $?
    make install DESTDIR=${PKG} || exit $?
  ) || exit $?
fi

# Build avidemux_plugins
mkdir -p build_plugins
  ( cd build_plugins || exit 1
    SB_CONFIGURE \
      -DFAKEROOT:PATH=${PKG} \
      -DAVIDEMUX_SOURCE_DIR:PATH=${SB_SROOT} \
      -DPLUGIN_UI:STRING=ALL \
      -DUSE_EXTERNAL_LIBASS:BOOL=TRUE \
      -DUSE_EXTERNAL_LIBMAD:BOOL=TRUE \
      -DUSE_EXTERNAL_LIBA52:BOOL=TRUE \
      -DUSE_EXTERNAL_TWOLAME:BOOL=TRUE \
       ../avidemux_plugins || exit $?
    make -j${NJOBS} -k || make || exit $?
    make install DESTDIR=${PKG} || exit $?
) || exit $?

find ${PKG} -name '*.so*' -exec chmod 0755 {} ';'
find ${PKG} -type f -name "*.la" -exec rm -f {} ';'

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

rm -f ${PKG}/usr/share/i18n/qt_*.qm
rm -f ${PKG}/usr/share/i18n/avidemux_sr@latin.qm

mkdir -p ${PKG}/usr/share/applications
rm -f ${PKG}/usr/share/applications/*
SB_DESKTOP () {
cat > ${PKG}/usr/share/applications/${NAME}_${1}.desktop <<EOF
[Desktop Entry]
Name=Avidemux Video Editor ($2)
Comment=Graphical video editing tool
Icon=${NAME}
Exec=${NAME}3_$1
Terminal=false
Type=Application
Categories=$2;AudioVideo;
MimeType=video/mpeg;video/quicktime;video/x-msvideo;video/x-anim;audio/x-mp3;audio/x-mp2;application/x-shockwave-flash;video/x-flv;
EOF
}

[ "${SB_GTK}" = "YES" ] && SB_DESKTOP gtk GTK
[ "${SB_QT}" = "YES" ] && SB_DESKTOP qt4 Qt

mkdir -p ${PKG}/usr/share/icons/hicolor/64x64/apps
install -m 0644 ${NAME}_icon.png \
                ${PKG}/usr/share/icons/hicolor/64x64/apps/${NAME}.png
for res in 16 20 22 24 32 36 48 ; do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  convert ${NAME}_icon.png -depth 8 -filter Lanczos \
          -resize ${res}x${res} ${dir}/${NAME}.png
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING ChangeLog README NEWS THANKS TODO History \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${SNAPUPDATE} ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
