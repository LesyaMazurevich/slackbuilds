#!/bin/sh
#-- cdrkit for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ cdrkit.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2013 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://cdrkit.org
# http://alioth.debian.org/projects/debburn

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=cdrkit
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.1.11}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-7}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

grep --quiet '^burning:' /etc/group && SB_HGROUP=1

# Set to YES to make cdrtools compat symlinks (disable parallel install with cdrtools).
SB_COMPAT=${SB_COMPAT:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SRCARCHIVEB=${SRCDIR//-/_}.orig.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
#DL_URL="http://debburn.alioth.debian.org/${SRCARCHIVE}"
DL_URL="http://cdrkit.org/releases/${SRCARCHIVE}"
MIRROR_DEB=${MIRROR_DEB:-ftp://ftp.debian.org}
DL_URLB="${MIRROR_DEB}/debian/pool/main/$(echo ${NAME} | sed -e 's/\(.\).*/\1/')/${NAME}/${SRCARCHIVEB}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}
if ! [ -r ${CWD}/${SRCARCHIVE} ] && [ -r ${CWD}/${SRCARCHIVEB} ] ;then
  SRCARCHIVE=${SRCARCHIVEB}
elif ! [ -r ${CWD}/${SRCARCHIVE} ] && ! [ -r ${CWD}/${SRCARCHIVEB} ] ;then
  SRCARCHIVE=${SRCARCHIVEB}
  ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

find . -type f -print0 | xargs -0 sed -i -e 's#/usr/local/bin/perl#/usr/bin/perl#g'

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

rm -rf libparanoia

sed -i -e '/^#include "iso9660.h"/a#include "checksum.h"' genisoimage/genisoimage.c || exit 1

find . -type f -print0 | xargs -0 sed -e 's#/usr/local/bin/perl#/usr/bin/perl#g' -i

mkdir -p build
( cd build || exit 1

  # Build
  CFLAGS="${SLKCFLAGS} -Wall -Werror -Wno-unused-function -Wno-unused-variable -Wno-unused-but-set-variable -Wno-array-bounds -fno-strict-aliasing" \
  CXXFLAGS="${SLKCFLAGS}" \
  FFLAGS="${SLKCFLAGS}" \
  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_INSTALL_PREFIX:PATH=/usr \
    -DLIB_INSTALL_DIR:PATH=/usr/lib${LIBDIRSUFFIX} \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DMANSUBDIR=man \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DCMAKE_VERBOSE_MAKEFILE=ON \
  || exit 1

  make -j${NJOBS} || make || exit 1
  make install DESTDIR=${PKG} || exit 1

) || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

sed -i -e 's#^require v5.8.1;##g' ${PKG}/usr/bin/dirsplit || exit 1

if [ "${SB_COMPAT}" = "YES" ] ; then
# Compatibility symlinks
( cd ${PKG}/usr/bin
  ln -sf wodim cdrecord
  ln -sf wodim dvdrecord
  ln -sf genisoimage mkisofs
  ln -sf genisoimage mkhybrid
  ln -sf icedax cdda2wav
  ln -sf readom readcd
  echo '.so wodim.1' > ${PKG}/usr/man/man1/cdrecord.1
  echo '.so genisoimage.1' > ${PKG}/usr/man/man1/mkisofs.1
  echo '.so icedax.1' > ${PKG}/usr/man/man1/cdda2wav.1
  echo '.so readom.1' > ${PKG}/usr/man/man1/readcd.1
) || exit 1
else
  for file in devdump isodebug isodump isoinfo isovfy ;do
    mv ${PKG}/usr/bin/${file} ${PKG}/usr/bin/${file}-${NAME} || exit 1
    mv ${PKG}/usr/man/man1/${file}.1 ${PKG}/usr/man/man1/${file}-${NAME}.1 || exit 1
  done
  rm -f ${PKG}/usr/bin/cdda2mp3
  mv ${PKG}/usr/bin/cdda2ogg ${PKG}/usr/bin/${NAME}-cdda2ogg
  ln -sf ${NAME}-cdda2ogg ${PKG}/usr/bin/${NAME}-cdda2mp3
  mv ${PKG}/usr/man/man1/cdda2ogg.1 ${PKG}/usr/man/man1/cdda2ogg-${NAME}.1
  echo ".so cdda2ogg-${NAME}.1" > ${PKG}/usr/man/man1/cdda2mp3-${NAME}.1
fi

mkdir -p ${PKG}/etc/default
install -m0644 wodim/wodim.dfl \
  ${PKG}/etc/default/wodim.dfl || exit 1

# Next big hole? ;)
rm -f ${PKG}/usr/sbin/netscsid
rmdir ${PKG}/usr/sbin
rm -f doc/READMEs/README.netscsid

mkdir -p ${DOCDIR}
cp -a \
  ABOUT COPYING FAQ FORK START TODO VERSION doc/* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
fi
rmdir ${PKG}/usr/share
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^burning:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            burning
fi

${CHROOT} /bin/chown root.burning /usr/bin/wodim
${CHROOT} /bin/chmod 4710 /usr/bin/wodim

EOF

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.burning ./usr/bin/wodim ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chmod 4710 ./usr/bin/wodim ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
