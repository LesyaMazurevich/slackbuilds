#!/bin/sh
#-- cdrtools for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ cdrtools.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://cdrecord.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=cdrtools
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.01a31}
RVER=${RVER:-$( echo ${VERSION} | cut -d a -f 1 )}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to make cdrtools compat symlinks (disable parallel install with cdrtools).
SB_COMPAT=${SB_COMPAT:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

grep --quiet '^burning:' /etc/group && SB_HGROUP=1

SRCDIR=${NAME}-${RVER}
SRCARCHIVE=${NAME}-${VERSION}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}/usr

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

sed -i \
  -e "s:/opt/schily:/usr:g" \
  -e "s:/usr/src/linux/include::g" \
  -e "s:static:dynamic:g" \
  DEFAULTS/Defaults.linux || exit 1

sed -i -e 's:opt/schily:usr:' \
  $(find ./ -type f -name \*.[0-9ch] -exec grep -l 'opt/schily' '{}' '+') \
  || exit 1
sed -i -e "s:\(^INSDIR=\t\t\)lib:\1/lib${LIBDIRSUFFIX}:" \
  $(find ./ -type f -exec grep -l '^INSDIR.\+lib\(/siconv\)\?$' '{}' '+') \
  || exit 1
sed -i -e 's:include\t\t.*rules.lib::' \
  $(find ./ -type f -exec grep -l '^include.\+rules\.lib' '{}' '+') \
  || exit 1
sed -i 's|^INSDIR=|INSDIR=bin|' rscsi/Makefile || exit 1

INS_BASE=/usr make -e -j${NJOBS} \
  COPTX="${SLKCFLAGS}" LDOPTX="${LDFLAGS}" LINKMODE="dynamic" RUNPATH="" \ 
  GMAKE_NOWARN="true" || exit $?
INS_BASE=/usr make -e \
  COPTX="${SLKCFLAGS}" LDOPTX="${LDFLAGS}" LINKMODE="dynamic" RUNPATH="" \ 
  GMAKE_NOWARN="true" || exit $?
INS_BASE=/usr make install -j${NJOBS} \
  COPTX="${SLKCFLAGS}" LDOPTX="${LDFLAGS}" LINKMODE="dynamic" RUNPATH="" \
  GMAKE_NOWARN="true" DESTDIR=${PKG} || exit $?

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

( cd ${PKG}/usr/bin ; ln -sf mkisofs mkhybrid )

ln -s schily ${PKG}/usr/include/scsilib
ln -s ../scg ${PKG}/usr/include/schily/scg

mkdir -p ${PKG}/usr/lib/modules-load.d
echo 'sg' > ${PKG}/usr/lib/modules-load.d/cdrecord.conf

if [ "${SB_COMPAT}" = "YES" ] ; then
# Compatibility symlinks
( cd ${PKG}/usr/bin
  ln -sf cdrecord wodim
  ln -sf mkisofs genisoimage
  ln -sf genisoimage mkhybrid
  ln -sf cdda2wav icedax
  ln -sf readcd readom
  echo '.so cdrecord.1' > ${PKG}/usr/man/man1/wodim.1
  echo '.so mkisofs.1' > ${PKG}/usr/man/man1/genisoimage.1
  echo '.so cdda2wav.1' > ${PKG}/usr/man/man1/icedax.1
  echo '.so readcd.1' > ${PKG}/usr/man/man1/readom.1
) || exit 1
fi
# Remove dupes:
rm -rf ${PKG}/usr/share/doc
rmdir ${PKG}/usr/share

# I don't know why this couldn't be "/etc/cdrtools" or something, but since
# getty uses it already I'm not going to argue the point.
rm -rf ${PKG}/usr/etc ${PKG}/etc
mkdir -p ${PKG}/etc/default
cat cdrecord/cdrecord.dfl > ${PKG}/etc/default/cdrecord.new
cat rscsi/rscsi.dfl > ${PKG}/etc/default/rscsi.new

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AN-* BUILD COMPILE COPYING README* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/

( cd mkisofs
  mkdir -p ${DOCDIR}/mkisofs
  cp -a COPYING ChangeLog README* TODO ${DOCDIR}/mkisofs/mkisofs
)

( cd cdda2wav
  mkdir -p ${DOCDIR}/cdda2wav
  cp -a FAQ Frontends HOWTOUSE NEEDED OtherProgs README THANKS TODO \
        Changelog ${DOCDIR}/cdda2wav
)
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Next big hole? ;)
rm -rf ${PKG}/usr/sbin
rm -f ${DOCDIR}/README.rscsi

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

rm -rf ${PKG}/usr/man/man5

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^burning:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
    -g $(free_group_id) \
    burning
fi

setcaps () {
  if ${CHROOT} /sbin/setcap "${1}" "${3}" 2>/dev/null; then
    ${CHROOT} /bin/chmod "${2}" "${3}"
  fi
}

${CHROOT} /bin/chown root.burning /usr/bin/cdrecord
${CHROOT} /bin/chmod 4710 /usr/bin/cdrecord

setcaps 'cap_sys_resource,cap_dac_override,cap_sys_admin,cap_sys_nice,cap_net_bind_service,cap_ipc_lock,cap_sys_rawio+ep' 'u-s' /usr/bin/cdrecord
setcaps 'cap_dac_override,cap_sys_admin,cap_sys_nice,cap_net_bind_service,cap_sys_rawio+ep' 'u-s' /usr/bin/cdda2wav
setcaps 'cap_dac_override,cap_sys_admin,cap_net_bind_service,cap_sys_rawio+ep' 'u-s' /usr/bin/readcd

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.burning ./usr/bin/cdrecord ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chmod 4710 ./usr/bin/cdrecord ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
