--- src/import/k9avidecode.cpp.ffmpeg	2015-09-20 13:25:06.354325950 -0300
+++ src/import/k9avidecode.cpp	2015-09-20 13:39:11.584618478 -0300
@@ -23,16 +23,6 @@ static int sws_flags = SWS_BICUBIC;
 
 #endif
 
-void av_free_packet_internal(AVPacket *pkt)
-{
-    if (pkt) {
-        if (pkt->destruct) pkt->destruct(pkt);
-        pkt->data = NULL; pkt->size = 0;
-    }
-}
-
-
-
 k9AviDecode::k9AviDecode(QObject *parent, const char *)
         : QObject(parent) {
     CodecHandle=0;
@@ -105,8 +95,6 @@ k9AviDecode::k9AviDecode(QObject *parent
 #endif
     av_free = (av_free_t)dlsym(CodecHandle,"av_free");
     av_free_packet = (av_free_packet_t)dlsym(CodecHandle,"av_free_packet");
-    if (av_free_packet==0)
-         av_free_packet=av_free_packet_internal;
     avcodec_close = (avcodec_close_t)dlsym(FormatHandle,"avcodec_close");
 #   if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(53, 17, 0)
     avformat_close_input = (avformat_close_input_t)dlsym(FormatHandle,"avformat_close_input");
@@ -238,14 +226,14 @@ bool k9AviDecode::open(const QString & _
 
     int numBytes;
 // Determine required buffer size and allocate buffer
-    numBytes=avpicture_get_size(PIX_FMT_RGB24, m_CodecCtx->width,
+    numBytes=avpicture_get_size(AV_PIX_FMT_RGB24, m_CodecCtx->width,
                                 m_CodecCtx->height);
     m_buffer=(uint8_t *)av_malloc(numBytes*sizeof(uint8_t));
 
 // Assign appropriate parts of buffer to image planes in pFrameRGB
 // Note that pFrameRGB is an AVFrame, but AVFrame is a superset
 // of AVPicture
-    avpicture_fill((AVPicture *)m_FrameRGB, m_buffer, PIX_FMT_RGB24,
+    avpicture_fill((AVPicture *)m_FrameRGB, m_buffer, AV_PIX_FMT_RGB24,
                    m_CodecCtx->width, m_CodecCtx->height);
 
  
@@ -317,13 +305,13 @@ void k9AviDecode::readFrame(double _seco
                     bFound=true;
 #ifndef HAVE_SWSCALE
                   // Convert the image from its native format to RGB
-                    img_convert((AVPicture *)m_FrameRGB, PIX_FMT_RGB24,
+                    img_convert((AVPicture *)m_FrameRGB, AV_PIX_FMT_RGB24,
                                 (AVPicture*)m_Frame, m_CodecCtx->pix_fmt,
                                 m_CodecCtx->width, m_CodecCtx->height);
                     SaveFrame(m_FrameRGB, m_CodecCtx->width,
                               m_CodecCtx->height);
 #else
-		    toRGB_convert_ctx=sws_getContext(m_CodecCtx->width, m_CodecCtx->height, m_CodecCtx->pix_fmt, m_CodecCtx->width, m_CodecCtx->height, PIX_FMT_RGB24, sws_flags,NULL,NULL,NULL);
+		    toRGB_convert_ctx=sws_getContext(m_CodecCtx->width, m_CodecCtx->height, m_CodecCtx->pix_fmt, m_CodecCtx->width, m_CodecCtx->height, AV_PIX_FMT_RGB24, sws_flags,NULL,NULL,NULL);
         		   sws_scale(toRGB_convert_ctx, m_Frame->data, m_Frame->linesize, 0, m_CodecCtx->height, m_FrameRGB->data,m_FrameRGB->linesize);
                     // convert frame to QImage
                     SaveFrame(m_FrameRGB, m_CodecCtx->width,
