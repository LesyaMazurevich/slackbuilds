#!/bin/sh
#-- vim for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ vim.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.vim.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=vim
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-7.4.778}
SYNUPVER=${SYNUPVER:-"$(LC_ALL=C date +%Y%m%d)"}
SVER="$( echo ${VERSION} | cut -d . -f1-2 )"
PATCHLEVEL="$( echo ${VERSION} | cut -d . -f3 )"
[ "${PATCHLEVEL}" = "" ] && PATCHLEVEL=0
OVERPATCHLEVEL=0
if [ "${PATCHLEVEL}" -ge 1000 ] ;then
  OVERPATCHLEVEL="${PATCHLEVEL}"
  PATCHLEVEL=999
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES if want syntax updates
SB_SYNUP=${SB_SYNUP:-YES}
# Set to YES to build with hunspell
SB_HUNSPELL=${SB_HUNSPELL:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

VIMDIR=${NAME}${SVER//.}
DOWNDIR=${CWD}/patches/updates
DOWNDIR2=${CWD}/extra

SRCDIR=${NAME}${SVER//.}
SRCARCHIVE=${NAME}-${SVER}.tar.bz2
VSRCARCHIVES1="netrwPlugin gzip"
VSRCARCHIVES2="tar zip netrwFileHandlers netrw netrwSettings"
VSRCARCHIVES3="filetype"

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_VIM=${MIRROR_VIM:-ftp://ftp.vim.org/pub}
DL_URL="${MIRROR_VIM}/${NAME}/unix/${SRCARCHIVE}"
PDL_URL="${MIRROR_VIM}/${NAME}/patches/${SVER}"
VDL_URL="ftp://ftp.vim.org/vol/2/${NAME}/runtime"

# if source is not present, download in source rootdir if possible, or in /tmp
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
if [ "${PATCHLEVEL}" -gt 0 ] ;then
mkdir -p ${DOWNDIR}
( cd ${DOWNDIR} || exit 1
   for i in $( seq -w ${PATCHLEVEL} ) $( seq 1000 ${OVERPATCHLEVEL} ) ; do
    file=${SVER}.${i}
    test -r ${file} || ${DL_PROG} ${DL_OPTS} ${PDL_URL}/${file} || exit 1
  done
) || exit $?
fi

# Disabled
if /bin/false ; then
mkdir -p ${DOWNDIR2}
( cd ${DOWNDIR2} || exit 1
  for file in ${VSRCARCHIVES1} ;do
    file=${file}.vim
    test -r ${file} || ${DL_PROG} ${DL_OPTS} ${VDL_URL}/plugin/${file} || exit 1
  done
  for file in ${VSRCARCHIVES2} ;do
    file=${file}.vim
    test -r ${file} || ${DL_PROG} ${DL_OPTS} ${VDL_URL}/autoload/${file} || exit 1
  done
  for file in ${VSRCARCHIVES3} ;do
    file=${file}.vim
    test -r ${file} || ${DL_PROG} ${DL_OPTS} ${VDL_URL}/${file} || exit 1
  done
) || exit $?
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi
find runtime -type f \( -name '*.orig' -o -name '*~' \) -exec rm -f {} ';'

# Disabled
if /bin/false ; then
zcat ${CWD}/forth.vim.gz > runtime/syntax/forth.vim || exit 1
for file in ${VSRCARCHIVES1} ${VSRCARCHIVES3} ;do
  install -m0644 ${DOWNDIR2}/${file}.vim runtime/plugin/ || exit 1
done
for file in ${VSRCARCHIVES2} ;do
  install -m0644 ${DOWNDIR2}/${file}.vim runtime/autoload/ || exit 1
done
fi

( cd src ; autoconf ) || exit 1

SB_CONFIGURE() {
CFLAGS="${SLKCFLAGS} -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64" \
CXXFLAGS="${SLKCFLAGS} -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --enable-fail-if-missing \
  --without-x --disable-gui \
  --with-compiledby="${PACKAGER}" \
  --build=${SLKTARGET}-${SLKDTARGET}-linux $@
}

SB_CONFIGURE \
  --enable-pythoninterp \
  --enable-perlinterp \
  --disable-tclinterp \
  --enable-multibyte \
  --enable-cscope \
  --with-features=huge || exit 1

make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

make clean

sed -i -e "s/help.txt/vi_help.txt/" src/os_unix.h src/ex_cmds.c || exit 1
sed -i -e "s/\/etc\/vimrc/\/etc\/virc/" src/os_unix.h || exit 1
SB_CONFIGURE \
  --disable-pythoninterp \
  --disable-perlinterp \
  --disable-tclinterp \
  --disable-gpm \
  --with-features=small || exit 1

make -j${NJOBS} || make || exit 1
install -m0755 src/vim ${PKG}/usr/bin/s${NAME} || exit 1

# Legacy binary links:
( cd ${PKG}/usr/bin
  rm -rf ex
  ln -sf vim ex
  rm -rf rview
  ln -sf vim rview
  rm -rf rvim
  ln -sf vim rvim
  rm -rf view
  ln -sf vim view
  rm -rf eview
  ln -sf vim eview
  rm -rf evim
  ln -sf vim evim
) || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/${NAME}/vimfiles/after
zcat ${CWD}/spec-template.gz \
  > ${PKG}/usr/share/${NAME}/vimfiles/template.spec || exit 1

# Those aren't Linux info files but some binary files for Amiga:
rm -f README*.info

mkdir -p ${PKG}/etc/profile.d
install -m0644 runtime/vimrc_example.vim ${PKG}/etc/vimrc.new || exit 1
cp ${PKG}/etc/vimrc.new ${PKG}/etc/virc.new || exit 1

mkdir -p ${PKG}/etc/profile.d
cat > ${PKG}/etc/profile.d/${NAME}.sh <<'EOF'
if [ -n "$BASH_VERSION" -o -n "$KSH_VERSION" -o -n "$ZSH_VERSION" ]; then
  [ -x /usr/bin/id ] || return
  [ `/usr/bin/id -u` -le 100 ] && return
  # for bash and zsh, only if no alias is already set
  alias vi >/dev/null 2>&1 || alias vi=vim
fi
EOF
cat > ${PKG}/etc/profile.d/${NAME}.csh <<'EOF'
[ -x /usr/bin/id ] || exit
[ `/usr/bin/id -u` -gt 100 ] && alias vi vim
EOF
chmod 0755 ${PKG}/etc/profile.d/${NAME}.*

# ja_JP.ujis is obsolete, ja_JP.eucJP is recommended.
( cd ${PKG}/usr/share/${NAME}/${VIMDIR}/lang || exit 1
  ln -sf menu_ja_jp.ujis.vim menu_ja_jp.eucjp.vim
)

( cd ${PKG}/usr/share/${NAME}/${VIMDIR}/tutor || exit 1
  mkdir conv
  iconv -f CP1252 -t UTF8 tutor.ca > conv/tutor.ca
  iconv -f CP1252 -t UTF8 tutor.it > conv/tutor.it
  #iconv -f CP1253 -t UTF8 tutor.gr > conv/tutor.gr
  iconv -f CP1252 -t UTF8 tutor.fr > conv/tutor.fr
  iconv -f CP1252 -t UTF8 tutor.es > conv/tutor.es
  iconv -f CP1252 -t UTF8 tutor.de > conv/tutor.de
  #iconv -f CP737 -t UTF8 tutor.gr.cp737 > conv/tutor.gr.cp737
  #iconv -f EUC-JP -t UTF8 tutor.ja.euc > conv/tutor.ja.euc
  #iconv -f SJIS -t UTF8 tutor.ja.sjis > conv/tutor.ja.sjis
  iconv -f UTF8 -t UTF8 tutor.ja.utf-8 > conv/tutor.ja.utf-8
  iconv -f UTF8 -t UTF8 tutor.ko.utf-8 > conv/tutor.ko.utf-8
  iconv -f CP1252 -t UTF8 tutor.no > conv/tutor.no
  iconv -f ISO-8859-2 -t UTF8 tutor.pl > conv/tutor.pl
  iconv -f ISO-8859-2 -t UTF8 tutor.sk > conv/tutor.sk
  iconv -f KOI8R -t UTF8 tutor.ru > conv/tutor.ru
  iconv -f CP1252 -t UTF8 tutor.sv > conv/tutor.sv
  mv -f tutor.ja.euc tutor.ja.sjis tutor.ko.euc tutor.pl.cp1250 tutor.zh.big5 tutor.ru.cp1251 tutor.zh.euc conv/
  rm -f tutor.ca tutor.de tutor.es tutor.fr tutor.gr tutor.it tutor.ja.utf-8 tutor.ko.utf-8 tutor.no tutor.pl tutor.sk tutor.ru tutor.sv
  mv -f conv/* .
  rmdir conv || exit 1
) || exit 1

( cd ${PKG}/usr/share/${NAME}/${VIMDIR}/doc || exit 1
  gzip -9 *.txt
  gzip -d help.txt.gz version7.txt.gz sponsor.txt.gz
  zcat ${CWD}/vi_help.txt.gz > vi_help.txt
  cat tags | sed -e 's/\t\(.*.txt\)\t/\t\1.gz\t/;s/\thelp.txt.gz\t/\thelp.txt\t/;s/\tversion7.txt.gz\t/\tversion7.txt\t/;s/\tsponsor.txt.gz\t/\tsponsor.txt\t/' > tags.new; mv -f tags.new tags
  cat >> tags << EOF
vi_help.txt	vi_help.txt	/*vi_help.txt*
vi-author.txt	vi_help.txt	/*vi-author*
vi-Bram.txt	vi_help.txt	/*vi-Bram*
vi-Moolenaar.txt	vi_help.txt	/*vi-Moolenaar*
vi-credits.txt	vi_help.txt	/*vi-credits*
EOF
) || exit 1

( cd ../runtime; rm -rf doc; ln -svf ../../vim/${VIMDIR}/doc docs;) 

rm -f ${PKG}/usr/share/${NAME}/${VIMDIR}/tutor/tutor.gr.utf-8~

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
cp runtime/doc/uganda.txt ${DOCDIR}/LICENSE
ln -s ../../share/vim/vim72/doc ${DOCDIR}/doc
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
sed -i -e "s,${PKG},," ${PKG}/usr/man/man1/vim.1 ${PKG}/usr/man/man1/vimtutor.1

rm -f ${PKG}/usr/man/man1/rvim.1

# Remove not UTF-8 manpages
for i in pl.ISO8859-2 it.ISO8859-1 ru.KOI8-R fr.ISO8859-1; do
  rm -rf ${PKG}/usr/man/${i}
done

# use common man1/ru directory
mv ${PKG}/usr/man/ru.UTF-8 ${PKG}/usr/man/ru

# Remove duplicate man pages
for i in fr.UTF-8 it.UTF-8 pl.UTF-8; do
  rm -rf ${PKG}/usr/man/${i}
done

echo ".so man1/vim.1" > ${PKG}/usr/man/man1/rvim.1

if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type f -maxdepth 1) ; do
          iconv -f latin1 -t UTF8 ${eachpage} > ${eachpage}.utf8
          mv -f ${eachpage}.utf8 ${eachpage}
        done
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# If there's no vi link, take over:
if [ ! -r usr/bin/vi ]; then
  ( cd usr/bin ; ln -sf vim vi )
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/forth.vim.gz ${CWD}/*-template.gz \
    ${CWD}/vi_help.txt.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
