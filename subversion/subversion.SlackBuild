#!/bin/bash
#-- subversion for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ subversion.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2014 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://subversion.apache.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=subversion
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.8.11}
SVER=$( echo ${VERSION} | cut -d. -f1-2 )
BOOKVER=1.7
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable java support
SB_JAVA=${SB_JAVA:-YES}
# Set to YES to enable perl support
SB_PERL=${SB_PERL:-YES}
# Set to YES to enable python support (needs swig)
SB_PYTHON=${SB_PYTHON:-YES}
# Set to YES to enable ruby support
SB_RUBY=${SB_RUBY:-YES}

# Set to YES to add tools docs (big)
SB_TOOLS=${SB_TOOLS:-NO}

PERLVENDORARCH=$(eval "$(perl -V:vendorarch)"; echo ${vendorarch})
PYSITEARCH=$(python -c 'from distutils import sysconfig; print sysconfig.get_python_lib(1)')
SWIG_DIRS="swig_pydir=${PYSITEARCH}/libsvn swig_pydir_extra=${PYSITEARCH}/svn"
RBVENDORARCH=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["vendorarchdir"]')

emacs_lispdir="$(pkg-config emacs --variable sitepkglispdir || echo /usr/share/emacs/site-lisp)"
emacs_startdir="$(pkg-config emacs --variable sitestartdir || echo /usr/share/emacs/site-lisp/site-start.d)"

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.asc
SRCARCHIVE2=svn-book-html.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_APACHE=${MIRROR_APACHE:-http://archive.apache.org/dist}
DL_URL="${MIRROR_APACHE}/${NAME}"
DL_URL2="http://svnbook.red-bean.com/en/${BOOKVER}/${SRCARCHIVE2}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

export JAVA_HOME=${JAVA_HOME:-"/usr/lib${LIBDIRSUFFIX}/java"}

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE2} || exit 1
mv svn-book-html book || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e '/zlib_prefix\/lib/d' build/ac-macros/zlib.m4 || exit 1

# Regenerate after patches to build.conf et al
./autogen.sh --release || exit 1

# fix shebang lines, #111498
sed -i -e 's|/usr/bin/env perl -w|/usr/bin/perl -w|' \
          tools/hook-scripts/*.pl.in || exit 1

# override weird -shrext from ruby
export svn_cv_ruby_link="/usr/bin/gcc -shared"
export svn_cv_ruby_sitedir_libsuffix=""
export svn_cv_ruby_sitedir_archsuffix=""

unset SB_JAVAOPTS SB_PYTHONOPTS
[ "${SB_JAVA}" = "YES" ] && SB_JAVAOPTS="--enable-javahl"
[ "${SB_PYTHON}" = "YES" ] && SB_PYTHONOPTS="--with-swig"

export CC=gcc CXX=g++ JAVA_HOME=${JAVA_HOME}
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --enable-shared \
  --disable-static \
  --with-apr=/usr \
  --with-apr-util=/usr \
  --with-apxs=/usr/bin/apxs \
  --with-libmagic=/usr \
  --with-neon=/usr \
  --with-pic \
  --with-ssl \
  --with-zlib=/usr \
  ${SB_PYTHONOPTS} --with-ruby-sitedir=${RBVENDORARCH} \
  ${SB_JAVAOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} all || exit 1

if [ "${SB_PYTHON}" = "YES" ] ;then
  make swig-py swig-py-lib ${SWIG_DIRS} || exit 1
  make swig-pl swig-pl-lib || exit 1
fi
if [ "${SB_RUBY}" = "YES" ] ;then
  make swig-rb swig-rb-lib | exit 1
fi
if [ "${SB_JAVA}" = "YES" ] ;then
  # javahl-javah does not parallel-make with javahl
  make javahl || exit 1
fi

make install DESTDIR=${PKG} || exit 1

if [ "${SB_PYTHON}" = "YES" ] ;then
  make install-swig-py install-swig-pl-lib \
      DESTDIR=${PKG} ${SWIG_DIRS} || exit 1
fi
if [ "${SB_RUBY}" = "YES" ] ;then
  make install-swig-rb \
      DESTDIR=${PKG} ${SWIG_DIRS} || exit 1
fi
if [ "${SB_JAVA}" = "YES" ] ;then
  make install-javahl-java install-javahl-lib javahl_javadir=/usr/share/java \
      DESTDIR=${PKG} || exit 1
fi

if [ "${SB_PERL}" = "YES" ] ;then
  make pure_vendor_install -C subversion/bindings/swig/perl/native \
        PERL_INSTALL_ROOT=${PKG} || exit 1
fi

make install-docs DESTDIR=${PKG} || exit 1

mkdir -p ${PKG}/etc/${NAME}

# Add subversion.conf configuration file into httpd/conf.d directory.
mkdir -p ${PKG}/etc/httpd/extra
zcat ${CWD}/${NAME}.conf.gz > ${PKG}/etc/httpd/extra/${NAME}.conf.new || exit 1

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/libsvn_auth_*.so

# Remove unpackaged files
rm -rf ${PKG}/usr/include/subversion-*/*.txt \
       ${PKG}/${PYSITEARCH}/*/*.{a,la}

# remove stuff produced with Perl modules
find ${PKG} -type f \
    -a \( -name .packlist -o \( -name '*.bs' -a -empty \) \) \
    -print0 | xargs -0 rm -f

# make Perl modules writable
find ${PKG}/usr/lib*/perl5 -type f -perm 555 -print0 |
        xargs -0 chmod 755

# unnecessary libraries for swig bindings
rm -f ${PKG}/usr/lib*/libsvn_swig_*.{so,la,a}

# Remove unnecessary ruby libraries
rm -f ${PKG}/${RBVENDORARCH}/svn/ext/*.*a

# Trim what goes in docdir
rm -rf tools/*/*.in tools/test-scripts

# Install psvn for emacs
mkdir -p ${PKG}/${emacs_lispdir}
zcat ${CWD}/psvn.el.gz > ${PKG}/${emacs_lispdir}/psvn.el || exit 1

mkdir -p ${PKG}/${emacs_startdir}
install -pm0644 ${CWD}/psvn-init.el ${PKG}/${emacs_startdir}/psvn-init.el|| exit 1

# Trim exported dependencies to SVN and APR libraries only:
sed -i "/^dependency_libs/{
     s, -l[^ ']*, ,g;
     s, -L[^ ']*, ,g;
     s,/usr/lib${LIBDIRSUFFIX}/lib[^sa][^vp][^nr].*.la, ,g;
     }" ${PKG}/usr/lib*/*.la
chmod 0644 ${PKG}/usr/lib*/*.la

rm -rf ${PKG}/usr/build

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  BUGS COMMITTERS COPYING HACKING README CHANGES doc book subversion/LICENSE \
  contrib/client-side/svn_load_dirs/{*.pl,*.example,*.README} \
  contrib/client-side/svnmerge/*.{README,py} contrib/client-side/wcgrep \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
cp subversion/mod_authz_svn/INSTALL ${DOCDIR}/mod_authz_svn-INSTALL
# too big && useless for most || if you think not, can be found in the source tarball
[ "${SB_TOOLS}" = "YES" ] || rm -rf ${DOCDIR}/doc/tools
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}.conf.gz ${CWD}/psvn.el.gz \
    ${CWD}/psvn-init.el ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
