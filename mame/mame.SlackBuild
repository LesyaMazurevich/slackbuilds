#!/bin/sh
#-- mame for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ mame.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Installation procedure based on Freshrpms <http://freshrpms.net/> RPM spec.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://mamedev.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=mame
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.164}
SVER="$( echo ${VERSION} | cut -d . -f1-2 )"
PATCHLEVEL="$( echo ${VERSION} | cut -d . -f3 | sed -e 's/^.//' )"
[ "${PATCHLEVEL}" = "" ] && PATCHLEVEL=0
# Hiscore patch from MKChamp
# http://forum.arcadecontrols.com/index.php?topic=64298.0
HSVER=${HVER:-164}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
# Unset here to not conflicting in Makefile variables.
PBUILD=${BUILD}
unset BUILD

# Set to YES to verbose make output.
SB_VERBOSE=${SB_VERBOSE:-NO}

# Set to YES to build with debugger support.
SB_DBG=${SB_DBG:-YES}
# Set to YES to build with hiscore patch.
SB_HS=${SB_HS:-YES}
# Set to YES to build Qt debugger (if SB_DBG=YES)
SB_QT=${SB_QT:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOWNDIR=${CWD}/patches/updates

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${NAME}${SVER//.}s.zip
PSRCARCHIVE=${VERSION//.}_diff.zip
HSSRCARCHIVE=hi_${HSVER}.txt

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://mamedev.org/downloader.php?file=${NAME}${SVER//.}/${SRCARCHIVE}"
PDL_URL="http://mamedev.org/updates"
HSDL_URL="http://mamestuff.lowtrucks.net/MKChamp/${HSSRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} --user-agent='Mozilla/5.0' ${DL_OPTS} ${DL_URL} -O ${CWD}/${SRCARCHIVE} || exit 1
mkdir -p ${DOWNDIR}
( cd ${DOWNDIR} || exit 1
  if [ "${PATCHLEVEL}" -gt 0 ] ;then
    for i in $( seq -w ${PATCHLEVEL} ) ; do
      file=${SVER//.}u${i}_diff.zip
      test -r ${file} || ${DL_PROG} --user-agent='Mozilla/5.0' ${DL_OPTS} ${PDL_URL}/${file} || exit 1
    done
  fi
  if [ "${SB_HS}" = "YES" ] ;then
    test -r ${HSSRCARCHIVE} || ${DL_PROG} --user-agent='Mozilla/5.0' ${DL_OPTS} ${HSDL_URL} || exit 1
  fi
) || exit $?

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "${CWD}/${SRCARCHIVE} is empty"
  echo "Delete ${CWD}/${SRCARCHIVE}, check VERSION and try again."
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
  RARCH="-march=native"
else
  RARCH="-march=${ARCH}"
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
  RARCH="${RARCH} -fPIC"
  export PTR64=1
else
  LIBDIRSUFFIX=""
  PTR64=""
fi

# Set the config option variables if they are not already set:
[ -r ../qt4.options ] && source ../qt4.options

_qt4_prefix=${_qt4_prefix:-/usr/lib${LIBDIRSUFFIX}/qt4}
_qt4_bindir=${_qt4_bindir:-${_qt4_prefix}/bin}
_qt4_qmake=${_qt4_qmake:-${_qt4_bindir}/qmake}

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
unzip ${CWD}/${SRCARCHIVE} -d ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1
unzip mame.zip || exit 1
rm -f mame.zip
if [ "${PATCHLEVEL}" -gt 0 ] ;then
  for i in $( seq -w ${PATCHLEVEL} ) ; do
    file=${SVER//.}u${i}_diff.zip
    unzip ${DOWNDIR}/${file} || exit 1
  done
fi
if [ "${SB_HS}" = "YES" ] ;then
  cp ${DOWNDIR}/${HSSRCARCHIVE} ${HSSRCARCHIVE}.diff || exit 1
  sed -i -e '/db_filename =/s|"hiscore.dat"|"/usr/share/mame/hiscore.dat"|g' \
    ${HSSRCARCHIVE}.diff || exit 1
fi

chmod -R u+w,go+r-w,a-s .

rm -rf 3rdparty/dxsdk

echo "Fixing EOLs"
find . \
  -type f ! -iname '*.png' \
  | xargs sed -e 's/\r//' -i || exit 1

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|targetsuffix "64"|targetsuffix ""|g' scripts/src/main.lua || exit 1

sed -i \
  -e "s|/usr/X11/lib|/usr/lib${LIBDIRSUFFIX}|g" \
  -e '/"\/usr\/X11R6\/lib",/d' \
  -e '/"\/usr\/openwin\/lib"/d' \
  scripts/src/osd/sdl.lua || exit 1

# Verbose building (very verbose)
unset VERBOSE NO_DEBUGGER NO_USE_QTDEBUG ARCH
[ "${SB_VERBOSE}" = "YES" ] && export VERBOSE=1
[ "${SB_DBG}" = "YES" ] || export NO_DEBUGGER=1
[ "${SB_QT}" = "YES" ] || export NO_USE_QTDEBUG=1

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${CFLAGS}"
export LDFLAGS+=" -Wl,--as-needed"
export ARCHOPTS="${RARCH}"
export verbose=1
export PYTHON_EXECUTABLE=/usr/bin/python2
export NOWERROR=1
export TOOLS=1
export SDL_INI_PATH="/etc/mame;"

make -j${NJOBS} all \
  USE_SYSTEM_LIB_EXPAT=1 USE_SYSTEM_LIB_FLAC=1 USE_SYSTEM_LIB_JPEG=1 USE_SYSTEM_LIB_PORTAUDIO=1 \
  USE_SYSTEM_LIB_PORTMIDI=1 USE_SYSTEM_LIB_SQLITE3=1 USE_SYSTEM_LIB_ZLIB=1 \
  OPTIMIZE=2 || exit $?

mkdir -p ${PKG}/usr/bin
mkdir -p ${PKG}/usr/man/man{1,6}
install -m 0755 mame ${PKG}/usr/bin/mame || exit 1
install -pm0644 src/osd/sdl/man/mame.6 ${PKG}/usr/man/man6/${NAME}.6 || exit 1

for f in \
  chdman jedutil ldresample ldverify regrep romcmp testkeys unidasm \
  split src2html srcclean
do
  install -m 0755 ${f} ${PKG}/usr/bin/${f}-${NAME} || exit 1
  if [ -f src/osd/sdl/man/${f}.1 ] ;then
    install -pm0644 src/osd/sdl/man/${f}.1 ${PKG}/usr/man/man1/${f}-${NAME}.1 || exit 1
  fi
done

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/etc/mame
# Create ini files
cat > ${PKG}/etc/mame/mame.ini.new <<'EOF'
# Define multi-user paths
artpath            /usr/share/mame/artwork;/usr/share/mame/effects
cheatpath          /usr/share/mame/cheat
ctrlrpath          /usr/share/mame/ctrlr
fontpath           /usr/share/mame/fonts
hashpath           /usr/share/mame/hash
rompath            /usr/share/mame/roms;/usr/share/mame/chds
samplepath         /usr/share/mame/samples

# Allow user to override ini settings
inipath            $HOME/.mame/ini;/etc/mame

# Set paths for local storage
cfg_directory      $HOME/.mame/cfg
comment_directory  $HOME/.mame/comments
diff_directory     $HOME/.mame/diff
input_directory    $HOME/.mame/inp
memcard_directory  $HOME/.mame/memcard
nvram_directory    $HOME/.mame/nvram
snapshot_directory $HOME/.mame/snap
state_directory    $HOME/.mame/sta

video              opengl
autosave           1
EOF

for dir in artwork chds cheat ctrlr effects fonts hash hlsl keymaps roms \
 samples shader
do
  mkdir -p ${PKG}/usr/share/mame/${dir}
done

install -pm 644 artwork/* ${PKG}/usr/share/mame/artwork/
install -pm 644 hash/* ${PKG}/usr/share/mame/hash/
install -pm 644 hlsl/* ${PKG}/usr/share/mame/hlsl/
install -pm 644 keymaps/* ${PKG}/usr/share/mame/keymaps/
install -pm 644 src/osd/sdl/keymaps/* ${PKG}/usr/share/mame/keymaps/
install -pm 644 src/osd/modules/opengl/shader/*.?sh ${PKG}/usr/share/mame/shader/

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  docs/*.txt *.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
