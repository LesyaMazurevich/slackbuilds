diff -up src/emu/cpu/m6809/hd6309.c.inline src/emu/cpu/m6809/hd6309.c
--- src/emu/cpu/m6809/hd6309.c.inline	2013-04-14 19:03:39.516702269 -0300
+++ src/emu/cpu/m6809/hd6309.c	2013-04-14 19:04:11.692869236 -0300
@@ -216,7 +216,7 @@ offs_t hd6309_device::disasm_disassemble
 //  read_operand
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT8 hd6309_device::read_operand()
+ATTR_FORCE_INLINE inline UINT8 hd6309_device::read_operand()
 {
 	switch(m_addressing_mode)
 	{
@@ -235,7 +235,7 @@ ATTR_FORCE_INLINE UINT8 hd6309_device::r
 //  read_operand
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT8 hd6309_device::read_operand(int ordinal)
+ATTR_FORCE_INLINE inline UINT8 hd6309_device::read_operand(int ordinal)
 {
 	switch(m_addressing_mode)
 	{
@@ -259,7 +259,7 @@ ATTR_FORCE_INLINE UINT8 hd6309_device::r
 //  write_operand
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void hd6309_device::write_operand(UINT8 data)
+ATTR_FORCE_INLINE inline void hd6309_device::write_operand(UINT8 data)
 {
 	switch(m_addressing_mode)
 	{
@@ -278,7 +278,7 @@ ATTR_FORCE_INLINE void hd6309_device::wr
 //  write_operand
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void hd6309_device::write_operand(int ordinal, UINT8 data)
+ATTR_FORCE_INLINE inline void hd6309_device::write_operand(int ordinal, UINT8 data)
 {
 	switch(m_addressing_mode)
 	{
@@ -301,7 +301,7 @@ ATTR_FORCE_INLINE void hd6309_device::wr
 //  bittest_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT8 &hd6309_device::bittest_register()
+ATTR_FORCE_INLINE inline UINT8 &hd6309_device::bittest_register()
 {
 	switch(m_temp_im & 0xC0)
 	{
@@ -317,7 +317,7 @@ ATTR_FORCE_INLINE UINT8 &hd6309_device::
 //  bittest_source
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE bool hd6309_device::bittest_source()
+ATTR_FORCE_INLINE inline bool hd6309_device::bittest_source()
 {
 	return (m_temp.b.l & (1 << ((m_temp_im >> 3) & 0x07))) ? true : false;
 }
@@ -327,7 +327,7 @@ ATTR_FORCE_INLINE bool hd6309_device::bi
 //  bittest_dest
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE bool hd6309_device::bittest_dest()
+ATTR_FORCE_INLINE inline bool hd6309_device::bittest_dest()
 {
 	return (bittest_register() & (1 << ((m_temp_im >> 0) & 0x07))) ? true : false;
 }
@@ -337,7 +337,7 @@ ATTR_FORCE_INLINE bool hd6309_device::bi
 //  bittest_set
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void hd6309_device::bittest_set(bool result)
+ATTR_FORCE_INLINE inline void hd6309_device::bittest_set(bool result)
 {
 	if (result)
 		bittest_register() |= (1 << ((m_temp_im >> 0) & 0x07));
@@ -351,7 +351,7 @@ ATTR_FORCE_INLINE void hd6309_device::bi
 //  read_exgtfr_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE m6809_base_device::exgtfr_register hd6309_device::read_exgtfr_register(UINT8 reg)
+ATTR_FORCE_INLINE inline m6809_base_device::exgtfr_register hd6309_device::read_exgtfr_register(UINT8 reg)
 {
 	UINT16 value = 0;
 
@@ -390,7 +390,7 @@ ATTR_FORCE_INLINE m6809_base_device::exg
 //  write_exgtfr_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void hd6309_device::write_exgtfr_register(UINT8 reg, m6809_base_device::exgtfr_register value)
+ATTR_FORCE_INLINE inline void hd6309_device::write_exgtfr_register(UINT8 reg, m6809_base_device::exgtfr_register value)
 {
 	switch(reg & 0x0F)
 	{
@@ -422,7 +422,7 @@ ATTR_FORCE_INLINE void hd6309_device::wr
 //  tfr_read
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE bool hd6309_device::tfr_read(UINT8 opcode, UINT8 arg, UINT8 &data)
+ATTR_FORCE_INLINE inline bool hd6309_device::tfr_read(UINT8 opcode, UINT8 arg, UINT8 &data)
 {
 	PAIR16 *reg;
 
@@ -455,7 +455,7 @@ ATTR_FORCE_INLINE bool hd6309_device::tf
 //  tfr_write
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE bool hd6309_device::tfr_write(UINT8 opcode, UINT8 arg, UINT8 data)
+ATTR_FORCE_INLINE inline bool hd6309_device::tfr_write(UINT8 opcode, UINT8 arg, UINT8 data)
 {
 	PAIR16 *reg;
 
@@ -697,7 +697,7 @@ bool hd6309_device::divd()
 //  execute_one - try to execute a single instruction
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void hd6309_device::execute_one()
+ATTR_FORCE_INLINE inline void hd6309_device::execute_one()
 {
 	switch(pop_state())
 	{
diff -up src/emu/cpu/m6809/konami.c.inline src/emu/cpu/m6809/konami.c
--- src/emu/cpu/m6809/konami.c.inline	2013-04-14 19:03:39.519701632 -0300
+++ src/emu/cpu/m6809/konami.c	2013-04-14 19:04:11.693869024 -0300
@@ -145,7 +145,7 @@ inline ATTR_FORCE_INLINE UINT8 konami_cp
 //  write_operand
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void konami_cpu_device::write_operand(UINT8 data)
+ATTR_FORCE_INLINE inline void konami_cpu_device::write_operand(UINT8 data)
 {
 	super::write_operand(data);
 }
@@ -156,7 +156,7 @@ ATTR_FORCE_INLINE void konami_cpu_device
 //  write_operand
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void konami_cpu_device::write_operand(int ordinal, UINT8 data)
+ATTR_FORCE_INLINE inline void konami_cpu_device::write_operand(int ordinal, UINT8 data)
 {
 	switch(m_addressing_mode)
 	{
@@ -172,7 +172,7 @@ ATTR_FORCE_INLINE void konami_cpu_device
 //  ireg
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT16 &konami_cpu_device::ireg()
+ATTR_FORCE_INLINE inline UINT16 &konami_cpu_device::ireg()
 {
 	switch(m_opcode & 0x70)
 	{
@@ -192,7 +192,7 @@ ATTR_FORCE_INLINE UINT16 &konami_cpu_dev
 //  read_exgtfr_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE m6809_base_device::exgtfr_register konami_cpu_device::read_exgtfr_register(UINT8 reg)
+ATTR_FORCE_INLINE inline m6809_base_device::exgtfr_register konami_cpu_device::read_exgtfr_register(UINT8 reg)
 {
 	exgtfr_register result;
 	result.word_value = 0x00FF;
@@ -215,7 +215,7 @@ ATTR_FORCE_INLINE m6809_base_device::exg
 //  write_exgtfr_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void konami_cpu_device::write_exgtfr_register(UINT8 reg, m6809_base_device::exgtfr_register value)
+ATTR_FORCE_INLINE inline void konami_cpu_device::write_exgtfr_register(UINT8 reg, m6809_base_device::exgtfr_register value)
 {
 	switch(reg & 0x07)
 	{
@@ -285,7 +285,7 @@ template<class T> T konami_cpu_device::s
 //  lmul
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void konami_cpu_device::lmul()
+ATTR_FORCE_INLINE inline void konami_cpu_device::lmul()
 {
 	PAIR result;
 
@@ -311,7 +311,7 @@ ATTR_FORCE_INLINE void konami_cpu_device
 //  divx
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void konami_cpu_device::divx()
+ATTR_FORCE_INLINE inline void konami_cpu_device::divx()
 {
 	UINT16 result;
 	UINT8 remainder;
@@ -355,7 +355,7 @@ void konami_cpu_device::set_lines(UINT8
 //  execute_one - try to execute a single instruction
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void konami_cpu_device::execute_one()
+ATTR_FORCE_INLINE inline void konami_cpu_device::execute_one()
 {
 	switch(pop_state())
 	{
diff -up src/emu/cpu/m6809/m6809.c.inline src/emu/cpu/m6809/m6809.c
--- src/emu/cpu/m6809/m6809.c.inline	2013-04-14 19:03:39.520701420 -0300
+++ src/emu/cpu/m6809/m6809.c	2013-04-14 19:04:11.693869024 -0300
@@ -474,7 +474,7 @@ const char *m6809_base_device::inputnum_
 //  read_exgtfr_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE m6809_base_device::exgtfr_register m6809_base_device::read_exgtfr_register(UINT8 reg)
+ATTR_FORCE_INLINE inline m6809_base_device::exgtfr_register m6809_base_device::read_exgtfr_register(UINT8 reg)
 {
 	exgtfr_register result;
 	result.byte_value = 0xFF;
@@ -501,7 +501,7 @@ ATTR_FORCE_INLINE m6809_base_device::exg
 //  write_exgtfr_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void m6809_base_device::write_exgtfr_register(UINT8 reg, m6809_base_device::exgtfr_register value)
+ATTR_FORCE_INLINE inline void m6809_base_device::write_exgtfr_register(UINT8 reg, m6809_base_device::exgtfr_register value)
 {
 	switch(reg & 0x0F)
 	{
@@ -534,7 +534,7 @@ void m6809_base_device::log_illegal()
 //  execute_one - try to execute a single instruction
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void m6809_base_device::execute_one()
+ATTR_FORCE_INLINE inline void m6809_base_device::execute_one()
 {
 	switch(pop_state())
 	{
diff -up src/emu/video/mc6847.c.inline src/emu/video/mc6847.c
--- src/emu/video/mc6847.c.inline	2013-04-14 19:03:40.614469129 -0300
+++ src/emu/video/mc6847.c	2013-04-14 19:04:11.686870510 -0300
@@ -146,7 +146,7 @@ mc6847_friend_device::mc6847_friend_devi
 //  to the clock
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE emu_timer *mc6847_friend_device::setup_timer(device_timer_id id, double offset, double period)
+ATTR_FORCE_INLINE inline emu_timer *mc6847_friend_device::setup_timer(device_timer_id id, double offset, double period)
 {
 	emu_timer *timer = timer_alloc(id);
 	timer->adjust(
@@ -221,7 +221,7 @@ void mc6847_friend_device::device_post_l
 //  update_field_sync_timer
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void mc6847_friend_device::update_field_sync_timer(void)
+void mc6847_friend_device::update_field_sync_timer(void)
 {
 	// are we expecting field sync?
 	bool expected_field_sync = (m_physical_scanline < m_field_sync_falling_edge_scanline)
@@ -261,7 +261,7 @@ void mc6847_friend_device::device_timer(
 //  new_frame
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void mc6847_friend_device::new_frame(void)
+ATTR_FORCE_INLINE inline void mc6847_friend_device::new_frame(void)
 {
 	m_physical_scanline = 0;
 	m_logical_scanline = 0;
@@ -298,7 +298,7 @@ const char *mc6847_friend_device::scanli
 //  change_horizontal_sync
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void mc6847_friend_device::change_horizontal_sync(bool line)
+ATTR_FORCE_INLINE inline void mc6847_friend_device::change_horizontal_sync(bool line)
 {
 	g_profiler.start(PROFILER_USER1);
 
@@ -367,7 +367,7 @@ ATTR_FORCE_INLINE void mc6847_friend_dev
 //  change_field_sync
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void mc6847_friend_device::change_field_sync(bool line)
+ATTR_FORCE_INLINE inline void mc6847_friend_device::change_field_sync(bool line)
 {
 	/* output field sync */
 	if (line != m_field_sync)
@@ -393,7 +393,7 @@ ATTR_FORCE_INLINE void mc6847_friend_dev
 //  next_scanline
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void mc6847_friend_device::next_scanline(void)
+ATTR_FORCE_INLINE inline void mc6847_friend_device::next_scanline(void)
 {
 	/* advance to next scanline */
 	m_physical_scanline++;
@@ -696,7 +696,7 @@ void mc6847_base_device::record_scanline
 //  record_body_scanline
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void mc6847_base_device::record_body_scanline(UINT16 physical_scanline, UINT16 scanline, INT32 start_pos, INT32 end_pos)
+ATTR_FORCE_INLINE inline void mc6847_base_device::record_body_scanline(UINT16 physical_scanline, UINT16 scanline, INT32 start_pos, INT32 end_pos)
 {
 	// sanity checks
 	assert(scanline < 192);
@@ -799,7 +799,7 @@ void mc6847_base_device::field_sync_chan
 //  border_value
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE mc6847_base_device::pixel_t mc6847_base_device::border_value(UINT8 mode, const pixel_t *palette, bool is_mc6847t1)
+ATTR_FORCE_INLINE inline mc6847_base_device::pixel_t mc6847_base_device::border_value(UINT8 mode, const pixel_t *palette, bool is_mc6847t1)
 {
 	pixel_t result;
 	switch(mc6847_friend_device::border_value(mode, is_mc6847t1))
diff -up src/mess/video/gime.c.inline src/mess/video/gime.c
--- src/mess/video/gime.c.inline	2013-04-14 19:03:40.204556185 -0300
+++ src/mess/video/gime.c	2013-04-14 19:04:11.691869449 -0300
@@ -198,7 +198,7 @@ void gime_base_device::device_start(void
 //  get_composite_color
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE gime_base_device::pixel_t gime_base_device::get_composite_color(int color)
+ATTR_FORCE_INLINE inline gime_base_device::pixel_t gime_base_device::get_composite_color(int color)
 {
 	/* CMP colors
 	 *
@@ -310,7 +310,7 @@ ATTR_FORCE_INLINE gime_base_device::pixe
 //  get_rgb_color
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE gime_base_device::pixel_t gime_base_device::get_rgb_color(int color)
+ATTR_FORCE_INLINE inline gime_base_device::pixel_t gime_base_device::get_rgb_color(int color)
 {
 	return  (((color >> 4) & 2) | ((color >> 2) & 1)) * 0x550000
 		|   (((color >> 3) & 2) | ((color >> 1) & 1)) * 0x005500
@@ -522,7 +522,7 @@ void gime_base_device::reset_timer(void)
 //  update_memory
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void gime_base_device::update_memory(void)
+ATTR_FORCE_INLINE inline void gime_base_device::update_memory(void)
 {
 	for (int bank = 0; bank <= 8; bank++)
 	{
@@ -680,7 +680,7 @@ UINT8 gime_base_device::read(offs_t offs
 //  read_gime_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT8 gime_base_device::read_gime_register(offs_t offset)
+ATTR_FORCE_INLINE inline UINT8 gime_base_device::read_gime_register(offs_t offset)
 {
 	offset &= 0x0F;
 
@@ -725,7 +725,7 @@ ATTR_FORCE_INLINE UINT8 gime_base_device
 //  read_mmu_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT8 gime_base_device::read_mmu_register(offs_t offset)
+ATTR_FORCE_INLINE inline UINT8 gime_base_device::read_mmu_register(offs_t offset)
 {
 	return (m_mmu[offset & 0x0F] & 0x3F) | (read_floating_bus() & 0xC0);
 }
@@ -736,7 +736,7 @@ ATTR_FORCE_INLINE UINT8 gime_base_device
 //  read_palette_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT8 gime_base_device::read_palette_register(offs_t offset)
+ATTR_FORCE_INLINE inline UINT8 gime_base_device::read_palette_register(offs_t offset)
 {
 	// Bits 7/6 are floating, and behave oddly.  On a real CoCo 3
 	//
@@ -754,7 +754,7 @@ ATTR_FORCE_INLINE UINT8 gime_base_device
 //  read_floating_bus
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT8 gime_base_device::read_floating_bus(void)
+ATTR_FORCE_INLINE inline UINT8 gime_base_device::read_floating_bus(void)
 {
 	return m_res_in_floating_bus_func.isnull()
 		? 0
@@ -796,7 +796,7 @@ void gime_base_device::write(offs_t offs
 //  write_gime_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void gime_base_device::write_gime_register(offs_t offset, UINT8 data)
+ATTR_FORCE_INLINE inline void gime_base_device::write_gime_register(offs_t offset, UINT8 data)
 {
 	// this is needed for writes to FF95
 	bool timer_was_off = (m_gime_registers[0x04] == 0x00) && (m_gime_registers[0x05] == 0x00);
@@ -999,7 +999,7 @@ ATTR_FORCE_INLINE void gime_base_device:
 //  write_mmu_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void gime_base_device::write_mmu_register(offs_t offset, UINT8 data)
+ATTR_FORCE_INLINE inline void gime_base_device::write_mmu_register(offs_t offset, UINT8 data)
 {
 	offset &= 0x0F;
 
@@ -1019,7 +1019,7 @@ ATTR_FORCE_INLINE void gime_base_device:
 //  write_palette_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void gime_base_device::write_palette_register(offs_t offset, UINT8 data)
+ATTR_FORCE_INLINE inline void gime_base_device::write_palette_register(offs_t offset, UINT8 data)
 {
 	offset &= 0x0F;
 
@@ -1052,7 +1052,7 @@ ATTR_FORCE_INLINE void gime_base_device:
 //  write_sam_register
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE void gime_base_device::write_sam_register(offs_t offset)
+ATTR_FORCE_INLINE inline void gime_base_device::write_sam_register(offs_t offset)
 {
 	/* change the SAM state */
 	UINT16 xorval = alter_sam_state(offset);
@@ -1128,7 +1128,7 @@ void gime_base_device::recalculate_firq(
 //  John Kowalski confirms this behavior
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE offs_t gime_base_device::get_video_base(void)
+ATTR_FORCE_INLINE inline offs_t gime_base_device::get_video_base(void)
 {
 	offs_t result;
 	UINT8 ff9d_mask, ff9e_mask;
@@ -1266,7 +1266,7 @@ void gime_base_device::record_border_sca
 //  get_lines_per_row
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT16 gime_base_device::get_lines_per_row(void)
+ATTR_FORCE_INLINE inline UINT16 gime_base_device::get_lines_per_row(void)
 {
 	UINT16 lines_per_row;
 	if (m_legacy_video)
@@ -1347,7 +1347,7 @@ ATTR_FORCE_INLINE UINT16 gime_base_devic
 //-------------------------------------------------
 
 template<UINT8 xres, gime_base_device::get_data_func get_data, bool record_mode>
-ATTR_FORCE_INLINE UINT32 gime_base_device::record_scanline_res(int scanline)
+ATTR_FORCE_INLINE inline UINT32 gime_base_device::record_scanline_res(int scanline)
 {
 	int column;
 	UINT32 base_offset = m_legacy_video ? 0 : (m_gime_registers[0x0F] & 0x7F) * 2;
@@ -1632,7 +1632,7 @@ UINT32 gime_base_device::emit_dummy_samp
 //  emit_mc6847_samples
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE UINT32 gime_base_device::emit_mc6847_samples(const scanline_record *scanline, int sample_start, int sample_count, pixel_t *pixels, const pixel_t *palette)
+ATTR_FORCE_INLINE inline UINT32 gime_base_device::emit_mc6847_samples(const scanline_record *scanline, int sample_start, int sample_count, pixel_t *pixels, const pixel_t *palette)
 {
 	return super::emit_mc6847_samples<2>(
 		scanline->m_mode[sample_start],
@@ -1652,7 +1652,7 @@ ATTR_FORCE_INLINE UINT32 gime_base_devic
 //-------------------------------------------------
 
 template<int xscale, int bits_per_pixel>
-ATTR_FORCE_INLINE UINT32 gime_base_device::emit_gime_graphics_samples(const scanline_record *scanline, int sample_start, int sample_count, pixel_t *pixels, const pixel_t *palette)
+ATTR_FORCE_INLINE inline UINT32 gime_base_device::emit_gime_graphics_samples(const scanline_record *scanline, int sample_start, int sample_count, pixel_t *pixels, const pixel_t *palette)
 {
 	const UINT8 *data = &scanline->m_data[sample_start];
 	mc6847_friend_device::emit_graphics<bits_per_pixel, xscale>(data, sample_count, pixels, 0, palette);
@@ -1666,7 +1666,7 @@ ATTR_FORCE_INLINE UINT32 gime_base_devic
 //-------------------------------------------------
 
 template<int xscale>
-ATTR_FORCE_INLINE UINT32 gime_base_device::emit_gime_text_samples(const scanline_record *scanline, int sample_start, int sample_count, pixel_t *pixels, const pixel_t *palette)
+ATTR_FORCE_INLINE inline UINT32 gime_base_device::emit_gime_text_samples(const scanline_record *scanline, int sample_start, int sample_count, pixel_t *pixels, const pixel_t *palette)
 {
 	UINT8 attribute = scanline->m_mode[sample_start];
 	const UINT8 *data = &scanline->m_data[sample_start];
@@ -1726,7 +1726,7 @@ ATTR_FORCE_INLINE UINT32 gime_base_devic
 //-------------------------------------------------
 
 template<int sample_count, gime_base_device::emit_samples_proc emit_samples>
-ATTR_FORCE_INLINE void gime_base_device::render_scanline(const scanline_record *scanline, pixel_t *pixels, int min_x, int max_x, palette_resolver *resolver)
+ATTR_FORCE_INLINE inline void gime_base_device::render_scanline(const scanline_record *scanline, pixel_t *pixels, int min_x, int max_x, palette_resolver *resolver)
 {
 	int left_border, right_border;
 	int x, x2, pixel_position;
@@ -1927,7 +1927,7 @@ bool gime_base_device::update_rgb(bitmap
 //  palette_resolver::palette_resolver
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE gime_base_device::palette_resolver::palette_resolver(gime_base_device *gime, const pixel_t *palette)
+ATTR_FORCE_INLINE inline gime_base_device::palette_resolver::palette_resolver(gime_base_device *gime, const pixel_t *palette)
 {
 	m_gime = gime;
 	m_palette = palette;
@@ -1941,7 +1941,7 @@ ATTR_FORCE_INLINE gime_base_device::pale
 //  palette_resolver::get_palette
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE const gime_base_device::pixel_t *gime_base_device::palette_resolver::get_palette(UINT16 palette_rotation)
+ATTR_FORCE_INLINE inline const gime_base_device::pixel_t *gime_base_device::palette_resolver::get_palette(UINT16 palette_rotation)
 {
 	if (UNEXPECTED(m_current_resolved_palette != palette_rotation))
 	{
@@ -1958,7 +1958,7 @@ ATTR_FORCE_INLINE const gime_base_device
 //  palette_resolver::lookup
 //-------------------------------------------------
 
-ATTR_FORCE_INLINE gime_base_device::pixel_t gime_base_device::palette_resolver::lookup(UINT8 color)
+ATTR_FORCE_INLINE inline gime_base_device::pixel_t gime_base_device::palette_resolver::lookup(UINT8 color)
 {
 	assert(color <= 63);
 	return m_palette[color];
