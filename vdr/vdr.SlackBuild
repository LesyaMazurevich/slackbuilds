#!/bin/sh
#-- vdr for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ vdr.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Mostly adapted (copied) from Fedora Spec file

# http://www.tvdr.de/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=vdr
PKG=${PKG:-${TMP}/package-${NAME}}

SNAPBUILD=${SNAPBUILD:-NO}
if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
  SNAPBRANCH=${SNAPBRANCH:-master}
else
  # Maintenance patch splitted by "-", e.g: Maintenance patch 2 -> 1.6.0-2
  VERSION=${VERSION:-2.2.0}
fi
PVER=${PVER:-2.0.3-2}
SYNUPVER=${SYNUPVER:-"$(LC_ALL=C date +%Y%m%d)"}
SVER="$( echo ${VERSION} | awk -F'-' '{print $1}' )"
PATCHLEVEL="$( echo ${VERSION} | awk -F'-' '{print $2}' )"
[ "${PATCHLEVEL}" = "" ] && PATCHLEVEL=0
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to build documentation
SB_DOCS=${SB_DOCS:-NO}

grep --quiet '^vdr:' /etc/passwd && SB_HUSER=1

DATE=$(LC_ALL=C date +%d-%b-%Y)

CONFDIR=${CWD}/conf
DOWNDIR=${CWD}/patches/updates

if [ "${SNAPBUILD}" = "YES" ] ;then
  SRCDIR=${NAME}-${VERSION}
  SRCARCHIVE=${SRCDIR}.tar.xz
else
  SRCDIR=${NAME}-${SVER}
  SRCARCHIVE=${SRCDIR}.tar.bz2
fi
PSRCARCHIVE=${NAME}_${PVER}.debian.tar.bz2

EPSRCARCHIVE01="vdr_1.4.5-2.ds.diff.gz"
EPSRCARCHIVE02="vdr-2.0.3-vasarajanauloja.patch.gz"
EPSRCARCHIVE03="vdr-timer-info-0.5-1.7.13.diff"
EPSRCARCHIVE04="vdr-2.2.0-ttxtsubs.patch"
EPSRCARCHIVE05="vdr-1.7.29-hlcutter-0.2.3.diff"
EPSRCARCHIVE06="vdr-2.1.5-naludump-0.1.diff"
EPSRCARCHIVE07="vdr-1.5.17-progressbar-support-0.0.1.diff"
EPSRCARCHIVE08="vdr.epgsearch-exttimeredit-0.0.2.diff"
EPSRCARCHIVE09="vdr-2.1.6-menuselection.patch.gz"

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.tvdr.de/vdr"
DL_URL2="ftp://ftp.tvdr.de/vdr/Developer"
MIRROR_DEB=${MIRROR_DEB:-http://ftp.debian.org}
PDL_URL="${MIRROR_DEB}/debian/pool/main/$(echo ${NAME} | sed -e 's/\(.\).*/\1/')/${NAME}/${PSRCARCHIVE}"
EPDL_URL01="http://zap.tartarus.org/~ds/debian/dists/stable/main/source/${EPSRCARCHIVE01}"
EPDL_URL02="http://www.saunalahti.fi/~rahrenbe/vdr/patches/${EPSRCARCHIVE02}"
EPDL_URL03="http://toms-cafe.de/vdr/download/${EPSRCARCHIVE03}"
EPDL_URL04="http://projects.vdr-developer.org/projects/plg-ttxtsubs/repository/revisions/master/raw/patches/${EPSRCARCHIVE04}"
EPDL_URL05="http://www.udo-richter.de/vdr/files/${EPSRCARCHIVE05}"
EPDL_URL06="http://www.udo-richter.de/vdr/files/${EPSRCARCHIVE06}"
EPDL_URL07="http://projects.vdr-developer.org/git/vdr-plugin-epgsearch.git/plain/patches/${EPSRCARCHIVE07}"
EPDL_URL08="http://projects.vdr-developer.org/git/vdr-plugin-epgsearch.git/plain/patches/${EPSRCARCHIVE08}"
EPDL_URL09="http://www.saunalahti.fi/~rahrenbe/vdr/patches/${EPSRCARCHIVE09}"

SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}
export snapbranch=${SNAPBRANCH}
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
if [ "${SNAPBUILD}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
else
  test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL2}/${SRCARCHIVE} || exit 1
fi
mkdir -p ${DOWNDIR}
if [ "${PATCHLEVEL}" -gt 0 ] ;then
  ( cd ${DOWNDIR} || exit 1
    for i in $( seq -w ${PATCHLEVEL} ) ; do
      file=vdr-${SVER}-${i}.diff
      test -r ${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL2}/${file} || exit 1
    done
  ) || exit $?
fi
test -r ${CWD}/${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL} || exit 1

( cd ${DOWNDIR} || exit 1
  test -r ${EPSRCARCHIVE01} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL01} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE01} || exit 1
  test -r ${EPSRCARCHIVE02} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL02} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE02} || exit 1
  test -r ${EPSRCARCHIVE03} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL03} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE03} || exit 1
  test -r ${EPSRCARCHIVE04} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL04} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE04} || exit 1
  test -r ${EPSRCARCHIVE05} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL05} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE05} || exit 1
  test -r ${EPSRCARCHIVE06} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL06} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE06} || exit 1
  test -r ${EPSRCARCHIVE07} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL07} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE07} || exit 1
  test -r ${EPSRCARCHIVE08} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL08} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE08} || exit 1
  test -r ${EPSRCARCHIVE09} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL09} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE09} || exit 1
  test -r ${EPSRCARCHIVE10} || ${DL_PROG} ${DL_OPTS} ${EPDL_URL10} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${EPSRCARCHIVE10} || exit 1
) || exit $?

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

varbase=/var/lib/vdr
videodir=${varbase}/video
vardir=${varbase}/data
plugindir=/usr/lib${LIBDIRSUFFIX}/vdr
configdir=/etc/vdr
cachedir=/var/cache/vdr
rundir=/var/run/vdr

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${PSRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

for f in CONTRIBUTORS HISTORY UPDATE-1.4.0 README.timer-info \
  PLUGINS/src/dvbhddevice/HISTORY; do
  iconv -f iso-8859-1 -t utf-8 -o $f.utf8 $f && mv $f.utf8 $f
done

for file in commands reccmds timercmds ;do
  install -pm0644 ${CONFDIR}/vdr-${file}.conf ${file}.conf || exit 1
done

# Unfortunately these can't have comments in them, so ship 'em empty.
for file in channels remote setup timers ;do
  cat /dev/null > ${file}.conf
done

install -pm 644 ${CWD}/vdr-README.package README.package

# Would like to do "files {channels,setup,timers}.conf" from config dir
# only, but rename() in cSafeFile barks "device or resource busy", cf.
# http://lists.suse.com/archive/suse-programming-e/2003-Mar/0051.html
cat > vdr.rwtab <<EOF
dirs    ${cachedir}
files   ${configdir}
files   ${vardir}
EOF

# Disable some graphs that end up too big to be useful.
for g in COLLABORATION INCLUDE INCLUDED_BY ; do
  sed -i -e 's/^\(\s*'$g'_GRAPH\s*=\s*\).*/\1NO/' Doxyfile
done

APIVER="$(grep '^#define APIVERSION' config.h | awk '{print $3}' | tr -d \")"
if [ -z "${APIVER}" ] ;then
  echo "Variable APIVER not defined"
  exit 1
fi

unset SLKLDFLAGS
[ "${LDFLAGS}" ] && SLKLDFLAGS="${LDFLAGS}"
unset LDFLAGS

cat > Make.config <<EOF
CC           = gcc
CXX          = g++

CFLAGS       = \$(shell pkg-config vdr --variable=cflags)
CXXFLAGS     = \$(shell pkg-config vdr --variable=cxxflags)
LDFLAGS      = ${SLKLDFLAGS}

PREFIX       = /usr
MANDIR       = \$(shell pkg-config vdr --variable=mandir)
BINDIR       = \$(shell pkg-config vdr --variable=bindir)

LOCDIR       = \$(shell pkg-config vdr --variable=locdir)
PLUGINLIBDIR = \$(shell pkg-config vdr --variable=libdir)
VIDEODIR     = \$(shell pkg-config vdr --variable=videodir)
CONFDIR      = \$(shell pkg-config vdr --variable=configdir)
CACHEDIR     = \$(shell pkg-config vdr --variable=cachedir)
RESDIR       = \$(shell pkg-config vdr --variable=resdir)
INCDIR       = /usr/include
LIBDIR       = \$(PLUGINLIBDIR)

PLGCFG       = \$(LIBDIR)/plugins.mk
LIRC_DEVICE  = /var/run/lirc/lircd
VDR_USER     = \$(shell pkg-config vdr --variable=user)
EOF

cat > plugins.mk <<EOF
LDFLAGS = ${SLKLDFLAGS}
EOF

cp plugins.mk bundled-plugins.mk
cat >> bundled-plugins.mk  <<EOF
CFLAGS += -I$PWD/include
CXXFLAGS += -I$PWD/include
EOF

SLKCFLAGS="${SLKCFLAGS/-O2/-O3} -fPIC" # see HISTORY for 1.7.17 for -O3

make vdr.pc \
  BINDIR=/usr/bin MANDIR=/usr/man CONFDIR=${configdir} \
  VIDEODIR=${videodir} CACHEDIR=${cachedir} RESDIR=/usr/share/vdr \
  LIBDIR=${plugindir} LOCDIR=/usr/share/locale RUNDIR=${rundir} \
  VARDIR=${vardir} VDR_USER=vdr VDR_GROUP=video \
  LDFLAGS="${SLKLDFLAGS}" CFLAGS="${SLKCFLAGS}" \
  CXXFLAGS="${SLKCFLAGS} -Werror=overloaded-virtual -Wno-parentheses" || exit $?

PKG_CONFIG_PATH="${PWD}:${PKG_CONFIG_PATH}" \
make -j${NJOBS} vdr include-dir i18n || make  vdr include-dir i18n || exit $?

for plugin in dvbhddevice dvbsddevice rcu skincurses ; do
  make -j${NJOBS} -C PLUGINS/src/${plugin} VDRDIR=${PWD} \
    PLGCFG=${PWD}/bundled-plugins.mk all || exit $?
done

if [ "${SB_DOCS}" = "YES" ] ;then
  make -j${NJOBS} srcdoc || make srcdoc || exit $?
fi # docs

# Not using the install-pc target to preserve our already good vdr.pc
install -Dpm 644 vdr.pc ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/vdr.pc || exit 1

PKG_CONFIG_PATH="${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig:${PKG_CONFIG_PATH}" \
make install-bin install-dirs install-conf install-doc install-i18n \
  install-includes DESTDIR=${PKG} || exit $?

gunzip ${PKG}/usr/man/man*/*.gz

install -pm 755 epg2html ${PKG}/usr/bin/ || exit 1
mkdir -p ${PKG}/usr/sbin
mv ${PKG}/usr/bin/vdr ${PKG}/usr/sbin/  || exit 1

mkdir -p ${PKG}/${configdir}/plugins

mkdir -p ${PKG}/etc/default/vdr-plugins.d

mkdir -p ${PKG}/${vardir}/themes
touch ${PKG}/${vardir}/themes/{classic,sttng}-default.theme.new

install -pm 0755 ${CONFDIR}/vdr-runvdr.sh ${PKG}/usr/sbin/runvdr || exit 1
sed -i \
  -e "s|/usr/lib/vdr\b|${plugindir}|" \
  -e "s|/var/run/vdr/|${rundir}/|" \
  -e "s|VDR_PLUGIN_VERSION|${APIVER}|" \
  ${PKG}/usr/sbin/runvdr || exit 1

touch ${PKG}/${videodir}/.update.new

mkdir -p ${PKG}/${plugindir}/bin

sed -e "s|/var/run/vdr/|${rundir}/|" ${CONFDIR}/vdr-shutdown.sh \
  > ${PKG}/${plugindir}/bin/${NAME}-shutdown.sh || exit 1
chmod 0755 ${PKG}/${plugindir}/bin/vdr-shutdown.sh || exit 1

sed -e "s|/var/lib/vdr/video|${videodir}|" -e "s|/etc/vdr/|${configdir}/|" \
  ${CONFDIR}/vdr-moveto.sh > ${PKG}/${plugindir}/bin/vdr-moveto.sh || exit 1
chmod 0755 ${PKG}/${plugindir}/bin/vdr-moveto.sh || exit 1

sed \
  -e "s|/etc/vdr/|${configdir}/|" \
  -e 's|VDR_USER|vdr|' -e 's|VDR_GROUP|video|' \
  ${CONFDIR}/vdr-check-setup.sh > ${PKG}/${plugindir}/bin/vdr-check-setup || exit 1
chmod 0755 ${PKG}/${plugindir}/bin/vdr-check-setup || exit 1

sed \
  -e "s|/var/run/vdr/|${rundir}/|" \
  ${CONFDIR}/vdr-set-wakeup.sh > ${PKG}/${plugindir}/bin/vdr-set-wakeup || exit 1
chmod 0755 ${PKG}/${plugindir}/bin/vdr-set-wakeup || exit 1

mkdir -p ${PKG}/etc/sudoers.d
cat > ${PKG}/etc/sudoers.d/vdr.new <<EOF
# Allow vdr to shut down the system, see vdr-shutdown.sh.

Defaults:vdr    !requiretty
vdr             ALL = (root) NOPASSWD: /sbin/shutdown
EOF
chmod 0760 ${PKG}/etc/sudoers.d
chmod 0440 ${PKG}/etc/sudoers.d/vdr.new

touch ${PKG}/${cachedir}/epg.data.new
mkdir -p ${PKG}/usr/share/vdr/{logos,plugins}
mkdir -p ${PKG}/${rundir}
touch ${PKG}/${rundir}/next-timer.new
mkdir -p ${PKG}/${vardir}

# devel
abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

install -pm 0755 ${CONFDIR}/vdr-config.sh ${PKG}/usr/bin/vdr-config || exit 1
install -pm 0755 newplugin ${PKG}/usr/bin/vdr-newplugin || exit 1
install -pm 0644 Make.{config,global} plugins.mk ${PKG}/usr/lib${LIBDIRSUFFIX}/vdr/ || exit 1
ln -s $(abs2rel /usr/include/vdr/config.h /usr/lib${LIBDIRSUFFIX}/vdr) \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/vdr/ || exit 1

# plugins

make install -C PLUGINS/src/dvbhddevice DESTDIR=${PKG} || exit $?
make install -C PLUGINS/src/dvbsddevice DESTDIR=${PKG} || exit $?
make install -C PLUGINS/src/rcu DESTDIR=${PKG} || exit $?
make install -C PLUGINS/src/skincurses DESTDIR=${PKG} || exit $?

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

for file in dvbhddevice dvbsddevice rcu skincurses ;do 
  install -pm0644 ${CONFDIR}/vdr-${file}.conf ${PKG}/etc/default/vdr-plugins.d/${file}.conf.new || exit 
done

for file in ${PKG}/${configdir}/*.conf ;do
  mv ${file} ${file}.new || exit 1
done

mkdir -p ${PKG}/lib/udev/rules.d
cat > ${PKG}/lib/udev/rules.d/51-vdr.rules <<EOF
# VDR friendly udev rules for DVB and other devices.

# See also *-vdr-remote.rules if using the remote plugin.

# See also /etc/security/console.perms.d/*-vdr.perms and
# https://bugzilla.redhat.com/202132

# DVB devices
KERNEL=="dvb*", GROUP="video", MODE="0660"

# Remote controller, serial port 1 (eg. vdr --rcu=/dev/ttyS0):
#KERNEL=="ttyS0", GROUP="video", MODE="0660"
EOF

mkdir -p 0755 ${PKG}/usr/lib/tmpfiles.d
echo "D ${rundir} 0755 vdr root -" \
  > ${PKG}/usr/lib/tmpfiles.d/vdr.conf || exit 1

mkdir -p ${PKG}/etc/rc.d
sed -e "s|/usr/lib/vdr/|${plugindir}/|" ${CONFDIR}/rc.${NAME} \
  > ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1
chmod 0755 ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

mkdir -p ${PKG}/var/log/setup
install -pm0755 ${CONFDIR}/setup.onlyonce.rc${NAME} \
  ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1

mkdir -p ${PKG}/lib/systemd/system
sed -e "s|/usr/lib/vdr/|${plugindir}/|" \
  -e "s|/usr/share/doc/vdr/|/usr/doc/${NAME}-${VERSION}/|" \
  ${CONFDIR}/vdr.service > ${PKG}/lib/systemd/system/vdr.service || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/${NAME}.new <<EOF
# System configuration for VDR                                       -*- sh -*-

# The "master" options.  Some examples of options you may want to set
# here are -r, -t, and --rcu.  See the vdr(1) man page for more info.
#
# The default shutdown script (/usr/lib*/vdr/bin/vdr-shutdown.sh) needs
# sudo(8) configuration to work as expected, see the script source for
# details.
#
VDR_OPTIONS=(--vfat --shutdown=vdr-shutdown.sh)

# VDR_PLUGIN_ORDER is a space separated list of plugins that should be
# loaded in a specific order.  This affects eg. the order the plugins'
# menu entries are displayed OSD menus by default.  The plugins in this
# list don't need to be installed, but if they are, they will be loaded
# before other possibly installed plugins.  Note that it is recommended
# to load output plugins before others so that all necessary features are
# present when needed by other plugins at startup/shutdown.
#
VDR_PLUGIN_ORDER="
dxr3
softdevice
softhddevice
streamdev-client
xine
xineliboutput
dvbhddevice
dvbsddevice
tvonscreen
osdteletext
ttxtsubs
osdpip
femon
recstatus
markad
sudoku
weather
weatherng
dvd
externalplayer
mplayer
mp3
muggle
burn
"

# I18N settings.
#
. /etc/sysconfig/i18n 2>/dev/null || :
# LC_TIME affects how dates and times are displayed.
#export LC_TIME=fi_FI.UTF-8

# PATH where to find the internally used executables.
#
PATH="${plugindir}/bin:$PATH"

# How many minutes before a recording should the VDR box wake up?
# Some CI/CAM combinations can take quite a long time to initialize, so
# we default to a pretty generous value here.
#
WAKEUP_BEFORE_RECORDING=10

# For debugging: allow vdr to dump core.  Note that depending on the operating
# environment, core dumps from setuid processes may be a security issue.
#
#DAEMON_COREFILE_LIMIT="unlimited"

EOF

for dir in dvbhddevice dvbsddevice rcu skincurses ;do
  cp PLUGINS/src/${dir}/COPYING COPYING.${dir}
  cp PLUGINS/src/${dir}/HISTORY HISTORY.${dir}
  cp PLUGINS/src/${dir}/README README.${dir}
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  CONTRIBUTORS COPYING HISTORY* INSTALL MANUAL README* UPDATE-?.?.0 ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
[ "${SB_DOCS}" = "YES" ] && cp -a PLUGINS.html srcdoc/html/ ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 100 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
 CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^vdr:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':__VARDIR__:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "vdr"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
      -d '__VARDIR__' \
      -u ${USER_ID} \
      -s /bin/false \
      -g video \
      ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
    -c 'Video Disk Recorder' \
    -u $(free_user_id) \
    -g video \
    -s /bin/false \
    -d '__VARDIR__' \
    vdr 2> /dev/null
fi

${CHROOT} /usr/sbin/usermod -a -G audio,cdrom,dialout vdr 2> /dev/null

EOF

sed -i -e "s|__VARDIR__|${vardir}|" ${PKG}/install/doinst.sh 

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.${NAME} -a -r etc/rc.d/rc.${NAME}.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ var/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ var/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<EOF
# Fix permissions
\${CHROOT} /bin/chown -R vdr.video /${configdir#\/}

if [ -x bin/systemctl ] ; then
  \${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{conf,patches}
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${SNAPUPDATE} ${CWD}/${FEDORADIST} ${CWD}/*.package \
    ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/conf/*.* \
    ${SBDIR}/conf/
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HUSER}\" = 1 ] && /bin/chown -R vdr.video ./${configdir} ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
