#!/bin/sh
#-- kde-workspace for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ kde-workspace.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.kde.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=kde-workspace
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.11.20}
KAPPVER=${KAPPVER:-15.04.2}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/kde/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-tgz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable support for slack-artwork
SB_SLKART=${SB_SLKART:-NO}
# Set to YES to enable pam support
SB_PAM=${SB_PAM:-YES}
# Set to YES to systemd session support (drops ConsoleKit support/needs systemd with PAM)
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SB_PAMD_DIR=${CWD}/pamd

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KDE=${MIRROR_KDE:-http://download.kde.org}
DL_URL="${MIRROR_KDE}/stable/applications/${KAPPVER}/src/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../KDE.options ] && source ../KDE.options
[ -r /etc/profile.d/kde4.sh ] && source /etc/profile.d/kde4.sh

_kde4_prefix=${_kde4_prefix:-/usr}
_kde4_sysconfdir=${_kde4_sysconfdir:-/etc/kde}
_kde4_libdir=${_kde4_libdir:-/usr/lib${LIBDIRSUFFIX}}
_kde4_libexecdir=${_kde4_libexecdir:-/usr/libexec/kde4}
_kde4_datadir=${_kde4_datadir:-/usr/share}
_kde4_sharedir=${_kde4_sharedir:-/usr/share}
_kde4_iconsdir=${_kde4_iconsdir:-${_kde4_sharedir}/icons}
_kde4_configdir=${_kde4_configdir:-${_kde4_sharedir}/config}
_kde4_appsdir=${_kde4_appsdir:-${_kde4_sharedir}/kde4/apps}
_kde4_docdir=${_kde4_docdir:-${_kde4_prefix}/doc}
_kde4_htmldir=${_kde4_htmldir:-${_kde4_docdir}/HTML}
_kde4_bindir=${_kde4_bindir=:-${_kde4_prefix}/bin}
_kde4_sbindir=${_kde4_sbindir:-${_kde4_prefix}/sbin}
_kde4_includedir=${_kde4_includedir:-${_kde4_prefix}/include/kde4}
_kde4_buildtype=${_kde4_buildtype:-release}
_kde4_macros_api=${_kde4_macros_api:-2}

_qt4_prefix=${_qt4_prefix:-/usr/lib${LIBDIRSUFFIX}/qt4}
_qt4_bindir=${_qt4_bindir:-${_qt4_prefix}/bin}
_qt4_qmake=${_qt4_qmake:-${_qt4_bindir}/qmake}

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# replace it with our known good, patched copy
cp -pf ${CWD}/startkde.cmake startkde.cmake || exit 1

unset SB_CKOPTS SB_PAMOPTS SB_SYSTEMDOPTS
if [ "${SB_SYSTEMD}" = "YES" ] ;then
  SB_PAM=YES
  SB_SYSTEMDOPTS=ON
  SB_CKOPTS=OFF
fi
[ "${SB_PAM}" = "YES" ] && SB_PAMOPTS=ON

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
export FFLAGS="${SLKCFLAGS}"

mkdir -p build
( cd build || exit 1

  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_INSTALL_PREFIX:PATH=${_kde4_prefix} \
    -DSYSCONF_INSTALL_DIR:PATH=${_kde4_sysconfdir} \
    -DINCLUDE_INSTALL_DIR:PATH=${_kde4_includedir} \
    -DLIB_INSTALL_DIR:PATH=${_kde4_libdir} \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DLIBEXEC_INSTALL_DIR:PATH=${_kde4_libexecdir} \
    -DDATA_INSTALL_DIR:PATH=${_kde4_appsdir} \
    -DMAN_INSTALL_DIR:PATH=/usr/man \
    -DCMAKE_BUILD_TYPE=${_kde4_buildtype} \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DCMAKE_SKIP_RPATH:BOOL=ON \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DBUILD_KCM_RANDR:BOOL=ON \
    -DWITH_PAM:BOOL=${SB_PAMOPTS:-OFF} \
    -DKDE4_KDM_PAM_SERVICE=kdm \
    -DKDE4_KCHECKPASS_PAM_SERVICE=kcheckpass \
    -DKDE4_KSCREENSAVER_PAM_SERVICE=kscreensaver \
    -DWITH_CkConnector:BOOL=${SB_CKOPTS:-ON} \
    -DWITH_Systemd:BOOL=${SB_SYSTEMDOPTS:-OFF} \
    -DWITH_Googlegadgets:BOOL=OFF \
    -DWITH_libgps:BOOL=OFF \
    -DWITH_Xmms:BOOL=OFF \
    || exit 1

  make -j${NJOBS} || make || exit 1
  make install/fast DESTDIR=${PKG} || exit 1

) || exit 1

if [ "${_kde4_sysconfdir}" != "/etc" ] && [ -d ${PKG}/${_kde4_sysconfdir}/dbus-1 ] ;then
  mv ${PKG}/${_kde4_sysconfdir}/dbus-1 ${PKG}/etc/ || exit 1
fi

## unpackaged files

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

rm -f ${PKG}/${_kde4_iconsdir}/icons/hicolor/index.theme

mv ${PKG}/${_kde4_sysconfdir}/ksysguarddrc \
  ${PKG}/${_kde4_sysconfdir}/ksysguarddrc.new || exit 1

mkdir -p ${PKG}/${_kde4_sysconfdir}/env
# freedesktop environment variables
cat > ${PKG}/${_kde4_sysconfdir}/env/env.sh.new <<'EOF'
# freedesktop environment variables

if  [ -z "${XDG_CONFIG_DIRS}" ]; then
  XDG_CONFIG_DIRS="/etc/kde/xdg:/etc/xdg"
else
  XDG_CONFIG_DIRS="/etc/kde/xdg:/etc/xdg:${XDG_CONFIG_DIRS}"
fi
export XDG_CONFIG_DIRS

# XDG_DATA_DIRS
if [ -z "${XDG_DATA_DIRS}" ] ; then
   XDG_DATA_DIRS=/usr/share/kde-settings/kde-profile/default/share:/usr/local/share:/usr/share
   export XDG_DATA_DIRS
fi

if [ -z "${XDG_MENU_PREFIX}" ] ; then
  XDG_MENU_PREFIX="kde4-"
  export XDG_MENU_PREFIX
fi
EOF
chmod 0755 ${PKG}/${_kde4_sysconfdir}/env/env.sh.new

cat > ${PKG}/${_kde4_sysconfdir}/env/gpg-agent.sh.new <<'EOF'
#!/bin/sh

GPG_AGENT=/usr/bin/gpg-agent
## Run gpg-agent only if not already running, and available
if [ -x "${GPG_AGENT}" ] ; then

  # check validity of GPG_SOCKET (in case of session crash)
  GPG_AGENT_INFO_FILE=${HOME}/.gpg-agent-info
  if [ -f "${GPG_AGENT_INFO_FILE}" ]; then
    GPG_AGENT_PID=`cat ${GPG_AGENT_INFO_FILE} | cut -f2 -d:`
    GPG_PID_NAME=`ps -p ${GPG_AGENT_PID} -o comm=`
    if [ ! "x${GPG_PID_NAME}" = "xgpg-agent" ]; then
      rm -f "${GPG_AGENT_INFO_FILE}" 2>&1 >/dev/null
    else
       GPG_SOCKET=`cat "${GPG_AGENT_INFO_FILE}" | cut -f1 -d: | cut -f2 -d=`
       if ! test -S "${GPG_SOCKET}" -a -O "${GPG_SOCKET}" ; then
         rm -f "${GPG_AGENT_INFO_FILE}" 2>&1 >/dev/null
       fi
    fi
    unset GPG_AGENT_PID GPG_SOCKET GPG_PID_NAME
  fi

  if [ -f "${GPG_AGENT_INFO_FILE}" ]; then
    eval "$(cat \"${GPG_AGENT_INFO_FILE}\")"
    eval "$(cut -d= -f 1 < \"${GPG_AGENT_INFO_FILE}\" | xargs echo export)"
    export GPG_TTY=$(tty)
  else
    eval "$(${GPG_AGENT} -s --daemon --write-env-file ${GPG_OPTIONS})"
  fi

fi
EOF
chmod 0755 ${PKG}/${_kde4_sysconfdir}/env/gpg-agent.sh.new || exit 1

mkdir ${PKG}/${_kde4_sysconfdir}/shutdown
cat > ${PKG}/${_kde4_sysconfdir}/shutdown/gpg-agent-shutdown.sh.new <<'EOF'
#!/bin/sh

## The nice way
if test -n "${GPG_AGENT_INFO}"; then
  GPG_AGENT_PID=`echo ${GPG_AGENT_INFO} | cut -d: -f2` && kill ${GPG_AGENT_PID} ||:
  unset GPG_AGENT_INFO
fi

## The not so nice way
## NOTE: a root login will kill *all* users' gpg-agents
#killall gpg-agent

## clean/remove .gpg-agent-info
rm -f $HOME/.gpg-agent-info
EOF
chmod 0755 ${PKG}/${_kde4_sysconfdir}/shutdown/gpg-agent-shutdown.sh.new || exit 1

# From Fedora, fedora-plasma-cache.sh
# fedora bits renamed
cat > ${PKG}/${_kde4_sysconfdir}/env/slk-plasma-cache.sh.new <<'EOF'
#!/bin/sh

if [ "`kreadconfig --file slk-plasma-cacherc --group General --key FirstRun --default true`" = "true" ]; then
  rm -fv "`kde4-config --path cache`/"*.kcache
  rm -fv "`kde4-config --path cache`/"plasma-svgelements-*
  kwriteconfig --file slk-plasma-cacherc --group General --key FirstRun --type bool false
fi
EOF
chmod 0755 ${PKG}/${_kde4_sysconfdir}/env/slk-plasma-cache.sh.new || exit 1

# xsession support
mkdir -p ${PKG}/usr/share/xsessions
mv ${PKG}/${_kde4_appsdir}/kdm/sessions/kde-plasma.desktop \
  ${PKG}/${_kde4_appsdir}/kdm/sessions/kde-plasma-safe.desktop \
  ${PKG}/usr/share/xsessions/
rm -rf ${PKG}/${_kde4_appsdir}/kdm/sessions/

mkdir -p ${PKG}/var/lib/kdm
mkdir -p ${PKG}/var/run/kdm
mkdir -p ${PKG}/var/run/xdmctl
mkdir -p ${PKG}/var/spool/gdm

chmoid 0711 ${PKG}/var/run/kdm ${PKG}/var/run/xdmctl

# nuke, use external kde-settings-kdm
rm -rf ${PKG}/${_kde4_configdir}/kdm

# own %{_kde4_appsdir}/kdm/faces and set default user image
mkdir -p ${PKG}/${_kde4_appsdir}/kdm/faces
ln -sf ../pics/users/default1.png ${PKG}/${_kde4_appsdir}/kdm/faces/.default.face.icon

# Move the KDM files someplace FHS compliant:
( cd ${PKG}/usr/share/config ; ln -sf ../../../${_kde4_sysconfdir#\/}/kdm . )

# Setup config files for KDM:
${PKG}/usr/bin/genkdmconf --no-old --no-old-scripts --no-backup --in ${PKG}/${_kde4_sysconfdir}/kdm
# Not allowing root to login at the console is just plain silly.  If they have physical access to
# the machine, what's the point of trying to stop this?  Even the kdmrc file says this is supposed
# to be the default.
sed -i \
  -e 's|^#AuthDir=.*$|AuthDir=/var/run/kdm|g' \
  -e 's|^#ForceUserAuthDir=.*$|ForceUserAuthDir=true|g' \
  -e 's|AllowRootLogin=false|AllowRootLogin=true|g' \
  -e 's|^PidFile=.*$|PidFile=/var/run/kdm/kdm.pid|g' \
  -e 's|^#BackgroundCfg=.*$|BackgroundCfg=/var/lib/kdm/backgroundrc|g' \
  -e "s|${_kde4_configdir}|${_kde4_sysconfdir}|g" \
  ${PKG}/${_kde4_sysconfdir}/kdm/kdmrc

if [ "${SB_SLKART}" = "YES" ] ;then
  mv ${PKG}/${_kde4_sysconfdir}/kdm/kdmrc ${PKG}/${_kde4_sysconfdir}/kdm/kdmrc.orig
  mv ${PKG}/${_kde4_sysconfdir}/kdm/backgroundrc ${PKG}/${_kde4_sysconfdir}/kdm/backgroundrc.orig
else
  mv ${PKG}/${_kde4_sysconfdir}/kdm/kdmrc ${PKG}/${_kde4_sysconfdir}/kdm/kdmrc.new
fi
rm -f ${PKG}/${_kde4_sysconfdir}/kdm/README

mkdir -p ${PKG}/usr/lib/tmpfiles.d
cat > ${PKG}/usr/lib/tmpfiles.d/kdm.conf <<EOF
d /run/kdm/ 0711 root root -
d /run/xdmctl 0711 root root -
EOF

mkdir -p ${PKG}/etc/X11/xinit
install -m0755 ${CWD}/xinit/xinitrc.kde \
  ${PKG}/etc/X11/xinit/xinitrc.kde

mkdir -p ${PKG}/etc/X11/xinit/xinitrc.d

mv ${PKG}/${_kde4_sysconfdir}/kdm/Xsession \
   ${PKG}/${_kde4_sysconfdir}/kdm/Xsession.orig
cat ${CWD}/config/Xsession > ${PKG}/${_kde4_sysconfdir}/kdm/Xsession.new
chmod 0755 ${PKG}/${_kde4_sysconfdir}/kdm/Xsession*
rm -f ${PKG}/${_kde4_sysconfdir}/kdm/Xsession

if [ "${SB_PAM}" = "YES" ] ; then
  mkdir -p ${PKG}/etc/pam.d
  rm -f ${PKG}/etc/pam.d/*
  for pamd in kcheckpass kdm-np kdm kscreensaver; do
     cp -f ${SB_PAMD_DIR}/${pamd} \
      ${PKG}/etc/pam.d/${pamd}.new || exit 1
  done
fi

mkdir -p ${PKG}/lib/systemd/system
install -pm644 ${CWD}/config/*.service \
  ${PKG}/lib/systemd/system/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING* README ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
sed -e "s|_VERSION_|${VERSION}|g" ${CWD}/slack-required \
  > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/update-mime-database ]; then
  \${CHROOT} /usr/bin/update-mime-database /usr/share/mime >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create ${_kde4_iconsdir}/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/touch --no-create ${_kde4_iconsdir}/oxygen >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache ${_kde4_iconsdir}/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache ${_kde4_iconsdir}/oxygen >/dev/null 2>&1
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms
if [ -r ${_kde4_sysconfdir#\/}/env/env.sh -a -r ${_kde4_sysconfdir#\/}/env/env.sh.new ]; then
  chmod --reference=${_kde4_sysconfdir#\/}/env/env.sh ${_kde4_sysconfdir#\/}/env/env.sh.new
fi
if [ -r ${_kde4_sysconfdir#\/}/env/gpg-agent.sh -a -r ${_kde4_sysconfdir#\/}/env/gpg-agent.sh.new ]; then
  chmod --reference=${_kde4_sysconfdir#\/}/env/gpg-agent.sh ${_kde4_sysconfdir#\/}/env/gpg-agent.sh.new
fi
if [ -r ${_kde4_sysconfdir#\/}/shutdown/gpg-agent-shutdown.sh -a -r ${_kde4_sysconfdir#\/}/shutdown/gpg-agent-shutdown.sh.new ]; then
  chmod --reference=${_kde4_sysconfdir#\/}/shutdown/gpg-agent-shutdown.sh ${_kde4_sysconfdir#\/}/shutdown/gpg-agent-shutdown.sh.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{config,pamd,patches,xinit}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/startkde.cmake ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/config/* \
    ${SBDIR}/config/
  install -m0644 ${SB_PAMD_DIR}/* \
    ${SBDIR}/pamd/
  install -m0644 ${CWD}/xinit/* \
    ${SBDIR}/xinit/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_PAM}\" = \"YES\" ] || /bin/chmod u+s ./${_kde4_libexecdir}/kcheckpass ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
