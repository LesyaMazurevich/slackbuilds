commit b110b14eaec647e569c94d0ed80ba2b8145faadc
Author: Ren√© J.V. Bertin <rjvbertin@gmail.com>
Date:   Fri Jan 9 16:25:56 2015 +0100

    KSharedData Improvements on OS X:
    * Restore use of pthreads (KSDC_THREAD_PROCESS_SHARED_SUPPORTED)
    * Add an emulated posix_fallocate() function from Mozilla source
    
    REVIEW: 121930

diff --git a/kdecore/util/kshareddatacache_p.h b/kdecore/util/kshareddatacache_p.h
index 931de4d..c532110 100644
--- a/kdecore/util/kshareddatacache_p.h
+++ b/kdecore/util/kshareddatacache_p.h
@@ -33,6 +33,10 @@
 
 #include <kdebug.h>
 
+#ifdef __APPLE__
+#include "posix_fallocate_mac.h"
+#endif
+
 // Our debug area, disabled by default
 int ksdcArea();
 
@@ -48,7 +52,7 @@ int ksdcArea();
 #warning "No support for POSIX timeouts -- application hangs are possible if the cache is corrupt"
 #endif
 
-#if defined(_POSIX_THREAD_PROCESS_SHARED) && ((_POSIX_THREAD_PROCESS_SHARED == 0) || (_POSIX_THREAD_PROCESS_SHARED >= 200112L)) && !defined(__APPLE__)
+#if defined(_POSIX_THREAD_PROCESS_SHARED) && ((_POSIX_THREAD_PROCESS_SHARED == 0) || (_POSIX_THREAD_PROCESS_SHARED >= 200112L))
 #include <pthread.h>
 #define KSDC_THREAD_PROCESS_SHARED_SUPPORTED 1
 #endif
@@ -77,7 +81,7 @@ int ksdcArea();
 
 // posix_fallocate is used to ensure that the file used for the cache is
 // actually fully committed to disk before attempting to use the file.
-#if defined(_POSIX_ADVISORY_INFO) && ((_POSIX_ADVISORY_INFO == 0) || (_POSIX_ADVISORY_INFO >= 200112L))
+#if (defined(_POSIX_ADVISORY_INFO) && ((_POSIX_ADVISORY_INFO == 0) || (_POSIX_ADVISORY_INFO >= 200112L))) || defined(__APPLE__)
 #define KSDC_POSIX_FALLOCATE_SUPPORTED 1
 #endif
 
diff --git a/kdecore/util/posix_fallocate_mac.h b/kdecore/util/posix_fallocate_mac.h
new file mode 100644
index 0000000..c417146
--- /dev/null
+++ b/kdecore/util/posix_fallocate_mac.h
@@ -0,0 +1,68 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Mozilla code.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Taras Glek <tglek@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#include <fcntl.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+
+// 20150108 RJVB: created from the OSX-specific code from Mozilla's mozilla::fallocation() function
+// of which the licensing information is copied above.
+
+#ifdef cplusplus
+extern "C" {
+#endif
+
+static int posix_fallocate(int fd, off_t offset, off_t len)
+{
+    fstore_t store = {F_ALLOCATECONTIG, F_PEOFPOSMODE, offset, len};
+    // Try to get a continous chunk of disk space
+    int ret = fcntl(fd, F_PREALLOCATE, &store);
+    if(-1 == ret){
+        // OK, perhaps we are too fragmented, allocate non-continuous
+        store.fst_flags = F_ALLOCATEALL;
+        ret = fcntl(fd, F_PREALLOCATE, &store);
+        if (-1 == ret)
+            return false;
+    }
+    return 0 == ftruncate(fd, len);
+}
+
+#ifdef cplusplus
+}
+#endif
\ No newline at end of file
