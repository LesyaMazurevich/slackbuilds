#!/bin/sh
#-- writerperfect for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ writerperfect.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://libwpd.sourceforge.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=writerperfect
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.9.4}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/libwpd/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --disable-dependency-tracking \
  --disable-static \
  --disable-werror \
  --with-libabw \
  --with-libcdr \
  --with-libe-book \
  --with-libeot \
  --with-libepubgen \
  --with-libetonyek \
  --with-libfreehand \
  --with-libgsf \
  --with-libmspub \
  --with-libmwaw \
  --with-libodfgen \
  --with-libpagemaker \
  --with-libvisio \
  --with-libwps \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit $?

make -j${NJOBS} || make || exit $?
make install DESTDIR=${PKG} || exit $?

export LD_LIBRARY_PATH=$(pwd)/src/lib/.libs${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
help2man -N --no-discard-stderr -n 'convert AbiWord document into EPUB' -o abw2epub.1 ./src/epub/abw2epub || exit 1
help2man -N --no-discard-stderr -n 'convert AbiWord document into ODF' -o abw2odt.1 ./src/odf/abw2odt || exit 1
help2man -N --no-discard-stderr -n 'convert Corel Presentation Exchange file into EPUB' -o cmx2epub.1 ./src/epub/cmx2epub || exit 1
help2man -N --no-discard-stderr -n 'convert Corel Presentation Exchange file into ODF' -o cmx2odg.1 ./src/odf/cmx2odg || exit 1
help2man -N --no-discard-stderr -n 'convert CorelDRAW document into EPUB' -o cdr2epub.1 ./src/epub/cdr2epub || exit 1
help2man -N --no-discard-stderr -n 'convert CorelDRAW document into ODF' -o cdr2odg.1 ./src/odf/cdr2odg || exit 1
help2man -N --no-discard-stderr -n 'convert FreeHand document into EPUB' -o fh2epub.1 ./src/epub/fh2epub || exit 1
help2man -N --no-discard-stderr -n 'convert FreeHand document into ODF' -o fh2odg.1 ./src/odf/fh2odg || exit 1
help2man -N --no-discard-stderr -n 'convert Keynote presentation into EPUB' -o key2epub.1 ./src/epub/key2epub || exit 1
help2man -N --no-discard-stderr -n 'convert Keynote presentation into ODF' -o key2odp.1 ./src/odf/key2odp || exit 1
help2man -N --no-discard-stderr -n 'convert Mac document into EPUB' -o mwaw2epub.1 ./src/epub/mwaw2epub || exit 1
help2man -N --no-discard-stderr -n 'convert Mac document into ODF' -o mwaw2odf.1 ./src/odf/mwaw2odf || exit 1
help2man -N --no-discard-stderr -n 'convert Numbers document into ODF' -o numbers2ods.1 ./src/odf/numbers2ods || exit 1
help2man -N --no-discard-stderr -n 'convert Pages document into EPUB' -o pages2epub.1 ./src/epub/pages2epub || exit 1
help2man -N --no-discard-stderr -n 'convert Pages document into ODF' -o pages2odt.1 ./src/odf/pages2odt || exit 1
help2man -N --no-discard-stderr -n 'convert PageMaker document into EPUB' -o pmd2epub.1 ./src/epub/pmd2epub || exit 1
help2man -N --no-discard-stderr -n 'convert PageMaker document into ODF' -o pmd2odg.1 ./src/odf/pmd2odg || exit 1
help2man -N --no-discard-stderr -n 'convert Publisher document into EPUB' -o pub2epub.1 ./src/epub/pub2epub || exit 1
help2man -N --no-discard-stderr -n 'convert Publisher document into ODF' -o pub2odg.1 ./src/odf/pub2odg || exit 1
help2man -N --no-discard-stderr -n 'convert Visio document into EPUB' -o vsd2epub.1 ./src/epub/vsd2epub || exit 1
help2man -N --no-discard-stderr -n 'convert Visio document into ODF' -o vsd2odg.1 ./src/odf/vsd2odg || exit 1
help2man -N --no-discard-stderr -n 'convert Visio stencil into EPUB' -o vss2epub.1 ./src/epub/vss2epub || exit 1
help2man -N --no-discard-stderr -n 'convert Visio stencil into ODF' -o vss2odg.1 ./src/odf/vss2odg || exit 1
help2man -N --no-discard-stderr -n 'convert WordPerfect document into EPUB' -o wpd2epub.1 ./src/epub/wpd2epub || exit 1
help2man -N --no-discard-stderr -n 'convert WordPerfect document into ODF' -o wpd2odt.1 ./src/odf/wpd2odt || exit 1
help2man -N --no-discard-stderr -n 'convert WordPerfect graphics into EPUB' -o wpg2epub.1 ./src/epub/wpg2epub || exit 1
help2man -N --no-discard-stderr -n 'convert WordPerfect graphics into ODF' -o wpg2odg.1 ./src/odf/wpg2odg || exit 1
help2man -N --no-discard-stderr -n 'convert Works document into EPUB' -o wps2epub.1 ./src/epub/wps2epub || exit 1
help2man -N --no-discard-stderr -n 'convert Works document into ODF' -o wps2odt.1 ./src/odf/wps2odt || exit 1
help2man -N --no-discard-stderr -n 'convert Works spreadsheet into ODF' -o wks2ods.1 ./src/odf/wks2ods || exit 1
help2man -N --no-discard-stderr -n 'convert e-book into EPUB' -o ebook2epub.1 ./src/epub/ebook2epub || exit 1
help2man -N --no-discard-stderr -n 'convert e-book into ODF' -o ebook2odt.1 ./src/odf/ebook2odt || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/man/man1
install -m 0644 *2epub.1 *2od?.1 ${PKG}/usr/man/man1/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING* README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
