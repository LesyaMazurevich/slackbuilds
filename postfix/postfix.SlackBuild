#!/bin/sh
#-- postfix for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ postfix.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.postfix.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=postfix
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.0.2}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable LDAP support
SB_LDAP=${SB_LDAP:-YES}
# Set to YES to enable PCRE support
SB_PCRE=${SB_PCRE:-YES}
# Set to YES to enable LDAP support
SB_MYSQL=${SB_MYSQL:-YES}
# Set to YES to enable postgresql support
SB_PGSQL=${SB_PGSQL:-YES}
# Set to YES to enable SASL support
SB_SASL=${SB_SASL:-YES}
# Set to YES to enable TLS support
SB_TLS=${SB_TLS:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

postfix_user=postfix
postfix_group=${postfix_user}
postdrop_group=postdrop
maildrop_group=${postdrop_group}

grep --quiet "^${postfix_group}:" /etc/group && SB_HGROUP=1
grep --quiet "^${postfix_user}:" /etc/passwd && SB_HUSER=1
grep --quiet "^${postdrop_group}:" /etc/group && SB_HGROUP2=1

postfix_config_dir=/etc/postfix
postfix_daemon_dir=/usr/libexec/postfix
postfix_command_dir=/usr/sbin
postfix_queue_dir=/var/spool/postfix
postfix_data_dir=/var/lib/postfix
postfix_doc_dir=/usr/doc/${NAME}-${VERSION}
postfix_sample_dir=${postfix_doc_dir}/samples
postfix_readme_dir=${postfix_doc_dir}/README_FILES

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.sig

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_PF=${MIRROR_PF:-ftp://ftp.porcupine.org/mirrors/postfix-release}
DL_URL="${MIRROR_PF}/official"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

for f in README_FILES/TLS_{LEGACY_,}README; do
  iconv -f iso8859-1 -t utf8 -o ${f}{_,} &&
    touch -r ${f}{,_} && mv -f ${f}{_,}
done

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|-L/usr/local/lib -licuuc|-licuuc|g' makedefs || exit 1

CCARGS="-fPIC"
AUXLIBS=

if [ "${SB_LDAP}" = "YES" ] ;then
  CCARGS="${CCARGS} -DHAS_LDAP -DLDAP_DEPRECATED=1"
  AUXLIBS="${AUXLIBS} -L/usr/lib${LIBDIRSUFFIX} -lldap -llber"
fi
if [ "${SB_PCRE}" = "YES" ] ;then
  # -I option required for pcre 3.4 (and later?)
  CCARGS="${CCARGS} -DHAS_PCRE -I/usr/include/pcre"
  AUXLIBS="${AUXLIBS} -lpcre"
fi
if [ "${SB_MYSQL}" = "YES" ] ;then
  CCARGS="${CCARGS} -DHAS_MYSQL -I/usr/include/mysql"
  AUXLIBS="${AUXLIBS} -L/usr/lib${LIBDIRSUFFIX}/mysql -lmysqlclient -lm"
fi
if [ "${SB_PGSQL}" = "YES" ] ;then
  CCARGS="${CCARGS} -DHAS_PGSQL -I/usr/include/pgsql"
  AUXLIBS="${AUXLIBS} -lpq"
fi
if [ "${SB_SASL}" = "YES" ] ;then
  CCARGS="${CCARGS} -DUSE_SASL_AUTH -DUSE_CYRUS_SASL -I/usr/include/sasl"
  AUXLIBS="${AUXLIBS} -L/usr/lib${LIBDIRSUFFIX}/sasl2 -lsasl2"
fi
if [ "${SB_TLS}" = "YES" ] ;then
  if pkg-config openssl ; then
    CCARGS="${CCARGS} -DUSE_TLS $(pkg-config --cflags openssl)"
    AUXLIBS="${AUXLIBS} $(pkg-config --libs openssl)"
  else
    CCARGS="${CCARGS} -DUSE_TLS -I/usr/include/openssl"
    AUXLIBS="${AUXLIBS} -lssl -lcrypto"
  fi
fi

CCARGS="${CCARGS} -DDEF_CONFIG_DIR=\\\"${postfix_config_dir}\\\""
CCARGS="${CCARGS} $(getconf LFS_CFLAGS)"

AUXLIBS="${AUXLIBS} -pie -Wl,-z,relro ${LDFLAGS}"

make -f Makefile.init makefiles CCARGS="${CCARGS}" AUXLIBS="${AUXLIBS}" \
  DEBUG="" OPT="${SLKCFLAGS} -Wno-comment" || exit 1

make -j${NJOBS} || make || exit 1

# Move stuff around so we don't conflict with sendmail
for i in man1/mailq.1 man1/newaliases.1 man1/sendmail.1 man5/aliases.5 man8/smtpd.8; do
  dest=$(echo $i | sed 's|\.[1-9]$|.postfix\0|')
  mv man/${i} man/${dest}
  sed -i "s|^\.so $i|\.so $dest|" man/man?/*.[1-9]
done

sh postfix-install -non-interactive \
  install_root=${PKG} \
  config_directory=${postfix_config_dir} \
  daemon_directory=${postfix_daemon_dir} \
  command_directory=${postfix_command_dir} \
  queue_directory=${postfix_queue_dir} \
  data_directory=${postfix_data_dir} \
  sendmail_path=${postfix_command_dir}/sendmail.postfix \
  newaliases_path=/usr/bin/newaliases.postfix \
  mailq_path=/usr/bin/mailq.postfix \
  mail_owner=${postfix_user} \
  setgid_group=${maildrop_group} \
  manpage_directory=/usr/man \
  sample_directory=${postfix_sample_dir} \
  readme_directory=${postfix_readme_dir} || exit 1

for conf in \
  access canonical generic header_checks main.cf \
  master.cf relocated transport virtual
do
  mv ${PKG}/${postfix_config_dir}/${conf} ${PKG}/${postfix_config_dir}/${conf}.new || exit 1
done

mkdir -p ${PKG}/etc/rc.d
install -pm0755 ${CWD}/rc.${NAME} ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${NAME}.gz \
 > ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/${NAME}.service ${PKG}/lib/systemd/system/ || exit 1

cat > ${PKG}/usr/libexec/postfix/aliasesdb <<'EOF'
#!/bin/bash

ALIASESDB_STAMP=/var/lib/misc/postfix.aliasesdb-stamp

make_aliasesdb() {
  if [ "$(/usr/sbin/postconf -h alias_database)" == "hash:/etc/aliases" ]
  then
    # /etc/aliases.db may be used by other MTA, make sure nothing
    # has touched it since our last newaliases call
    [ /etc/aliases -nt /etc/aliases.db ] ||
      [ "${ALIASESDB_STAMP}" -nt /etc/aliases.db ] ||
      [ "${ALIASESDB_STAMP}" -ot /etc/aliases.db ] || return
    /usr/bin/newaliases
    touch -r /etc/aliases.db "${ALIASESDB_STAMP}"
  else
    /usr/bin/newaliases
  fi
}

make_aliasesdb

exit 0
EOF
chmod 0755 ${PKG}/usr/libexec/postfix/aliasesdb

install -c auxiliary/rmail/rmail ${PKG}/usr/bin/rmail.postfix || exit 1

for i in active bounce corrupt defer deferred flush incoming private saved maildrop public pid saved trace; do
  mkdir -p ${PKG}/${postfix_queue_dir}/${i}
done

# install performance benchmark tools by hand
for i in smtp-sink smtp-source ; do
  install -c -m 755 bin/${i} ${PKG}/${postfix_command_dir}/ || exit 1
  install -c -m 755 man/man1/${i}.1 ${PKG}/usr/man/man1/ || exit 1
done
sed -i "s#${postfix_config_dir}\(/bounce\.cf\.default\)#${postfix_doc_dir}\1#" \
  ${PKG}/usr/man/man5/bounce.5

sed -i -r "s#(/man[158]/.*.[158]):f#\1.gz:f#" ${PKG}/etc/postfix/postfix-files

cat ${PKG}/etc/postfix/postfix-files || exit 1

if [ "${SB_SASL}" = "YES" ] ;then

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/sasl2 
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/sasl2/smtpd.conf.new <<EOF
pwcheck_method: saslauthd
mech_list: plain login
EOF

fi

# install qshape
mantools/srctoman - auxiliary/qshape/qshape.pl > qshape.1 || exit 1
install -c qshape.1 ${PKG}/usr/man/man1/qshape.1 || exit 1
install -c auxiliary/qshape/qshape.pl ${PKG}/${postfix_command_dir}/qshape || exit 1

# remove alias file
rm -f ${PKG}/${postfix_config_dir}/aliases

mkdir -p ${PKG}/var/lib/misc
touch ${PKG}/var/lib/misc/postfix.aliasesdb-stamp

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

for file in active bounce corrupt defer deferred flush hold incoming saved trace private
do
  chmod 0700 ${PKG}/${postfix_queue_dir}/${file}
done

chmod 0700 ${postfix_data_dir}
chmod 0730 ${PKG}/${postfix_queue_dir}/maildrop
chmod 0710 ${PKG}/${postfix_queue_dir}/public


defwrapper(){
  cat > $1 <<'EOF'
#!/bin/sh
# mta wrapper

[ -e /etc/default/mta-default ] && . /etc/default/mta-default
DEF_MTA=${DEF_MTA:-postfix}

for i in sendmail mailq newaliases rmail; do
  if ! [ -x /usr/libexec/${DEF_MTA}/${i} ] ; then
    echo "/usr/libexec/${DEF_MTA}/${i} is not executable or not exists"
    echo '/etc/default/mta-default is correct?'
    exit 1
  fi
done

exec /usr/libexec/${DEF_MTA}/$(basename $0) ${1+"$@"}

EOF
chmod 0755 $1
}

mv ${PKG}/usr/sbin/sendmail.postfix ${PKG}/usr/libexec/${NAME}/sendmail
ln -s ../libexec/${NAME}/sendmail ${PKG}/usr/sbin/sendmail.postfix || exit 1
defwrapper ${PKG}/usr/sbin/sendmail.new || exit 1
for i in mailq newaliases rmail; do
  ln -s sendmail ${PKG}/usr/libexec/${NAME}/${i}
  rm -f ${PKG}/usr/bin/${i}.postfix
  ln -s ../libexec/${NAME}/${i} ${PKG}/usr/bin/${i}.postfix || exit 1
  defwrapper ${PKG}/usr/bin/${i}.new || exit 1
done

# create /usr/lib/sendmail
mkdir -p ${PKG}/usr/lib
ln -sf ../libexec/${NAME}/sendmail ${PKG}/usr/lib/sendmail.postfix || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/mta-default.new <<EOF
# Set default MTA
DEF_MTA=postfix
EOF

rm -f ${PKG}/${postfix_config_dir}/{TLS_,}LICENSE

# Add a documentation directory:
mkdir -p ${DOCDIR}/examples{,/chroot-setup}
cp -a \
  COMPATIBILITY LICENSE TLS_ACKNOWLEDGEMENTS TLS_LICENSE ${CWD}/ChangeLog.SB \
  conf/{main,bounce}.cf.default ${DOCDIR}/
cp -pr examples/{qmail-local,smtpd-policy} ${DOCDIR}/examples/
cp -p examples/chroot-setup/LINUX2 ${DOCDIR}/examples/chroot-setup/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 100 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
 CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up groups.
if ! grep --quiet '^_postfix_user_:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            _postfix_user_ 2> /dev/null
fi
if ! grep --quiet '^_postdrop_group_:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            _postdrop_group_ 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^_postfix_user_:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':_postfix_queue_dir_:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "_postfix_user_"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
            -d '_postfix_queue_dir_' \
            -u ${USER_ID} \
            -s /bin/false \
            -g _postfix_group_ \
            -G mail \
            ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
            -c 'Postfix' \
            -u $(free_user_id) \
            -g _postfix_group_ \
            -s /bin/false \
            -d '_postfix_queue_dir_' \
            -G mail \
            _postfix_user_ 2> /dev/null
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.${NAME} -a -r etc/rc.d/rc.${NAME}.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ usr/sbin/ usr/bin/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find usr/lib${LIBDIRSUFFIX}/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find usr/sbin/ usr/bin/ -name '*.new' -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ var/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<EOF
# Fix permissions
for file in active bounce corrupt defer deferred flush hold incoming saved trace private
do
  \${CHROOT} /bin/chown _postfix_user_.root ${postfix_queue_dir}/\${file}
  \${CHROOT} /bin/chmod 0700 ${postfix_queue_dir}/\${file}
done

\${CHROOT} /bin/chown _postfix_user_.root ${postfix_data_dir}

\${CHROOT} /bin/chown _postfix_user_._maildrop_group_ ${postfix_queue_dir}/maildrop
\${CHROOT} /bin/chmod 0730 ${postfix_queue_dir}/maildrop

\${CHROOT} /bin/chown _postfix_user_._maildrop_group_ ${postfix_queue_dir}/public
\${CHROOT} /bin/chmod 0710 ${postfix_queue_dir}/public

for file in postdrop postqueue
do
  \${CHROOT} /bin/chown root._maildrop_group_ ${postfix_command_dir}/\${file}
  \${CHROOT} /bin/chmod 2755 ${postfix_command_dir}/\${file}
done

EOF

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF


sed -i \
  -e "s|_postfix_user_|${postfix_user}|g" \
  -e "s|_postfix_group_|${postfix_group}|g" \
  -e "s|_postdrop_group_|${postdrop_group}|g" \
  -e "s|_maildrop_group_|${maildrop_group}|g" \
  -e "s|_postfix_queue_dir_|${postfix_queue_dir}|g" \
  ${PKG}/install/doinst.sh || exit 1

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/rc.${NAME} ${CWD}/setup.onlyonce.rc*.gz \
    ${CWD}/${NAME}.service ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HUSER}\" = 1 ] && /bin/chown ${postfix_user}.root ./${postfix_queue_dir}/{active,bounce,corrupt,defer,deferred} ;
  [ \"${SB_HUSER}\" = 1 ] && /bin/chown ${postfix_user}.root ./${postfix_queue_dir}/{flush,hold,incoming,saved,trace,private} ;
  [ \"${SB_HUSER}\" = 1 ] && /bin/chown ${postfix_user}.root ./${postfix_data_dir} ;
  [ \"${SB_HUSER}\" = 1 ] && [ \"${SB_HGROUP2}\" = 1 ] && /bin/chown ${postfix_user}.${maildrop_group} ./${postfix_queue_dir}/{maildrop,public} ;
  [ \"${SB_HGROUP2}\" = 1 ] && /bin/chown root.${maildrop_group} ./${postfix_command_dir}/{postdrop,postqueue} ;
  [ \"${SB_HGROUP2}\" = 1 ] && /bin/chmod 2755 ./${postfix_command_dir}/{postdrop,postqueue} ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
