#!/bin/sh
#-- sdmkun for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ sdmkun.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2012 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://shinh.skr.jp/sdmkun/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=sdmkun
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.5.8}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}
SRCARCHIVE=${SRCDIR}-${VERSION}.zip

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://shinh.skr.jp/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
  [ "${SLKTARGET}" = "x86_64" ] && SLKTARGET=i586
  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
unzip ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf src.tar.bz2 || exit 1

chmod -R u+w,go+r-w,a-s .

sed -i 's/\r//' *.txt user/*.bml bosses.d/*.xml || exit 1

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e "s|bmp/|/usr/share/${NAME}/bmp/|g" src/conf.h || exit 1
sed -i -e "/DIR/s|bmp|/usr/share/${NAME}/bmp|g" data/Config.dat || exit 1
sed -i -e "s|bosses.d/|/usr/share/${NAME}/bosses.d/|g" \
  src/{bulletinfo,enemy}.cc bosses.d/main.act || exit 1
sed -i \
  -e "s|data/|/usr/share/${NAME}/data/|g" \
  -e "s|shots/|/usr/share/${NAME}/shots/|g" \
  src/{bulletinfo,select}.cc || exit 1
sed -i -e "s|fonts/|/usr/share/${NAME}/fonts/|g" src/game.cc || exit 1
#sed -i -e "s|model/|/usr/share/${NAME}/model/|g" src/select.cc || exit 1
sed -i -e "s|user/|/usr/share/${NAME}/user/|g" src/{bulletinfo,conf}.cc || exit 1
sed -i -e "/opendir/s|user|/usr/share/${NAME}/user|g" src/bulletinfo.cc || exit 1

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

( cd src
  make -j${NJOBS} || make || exit 1
) || exit 1

mkdir -p ${PKG}/usr/libexec
install -m0755 src/${NAME} ${PKG}/usr/libexec/ || exit 1

mkdir -p ${PKG}/usr/share/${NAME}
cp -r bmp bosses.d data fonts inspection model save shots user \
  ${PKG}/usr/share/${NAME}/ || exit 1

# Wrapper
mkdir -p ${PKG}/usr/bin
cat > ${PKG}/usr/bin/${NAME} <<'EOF'
#!/bin/sh

SDMKUNDATA=/usr/share/sdmkun

mkdir -p ~/.config/sdmkun
cd ~/.config/sdmkun || exit 1
cleanlinks
mkdir -p inspection model replay save

#shopt -s nullglob

if [[ -d "${SDMKUNDATA}" ]] ; then

  if [[ -d "${SDMKUNDATA}/inspection" ]] ; then
    for inspection in $(find "${SDMKUNDATA}/inspection"  -maxdepth 1 -type f -printf '%f '); do 
      if [[ ! -e "inspection/${inspection}" ]] ; then 
        cp "${SDMKUNDATA}/inspection/${inspection}" "inspection/${inspection}"
      fi
    done
  fi

  if [[ -d "${SDMKUNDATA}/save" ]] ; then
    for save in $(find "${SDMKUNDATA}/save"  -maxdepth 1 -type f -printf '%f '); do 
      if [[ ! -e "save/${save}" ]] ; then 
        cp "${SDMKUNDATA}/save/${save}" "save/${save}"
      fi
    done
  fi

fi

# execute program (with args)
exec /usr/libexec/sdmkun "$@" 1>~/.config/sdmkun/log
EOF

chmod 0755 ${PKG}/usr/bin/${NAME} || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Name=Shiroi Danmakukun
Comment=Avoid white, blue and red balls.
Exec=${NAME}
Terminal=false
Icon=${NAME}
Type=Application
Categories=Game;ArcadeGame;
EOF

mkdir -p ${PKG}/usr/share/icons/hicolor/48x48/apps
zcat ${CWD}/${NAME}.png.gz > \
     ${PKG}/usr/share/icons/hicolor/48x48/apps/${NAME}.png || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  *.txt *.html *.dtd ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}.png.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches

fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
