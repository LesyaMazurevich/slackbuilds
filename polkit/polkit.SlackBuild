#!/bin/sh
#-- polkit for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ polkit.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://gitweb.freedesktop.org/?p=PolicyKit.git;a=summary

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

SNAPBUILD=${SNAPBUILD:-NO}

NAME=polkit
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.113}
PVER=${PVER:-0.113-1}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

grep --quiet '^polkitd:' /etc/group && SB_HGROUP=1
grep --quiet '^polkitd:' /etc/passwd && SB_HUSER=1

# Set to YES to enable pam support.
SB_PAM=${SB_PAM:-YES}
# Set to YES to force systemd support (drops ConsoleKit support/needs PAM)
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
PSRCARCHIVE=policykit-1_${PVER}.debian.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.freedesktop.org/software/polkit/releases/${SRCARCHIVE}"
MIRROR_DEB=${MIRROR_DEB:-http://ftp.debian.org}
PDL_URL="${MIRROR_DEB}/debian/pool/main/$(echo ${NAME} | sed -e 's/\(.\).*/\1/')/policykit-1/${PSRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${PSRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e '/unix-group/s|:wheel|:adm|g' \
  src/polkitbackend/50-default.rules || exit 1

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  sh autoreconf -ivf || exit $?
fi

unset SB_PAMOPTS SB_SYSTEMDOPTS
if [ "${SB_SYSTEMD}" = "YES" ] ;then
  SB_PAM=YES
else
  SB_SYSTEMDOPTS='--enable-libsystemd-login=no'
fi
[ "${SB_PAM}" = "YES" ] && SB_PAMOPTS='pam'

export CFLAGS="${SLKCFLAGS} -fPIC"
export CXXFLAGS="${SLKCFLAGS} -fPIC"
export LDFLAGS="-pie -Wl,-z,now -Wl,-z,relro ${LDFLAGS}"

./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --disable-static \
  --with-authfw=${SB_PAMOPTS:-shadow} \
  --with-mozjs=mozjs-17.0 \
  --enable-verbose-mode \
  --enable-gtk-doc \
  --enable-introspection \
  --enable-examples \
  --with-os-type=Slackware \
  ${SB_SYSTEMDOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

[ "${SB_RMLA}" = "YES" ] && rm -f ${PKG}/usr/lib*/*.la
rm -f ${PKG}/usr/lib*/polkit-1/extensions/*.la

cp src/polkitagent/polkitagentenumtypes.h \
  ${PKG}/usr/include/polkit-1/polkitagent/ || exit 1

chmod 0700 ${PKG}/etc/polkit-1/rules.d
chmod 0700 ${PKG}/usr/share/polkit-1/rules.d

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mv ${PKG}/etc/polkit-1/rules.d/*.rules \
  ${PKG}/usr/share/polkit-1/rules.d/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README AUTHORS NEWS COPYING HACKING doc/TODO  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 100 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
 CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up groups.
if ! grep --quiet '^polkitd:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
    -g $(free_group_id) \
    polkitd 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^polkitd:' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "polkitd"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
      -d '/' \
      -u ${USER_ID} \
      -s /bin/false \
      -g polkitd \
      ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
    -c 'User for polkitd' \
    -u $(free_user_id) \
    -g polkitd \
    -s /bin/false \
    -d '/' \
    polkitd 2> /dev/null
fi

# Fix permissions

${CHROOT} /bin/chown polkitd.root /etc/polkit-1/rules.d
${CHROOT} /bin/chown polkitd.root /usr/share/polkit-1/rules.d

if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 4755 ./usr/lib/polkit-1/polkit-agent-helper-1 ./usr/bin/pkexec ; 
  [ \"${SB_HUSER}\" = 1 ] && /bin/chown polkitd ./etc/polkit-1/rules.d ./usr/share/polkit-1/rules.d ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
