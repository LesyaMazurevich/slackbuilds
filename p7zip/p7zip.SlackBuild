#!/bin/sh
#-- p7zip for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ p7zip.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://p7zip.sourceforge.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=p7zip
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-9.38.1}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable wxwidgets gui
SB_GUI=${SB_GUI:-YES}
# Set to YES to add kde4 service menus (only with gui enabled)
SB_KDE=${SB_KDE:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}_${VERSION}
SRCARCHIVE=${SRCDIR}_src_all.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../KDE.options ] && source ../KDE.options
[ -r /etc/profile.d/kde4.sh ] && source /etc/profile.d/kde4.sh

_kde4_datadir=${_kde4_datadir:-/usr/share}
_kde4_sharedir=${_kde4_sharedir:-/usr/share}

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|^X-KDE-Priority=TopLevel|#\0|g' GUI/kde4/*.desktop || exit 1

if [ "${ARCH}" = "x86_64" ] ;then
  cp -f makefile.linux_amd64_asm makefile.machine || exit 1
else
  cp -f makefile.linux_x86_asm_gcc_4.X makefile.machine || exit 1
fi

sed -i \
  -e '/^DEST_HOME=/s|=.*$|=/usr|g' \
  -e '/^DEST_BIN=/s|=.*$|=/usr/bin|g' \
  -e "/^DEST_SHARE=/s|=.*$|=/usr/libexec/${NAME}|g" \
  -e "/^DEST_SHARE_DOC=/s|=.*$|=/usr/doc/${NAME}-${VERSION}|g" \
  -e '/^DEST_MAN=/s|=.*$|=/usr/man|g' \
  makefile || exit 1

if [ "${SB_GUI}" = "YES" ] ;then
  make depend || exit $?
fi

make -j${NJOBS} all3 \
  OPTFLAGS="-Wall ${SLKCFLAGS} -fPIC" || exit $?

if [ "${SB_GUI}" = "YES" ] ;then
  ( SLKCFLAGS="$( echo ${SLKCFLAGS} | sed -e 's/ -._FORTIFY_SOURCE=.//' ) -U_FORTIFY_SOURCE"
    make -j${NJOBS} 7zG OPTFLAGS="-Wall ${SLKCFLAGS} -fPIC" || exit $?
    make -j${NJOBS} 7zFM OPTFLAGS="-Wall ${SLKCFLAGS} -fPIC" || exit $?
  ) || exit $?
fi

make install \
  DEST_DIR=${PKG} \
 || exit $?


if [ "${SB_GUI}" = "YES" ] ;then
  install -pm0755 bin/7zG ${PKG}/usr/libexec/${NAME}/ || exit 1
  install -pm0755 bin/7zFM ${PKG}/usr/libexec/${NAME}/ || exit 1
  install -pm0755 GUI/p7zipForFilemanager ${PKG}/usr/bin/ || exit 1
 
cat >> ${PKG}/usr/bin/7zG <<EOF
#!/bin/sh
exec /usr/libexec/${NAME}/7zG "\$@"
EOF
cat >> ${PKG}/usr/bin/7zFM <<EOF
#!/bin/sh
exec /usr/libexec/${NAME}/7zFM "\$@" 1>/dev/null
EOF
  chmod 0755 ${PKG}/usr/bin/7z{G,FM} || exit 1
  find GUI/{Lang,help} -type d -print0 | xargs -0 chmod 0755
  find GUI/{Lang,help} -type f -print0 | xargs -0 chmod 0644
  cp -r GUI/{Lang,help} ${PKG}/usr/libexec/${NAME}/ || exit 1

fi

install -pm0755 contrib/gzip-like_CLI_wrapper_for_7z/p7zip \
  ${PKG}/usr/bin/7zg || exit 1
install -m 0644 contrib/gzip-like_CLI_wrapper_for_7z/man1/p7zip.1 \
  ${PKG}/usr/man/man1/7zg.1 || exit 1
rm -rf contrib/gzip-like_CLI_wrapper_for_7z/{check,p7zip,man1}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

if [ "${SB_GUI}" = "YES" ] ;then

mkdir -p ${PKG}/usr/share/applications
cat >> ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Name=P7ZIP File Manager
Comment=Archiving tool.
Exec=7zFM %f
Icon=${NAME}
Terminal=false
Type=Application
MimeType=application/x-gzip;application/x-tar;application/x-compressed-tar;application/x-bzip-compressed-tar;application/zip;application/x-bzip;application/x-rar;application/x-tarz;application/x-bzip2;application/x-java-archive;application/x-deb;application/x-7z-compressed;application/x-compress;application/x-zip-compressed;application/x-lzma;application/x-servicepack;application/x-xz-compressed-tar;application/x-lzma-compressed-tar;inode/directory;
Categories=GTK;Utility;Archiving;
X-Desktop-File-Install-Version=0.18
EOF

for res in 16 32 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -pm0644 GUI/${NAME}_${res}.png ${dir}/${NAME}.png || exit 1
done 

  if [ "${SB_KDE}" = "YES" ] ;then
    mkdir -p ${PKG}/${_kde4_datadir}/kde4/services/ServiceMenus
    install -pm0644 GUI/kde4/p7zip_{compress,extract}.desktop \
      ${PKG}/${_kde4_datadir}/kde4/services/ServiceMenus/ || exit 1
  fi
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README TODO contrib/ ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
