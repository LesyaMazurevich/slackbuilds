#!/bin/sh
#-- boost for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ boost.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.boost.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=boost
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.58.0}
SVER=$(echo ${VERSION} | cut -d. -f1-2)
SONAMEVER=${SVER}
PVER=$(echo ${VERSION} | tr . _ )
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable docs
SB_DOCS=${SB_DOCS:-NO}
# Set to YES to enable tests
SB_TEST=${SB_TEST:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}_${PVER}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

for file in libs/context/src/asm/*.S; do
cat >> ${file} <<-EOF

#if defined(__linux__) && defined(__ELF__)
.section .note.GNU-stack,"",%progbits
#endif
EOF
done

cat > ./tools/build/src/user-config.jam << "EOF"
import os ;
local SLKCFLAGS = [ os.environ SLKCFLAGS ] ;

using gcc : : : <compileflags>$(SLKCFLAGS) ;
EOF

export SLKCFLAGS="${SLKCFLAGS} -fno-strict-aliasing"

sed -i \
  -e "/flags gcc.compile OPTIONS <optimization>speed/s|-O3|\"${SLKCFLAGS}\"|g" \
  -e "/lib_path/s|\$(root)/lib \$(root)/lib32 \$(root)/lib64|\$(root)/lib${LIBDIRSUFFIX}|g" \
  tools/build/src/tools/gcc.jam || exit 1

sed -i \
  -e "/paths +=/s|/usr/lib /usr/lib32 /usr/lib64|/usr/lib${LIBDIRSUFFIX}|g" \
  -e "s|\$(root)/lib |\$(root)/lib${LIBDIRSUFFIX} |g" \
  tools/build/src/build/ac.jam || exit 1

sed -i.libdir \
  -e "/ICONV_PATH/s|/lib |/lib${LIBDIRSUFFIX} |g" \
  -e "/ICU_PATH/s|/lib$|/lib${LIBDIRSUFFIX}|g" \
  -e "/ICU_PATH/s|/lib |/lib${LIBDIRSUFFIX}|g" \
  libs/locale/build/Jamfile.v2 || exit 1

sed -i.libdir \
  -e "/ICU_PATH/s|<search>\$(ICU_PATH)/bin <search>\$(ICU_PATH)/lib|<search>\$(ICU_PATH)/lib${LIBDIRSUFFIX} |g" \
  libs/regex/build/Jamfile.v2 || exit 1

if [ "${LDFLAGS}" ] ;then
  sed -i -e "s|\$(SLKLDFLAGS)|${LDFLAGS}|g" tools/build/src/tools/gcc.jam || exit 1
  unset LDFLAGS
fi

# This enables building the boost.random library with /dev/urandom support
if [ -e /dev/urandom ] ; then
  mkdir -p libs/random/build
  cat ${CWD}/random-Jamfile > libs/random/build/Jamfile.v2
  # yeah, we WANT it to work on non-Linux too
  sed -i -e 's/#ifdef __linux__/#if 1/' libs/random/src/random_device.cpp || exit 1
fi

BOOST_ROOT=$(pwd)
staged_dir=stage
export BOOST_ROOT

# build make tools, ie bjam, necessary for building libs, docs, and testing
( cd tools/build/src/engine/ && ./build.sh ) || exit 1
BJAM=$(find tools/build/src/engine/ -name bjam -a -type f) || exit 1

CONFIGURE_FLAGS="--with-toolset=gcc"
PYTHON_VERSION=$(python2 -c 'import sys; print sys.version[:3]')
PYTHON_FLAGS="--with-python-root=/usr --with-python-version=$PYTHON_VERSION"
REGEX_FLAGS="--with-icu"
./bootstrap.sh --prefix=/usr --libdir=/usr/lib${LIBDIRSUFFIX} ${CONFIGURE_FLAGS} ${PYTHON_FLAGS} ${REGEX_FLAGS} || exit 1

BUILD_VARIANTS="variant=release threading=multi link=shared runtime-link=shared debug-symbols=on"
BUILD_FLAGS="-d2 library-path=/usr/lib${LIBDIRSUFFIX} --layout=system ${BUILD_VARIANTS} --without-context"
${BJAM} ${BUILD_FLAGS} -j${NJOBS} stage || exit 1

# build docs, requires a network connection for docbook XSLT stylesheets
#cd ./doc
#chmod +x ../tools/boostbook/setup_boostbook.sh
#../tools/boostbook/setup_boostbook.sh
#$BOOST_ROOT/$BJAM --v2 -sICU_PATH=/usr --user-config=../user-config.jam html
#cd ..

if [ "${SB_TEST}" = "YES" ] ;then
  echo '====================TESTING========================='
  echo "<p>" $(uname -a) "</p>" > status/regression_comment.html
  echo "" >> status/regression_comment.html
  echo "<p>" $(g++ --version) "</p>" >> status/regression_comment.html
  echo "" >> status/regression_comment.html

  chmod +x tools/regression/src/run_tests.sh
  ./tools/regression/src/run_tests.sh

  results1=status/cs-$(uname).html
  results2=status/cs-$(uname)-links.html
  email=benjamin.kosnik@gmail.com
  if [ -f ${results1} ] && [ -f ${results2} ]; then
    echo "sending results starting"
    testdate=$(date +%Y%m%d)
    testarch=$(uname -m)
    results=boost-results-${testdate}-${testarch}.tar.bz2
    tar -cvf boost-results-${testdate}-${testarch}.tar ${results1} ${results2}
    bzip2 -f boost-results-${testdate}-${testarch}.tar 
    echo | mutt -s "${testdate} boost regression ${testarch}" -a ${results} ${email} 
    echo "sending results finished"
  else
    echo "error sending results"
    exit 1
  fi
  echo '====================TESTING END====================='
fi

mkdir -p ${PKG}/usr/bin
install -m 755 ${BJAM} ${PKG}/usr/bin/ || exit 1
# Install the manual page
mkdir -p ${PKG}/usr/man/man1
install -p -m 644 tools/build/v2/doc/bjam.1 ${PKG}/usr/man/man1/ || exit 1

# install
# install lib
[ "$(find . -type f -name \*.a  -print -quit)" ] || exit 1
[ "$(find . -type f -name \*.so -print -quit)" ] || exit 1
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
for i in $( find stage -type f -name \*.a ); do
  NAMEL=$( basename ${i} );
  install -p -m 0644 ${i} ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAMEL} || echo "error" >> soinstall-error
done
for i in $( find stage -type f -name \*.so ); do
  NAMEL=${i};
  SONAME=${i}.${SONAMEVER};
  VNAME=${i}.${VERSION};
  base=$(basename $i);
  NAMELbase=${base};
  SONAMEbase=${base}.${SONAMEVER};
  VNAMEbase=${base}.${VERSION};
  mv ${i} ${VNAME} || echo "error" >> soinstall-error
  
  # remove rpath
  if [ -x /usr/bin/chrpath ] ;then
    chrpath --delete ${VNAME}
  fi

  install -p -m 755 ${VNAME} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/${VNAMEbase} || echo "error" >> soinstall-error

  if [ "${SONAMEVER}" = "${VERSION}" ] ;then
    ln -s ${VNAMEbase} ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAMELbase} || echo "error" >> soinstall-error
  else
    ln -s ${VNAMEbase} ${PKG}/usr/lib${LIBDIRSUFFIX}/${SONAMEbase} || echo "error" >> soinstall-error
    ln -s ${SONAMEbase} ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAMELbase} || echo "error" >> soinstall-error
  fi

done
if [ -f soinstall-error ] ;then
  exit 1
fi

# install include files
find ${NAME} -type d | while read a; do
  mkdir -p ${PKG}/usr/include/${a}
  find ${a} -mindepth 1 -maxdepth 1 -type f \
  | xargs -r install -m 644 -p -t ${PKG}/usr/include/${a} || exit 1
done

rm -rf ${PKG}/usr/include/boost/context

# remove scripts used to generate include files 
find ${PKG}/usr/include/ \( -name '*.pl' -o -name '*.sh' \) -exec rm -f {} \;
find ${PKG}/usr/include/ -name '*.orig' -delete

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/libboost_thread.so
tee ${PKG}/usr/lib${LIBDIRSUFFIX}/libboost_thread.so <<EOF
/* GNU ld script

   Boost.Thread header files pull in enough of Boost.System that
   symbols from the latter library are referenced by a compiled object
   that includes Boost.Thread headers.  libboost_system.so is among
   libboost_thread.so's DT_NEEDED, but program linker requires that
   missing symbols are satisfied by direct dependency, not a
   transitive one.  Hence this linker script, which brings in the
   Boost.System DSO.  */

INPUT(libboost_thread.so.${VERSION})
INPUT(libboost_system.so.${VERSION})
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE_1_0.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
if [ "${SB_DOCS}" = "YES" ] ;then
  find libs doc more -type f \( -name \*.htm -o -name \*.html \) \
    | sed -n '/\//{s,/[^/]*$,,;p}' \
    | sort -u > tmp-doc-directories
  sed "s:^:${DOCDIR}/:" tmp-doc-directories | xargs -r mkdir -p
  cat tmp-doc-directories | while read a; do
    find ${a} -mindepth 1 -maxdepth 1 -name \*.htm\* \
    | xargs install -m 644 -p -t ${DOCDIR}/${a}
  done
  rm -f tmp-doc-directories
  install -p -m 644 index.htm ${DOCDIR}/

( cd doc/html; 
  for i in $( find . -type d ); do
    mkdir -p ${DOCDIR}/${i}
  done
  for i in $( find . -type f ); do
    install -p -m 644 ${i} ${DOCDIR}/${i}
  done
)
fi
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/*-Jamfile ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
