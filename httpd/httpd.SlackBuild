#!/bin/sh
#-- httpd for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ httpd.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# ttp://httpd.apache.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=httpd
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.4.12}
MMNVER=${MMNVER:-20120211}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
SLKDIST=${SLKDIST:-Slackware}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable systemd notify support
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.apache.org/dist/${NAME}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
  PARCH="${ARCH}"
else
  LIBDIRSUFFIX=""
  PARCH="x86"
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

MMNISA="${MMNVER}${PARCH}"

sed -i "/^#define PLATFORM/s|Unix|${SLKDIST}|" os/unix/os.h || exit 1

sed -i '/suexec/s,setcap ,echo Skipping setcap for ,' Makefile.in

sed -i \
  -e "s|/lib/|/lib${LIBDIRSUFFIX}/|g" \
  -e '/runtimedir/s|${localstatedir}||g' \
  config.layout || exit 1

sed -i -e '/^SSLPassPhraseDialog/a#SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog' \
  docs/conf/extra/httpd-ssl.conf.in || exit 1

sed -i -e 's|/sysconfig/|/default/|g' support/apachectl.in || exit 1

# forcibly prevent use of bundled apr, apr-util, pcre
rm -rf srclib/{apr,apr-util,pcre}

sed -i \
  -e '/SERVER_CONFIG_FILE/s|rel_sysconfdir|sysconfdir|g' \
  -e '/AP_TYPES_CONFIG_FILE/s|rel_sysconfdir|sysconfdir|g' configure.in || exit 1
sed -i -e '/LoadModule/s|$(rel_libexecdir)|modules|g' Makefile.in || exit 1
sed -i -e 's|@rel_sysconfdir@/||g' docs/conf/httpd.conf.in || exit 1

# regenerate configure scripts
autoheader || exit 1
autoconf || exit 1

CFLAGS="${SLKCFLAGS}"
SH_LDFLAGS="-Wl,-z,relro ${LDFLAGS}"
export CFLAGS SH_LDFLAGS
unset LDFLAGS

PATH="/usr/sbin:/sbin${PATH:+:${PATH}}" ; export PATH
export LYNX_PATH=/usr/bin/links

CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --enable-layout=Slackware-FHS \
  --with-mpm=prefork \
  --with-apr=/usr \
  --with-apr-util=/usr \
  --enable-mods-shared=all \
  --enable-so \
  --enable-mpms-shared=all \
  --enable-pie \
  --enable-cgi \
  --with-pcre \
  --enable-ssl \
  --enable-rewrite \
  --enable-vhost-alias \
  --enable-proxy \
  --enable-proxy-http \
  --enable-proxy-ftp \
  --enable-proxy-balancer \
  --enable-cache \
  --enable-mem-cache \
  --enable-file-cache \
  --enable-disk-cache \
  --disable-speling \
  --enable-dav \
  --enable-ldap \
  --enable-authnz-ldap \
  --enable-authn-anon \
  --enable-authn-alias \
  --enable-suexec \
  --with-suexec \
  --enable-suexec-capabilities \
  --with-suexec-caller=apache \
  --without-suexec-logfile \
  --with-suexec-syslog \
  --with-suexec-bin=/usr/sbin/suexec \
  --with-suexec-uidmin=500 \
  --with-suexec-gidmin=100 \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

chmod 510 ${PKG}/usr/sbin/suexec

rmdir ${PKG}/usr/bin

mkdir ${PKG}/run/httpd/htcacheclean
chmof 0700 ${PKG}/run/httpd/htcacheclean

# Tweak default apache configuration
( cd ${PKG}
  #zcat ${SB_PATCHDIR}/httpd.nossldefault.diff.gz | sed -e "s#lib/httpd#lib${LIBDIRSUFFIX}/httpd#" | patch -p1 --verbose || exit 1
  sed -i -e '/modules\/mod_ssl.so/s|^|#|g' etc/httpd/httpd.conf || exit 1
  zcat ${SB_PATCHDIR}/httpd.runasapache.diff.gz | patch -p1 --verbose || exit 1
  rm -f ${PKG}/etc/httpd/httpd.conf{~,.orig}
) || exit 1

# Change config files to .new:
( cd ${PKG}/etc/httpd
  mv httpd.conf httpd.conf.new || exit 1
  for file in extra/*; do
    mv ${file} "${file}.new" || exit 1
  done
)

cat << EOF >> ${PKG}/etc/httpd/httpd.conf.new

# Uncomment the following line to enable PHP:
#
#Include /etc/httpd/mod_php.conf

# Uncomment the following lines to enable svn support:
#
#LoadModule dav_svn_module modules/mod_dav_svn.so
#LoadModule authz_svn_module modules/mod_authz_svn.so

EOF

install -pm0755 ${CWD}/mkcert.sh ${PKG}/etc/httpd/ || exit 1

mkdir -p ${PKG}/etc/httpd/conf.d

rmdir ${PKG}/var/log/httpd

mkdir -p ${PKG}/etc/rc.d
cat ${CWD}/rc.httpd > ${PKG}/etc/rc.d/rc.httpd.new || exit 1

if [ "${SB_SYSTEMD}" = "YES" ] ;then
cat > ${PKG}/etc/httpd/conf.d/00-systemd.conf <<'EOF'
# This file configures systemd module:
LoadModule systemd_module modules/mod_systemd.so
EOF

  mkdir -p ${PKG}/lib/systemd/system/httpd.service.d
  mkdir -p ${PKG}/lib/systemd/system/httpd.socket.d

  install -pm0644 ${CWD}/systemd/*.{service,socket} ${PKG}/lib/systemd/system/ || exit 1

cat > ${PKG}/lib/systemd/system/httpd.socket.d/10-listen443.conf <<'EOF'
# This file is part of mod_ssl. It enables listening on port 443 when
# socket activation is used.

[Socket]
ListenStream=443
EOF

fi

mkdir -p ${PKG}/usr/lib/tmpfiles.d
cat > ${PKG}/usr/lib/tmpfiles.d/httpd.conf <<'EOF'
d /run/httpd   710 root apache
d /run/httpd/htcacheclean   700 apache apache
EOF

mkdir -p ${PKG}/usr/libexec
cat > ${PKG}/usr/libexec/httpd-ssl-pass-dialog <<'EOF'
#!/bin/sh

exec /bin/systemd-ask-password "Enter SSL pass phrase for $1 ($2) : "
EOF
chmod 0755 ${PKG}/usr/libexec/httpd-ssl-pass-dialog || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/httpd.new <<'EOF'
# Configuration file for the httpd service.

#
# The default processing model (MPM) is the process-based
# 'prefork' model.  A thread-based model, 'worker', is also
# available, but does not work with some modules (such as PHP).
# The service must be stopped before changing this variable.
#
#HTTPD=/usr/sbin/httpd.worker

#
# To pass additional options (for instance, -D definitions) to the
# httpd binary at startup, set OPTIONS here.
#
#OPTIONS=

#
# By default, the httpd process is started in the C locale; to 
# change the locale in which the server runs, the HTTPD_LANG
# variable can be set.
#
#HTTPD_LANG=C

#
# When stopping the server a 10 second timeout is allowed before
# forcibly terminating the parent process (with a SIGKILL signal).
# To allow a longer delay, set the STOP_TIMEOUT variable.
#
#STOP_TIMEOUT=10

#
# By default, the httpd process will create the file
# /run/httpd/httpd.pid in which it records its process
# identification number when it starts.  If an alternate location is
# specified in httpd.conf (via the PidFile directive), the new
# location needs to be reported in the PIDFILE.
#
#PIDFILE=/run/httpd/httpd.pid
EOF

cat > ${PKG}/etc/default/htcacheclean.new <<'EOF'
#
# Configuration options for systemd service, htcacheclean.service.
# See htcacheclean(8) for more information on available options.
#

# Interval between cache clean runs, in minutes
INTERVAL=15

# Default cache root.
CACHE_ROOT=/var/cache/httpd/proxy

# Cache size limit in bytes (K=Kbytes, M=Mbytes)
LIMIT=100M

# Any other options...
OPTIONS=
EOF


mkdir -p ${PKG}/etc/logrotate.d
cat > ${PKG}/etc/logrotate.d/httpd.new <<'EOF'
/var/log/httpd/*_log {
  rotate 10
  notifempty
  size=5M
  compress
  delaycompress
  sharedscripts
  postrotate
    /bin/systemctl reload httpd.service > /dev/null 2>/dev/null || test -x /etc/rc.d/rc.httpd && /etc/rc.d/rc.httpd restart || true
  endscript
}
EOF

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

chmod 0710 ${PKG}/run/httpd

# symlinks for /etc/httpd
ln -s ../../var/log/httpd ${PKG}/etc/httpd/logs
ln -s ../../run/httpd ${PKG}/etc/httpd/run
ln -s ../../usr/lib${LIBDIRSUFFIX}/httpd/modules ${PKG}/etc/httpd/modules

# Make the MMN accessible to module packages
echo "${MMNVER}${PARCH}" > ${PKG}/usr/include/httpd/.mmn

mkdir -p ${PKG}/usr/lib/rpm/macros.d
cat > ${PKG}/usr/lib/rpm/macros.d/macros.httpd <<EOF
%_httpd_mmn ${MMNISA}
%_httpd_apxs %{_bindir}/apxs
%_httpd_confdir %{_sysconfdir}/httpd/extra
%_httpd_contentdir %{_localstatedir}/www
%_httpd_moddir %{_libdir}/httpd/modules
EOF


# Other distributions also strip the manual down to just English.
# If this isn't your language of choice, mea culpa.
( cd ${PKG}/srv/httpd/htdocs/manual
  for file in $(find . -type f -name "*.html") ; do
    if [ -f ${file}.en ]; then
      cp ${file}.en ${file}
      rm -f ${file}.*
    fi
  done
)

# On Slackware, the traditional location for the Apache document root has always
# been "/var/www/htdocs/".  We can avoid an unpleasant surprise for people by
# leaving things where they've always been, and comply with the FHS by providing
# symlinks allowing access through the FHS-approved pathnames.  KDE, for example,
# will look for htdig's htsearch here:  /var/www/cgi-bin/htsearch
mv ${PKG}/srv/httpd ${PKG}/var/www
( cd ${PKG}/srv
  ln -sf /var/www .
  ln -sf /var/www httpd
)

# OK, it's just not generally good form to put your web site in /var/www/htdocs,
# but people do it every day.  Like all new .new files, this won't save them this
# time, but if they don't learn their lesson now then it will the next time:
mv ${PKG}/var/www/htdocs/index.html ${PKG}/var/www/htdocs/index.html.new

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ABOUT_APACHE Apache.dsw BuildBin.dsp CHANGES InstallBin.dsp LAYOUT LICENSE \
  NOTICE NWGNUmakefile README* ROADMAP VERSIONING ${CWD}/README.confd \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

if [ ! -e var/log/httpd ]; then
  mkdir -p var/log/httpd
  chmod 755 var/log/httpd
fi

# Don't wipe out an existing document root:
if [ ! -L srv/www -a -d srv/www ]; then
  mv srv/www srv/www.bak.$$
fi
if [ ! -L srv/httpd -a -d srv/httpd ]; then
  mv srv/httpd srv/httpd.bak.$$
fi

# Once again, our intent is not to wipe out anyone's
# site, but building in Apache's docs tree is not as
# good an idea as picking a unique DocumentRoot.
#
# Still, we will do what we can here to mitigate
# possible site damage:
if [ -r var/www/htdocs/index.html ]; then
  if [ ! -r "var/log/packages/httpd-*upgraded*" ]; then
    if [ var/www/htdocs/index.html -nt var/log/packages/httpd-*-? ]; then
      cp -a var/www/htdocs/index.html var/www/htdocs/index.html.bak.$$
    fi
  fi
fi
EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.${NAME} -a -r etc/rc.d/rc.${NAME}.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find var/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
setcaps () {
  if ${CHROOT} /sbin/setcap "${1}" "${3}" 2>/dev/null; then
    ${CHROOT} /bin/chmod "${2}" "${3}"
  fi
}

${CHROOT} /bin/chown root.apache /usr/sbin/suexec
${CHROOT} /bin/chmod 4510 /usr/sbin/suexec

setcaps 'cap_setuid,cap_setgid+pe' 'u-s' /usr/sbin/suexec

${CHROOT} /bin/chown root.apache /run/httpd
${CHROOT} /bin/chown apache.apache /run/httpd/htcacheclean

if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,systemd}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/rc.* ${CWD}/*.confd ${CWD}/mkcert.sh \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/systemd/*.* \
    ${SBDIR}/systemd/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chown root.apache ./run/httpd ./usr/sbin/suexec ;
  /bin/chown apache.apache ./run/httpd/htcacheclean ;
  /bin/chmod 4510 ./usr/sbin/suexec ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
