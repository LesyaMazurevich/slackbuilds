#!/bin/sh
#-- nx-libs for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ nx-libs.SlackBuild 2>&1 | tee build.log
#--
# Installation script by Orion Poplawski <orion at cora.nwra.com> from Fedora RPM spec file.
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://x2go.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=nx-libs
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.5.0.32}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}-full.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://code.x2go.org/releases/source/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# Install into /usr
sed -i -e 's,/usr/local,/usr,' nx-X11/config/cf/site.def || exit 1
# Use rpm optflags
sed -i -e "s#-O3#${SLKCFLAGS}#" nx-X11/config/cf/host.def || exit 1
sed -i -e "s#-O3#${SLKCFLAGS}#" nx-X11/config/cf/linux.cf || exit 1
echo "#define DefaultGcc2Ppc64Opt ${SLKCFLAGS}" >> nx-X11/config/cf/host.def
# Use multilib dirs
# We're installing binaries into /usr/lib${LIBDIRSUFFIX}/nx/bin rather than
# /usr/libexec/nx because upstream expects libraries and binaries in the same directory
sed -i -e "s,/lib/nx,/lib${LIBDIRSUFFIX}/nx," Makefile nx-X11/config/cf/X11.tmpl
sed -i -e "s,/lib/x2go,/lib${LIBDIRSUFFIX}/x2go," Makefile
sed -i -e "s,/usr/lib/,/usr/lib${LIBDIRSUFFIX}/," bin/*

sed -i -e '/^NXAGENTSYSLIBS =/s|$| -ldl|g' nx-X11/programs/Xserver/Imakefile || exit 1

# Fix FSF address
find -name LICENSE | xargs sed -i \
  -e 's/59 Temple Place/51 Franklin Street/' -e 's/Suite 330/Fifth Floor/' \
  -e 's/MA  02111-1307/MA  02110-1301/'
# Fix source permissions
find -type f -name '*.[hc]' | xargs chmod -x

cat >"my_configure" <<EOF
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --sharedstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --disable-dependency-tracking \
  --build=${SLKTARGET}-${SLKDTARGET}-linux
EOF
chmod 0755 my_configure

export SHLIBGLOBALSFLAGS="${LDFLAGS} -Wl,-z,relro -Wl,-z,now"
export CONFIGURE="${SB_SROOT}/my_configure"
export PREFIX=/usr

make -j${NJOBS} USRLIBDIR=/usr/lib${LIBDIRSUFFIX}/nx SHLIBDIR=/usr/lib${LIBDIRSUFFIX}/nx || exit $?

make install DESTDIR=${PKG} \
  USRLIBDIR=/usr/lib${LIBDIRSUFFIX}/nx SHLIBDIR=/usr/lib${LIBDIRSUFFIX}/nx \
  INSTALL_DIR="install -dm0755" \
  INSTALL_FILE="install -pm0644" \
  INSTALL_PROGRAM="install -pm0755" || exit $?

# Remove static libs
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/nx/*.a
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/*.a

# Make sure x2goagent is linked relative and on 64-bit
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/x2go/bin
ln -sf ../../nx/bin/nxagent ${PKG}/usr/lib${LIBDIRSUFFIX}/x2go/bin/x2goagent || exit 1

# Fix permissions on shared libraries
chmod 755 ${PKG}/usr/lib${LIBDIRSUFFIX}/nx/{,X11/}lib*.so*

# Linker
mkdir -p ${PKG}/etc/ld.so.conf.d
cat > ${PKG}/etc/ld.so.conf.d/${NAME}-${ARCH}.conf <<EOF
/usr/lib${LIBDIRSUFFIX}/nx
/usr/lib${LIBDIRSUFFIX}/nx/X11
EOF

# Needed for nxagent to find the keymap directory
mkdir -p ${PKG}/etc/X11/xkb
touch ${PKG}/etc/X11/xkb/keymap.dir

# Remove extras, GL, and other unneeded headers
rm -rf ${PKG}/usr/include/nx/{extras,GL}
rm -rf ${PKG}/usr/include/nx/X11/bitmaps
rm -rf ${PKG}/usr/include/nx/X11/extensions/XInput.h
rm -rf ${PKG}/usr/include/nx/X11/extensions/XK*.h
rm -rf ${PKG}/usr/include/nx/X11/extensions/*Xv*.h
rm -rf ${PKG}/usr/include/nx/X11/Xtrans

# Needed for Xinerama support
ln -sf ../../../../lib${LIBDIRSUFFIX}/libX11.so.6 \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/nx/X11/Xinerama/libNX_X11.so.6
ln -sf ../../../../lib${LIBDIRSUFFIX}/libXext.so.6 \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/nx/X11/Xinerama/libNX_Xext.so.6

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

for dir in nxagent x2go ;do
  mv ${PKG}/etc/${dir}/keystrokes.cfg ${PKG}/etc/${dir}/keystrokes.cfg.new || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  nx-X11/{COPYING,LICENSE,README} ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
