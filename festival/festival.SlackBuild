#!/bin/sh
#-- festival for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ festival.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.cstr.ed.ac.uk/projects/festival/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=festival
SPTNAME=speech_tools
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.96}
SPTVER=${SPTVER:-1.2.96}
DOCVER=${DOCVER:-1.4.2}
DPVER=${DPVER:-0.19990610}
HTSVER=${HTSVER:-2.1}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-6}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Srt to YES to enable pulseaudio support
SB_PA=${SB_PA:-YES}
# Srt to YES to enable pulseaudio as default
SB_PADEF=${SB_PADEF:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}
SRCARCHIVE=${SRCDIR}-${VERSION}-beta.tar.gz
SRCDIR2=${SPTNAME}-${SPTVER}-beta
SRCARCHIVE2=${SRCDIR2}.tar.gz
SRCDIR3=festdoc-${DOCVER}
SRCARCHIVE3=${SRCDIR3}.tar.gz

SRCARCHIVE10=${NAME}-1.96-0.7-fedora-siteinit.scm.gz
SRCARCHIVE11=${NAME}-1.96-0.7-fedora-sitevars.scm.gz

SRCARCHIVE20=festlex_POSLEX.tar.gz
SRCARCHIVE21=festlex_CMU.tar.gz

SRCARCHIVE22=festvox_kallpc16k.tar.gz
SRCARCHIVE23=festvox_kedlpc16k.tar.gz

SRCARCHIVE30=festvox_nitech_us_awb_arctic_hts-${HTSVER}.tar.bz2
SRCARCHIVE31=festvox_nitech_us_bdl_arctic_hts-${HTSVER}.tar.bz2
SRCARCHIVE32=festvox_nitech_us_clb_arctic_hts-${HTSVER}.tar.bz2
SRCARCHIVE33=festvox_nitech_us_jmk_arctic_hts-${HTSVER}.tar.bz2
SRCARCHIVE34=festvox_nitech_us_rms_arctic_hts-${HTSVER}.tar.bz2
SRCARCHIVE35=festvox_nitech_us_slt_arctic_hts-${HTSVER}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://festvox.org/packed/${NAME}/${VERSION}"
DL_URL3="http://festvox.org/packed/${NAME}/${DOCVER}/${SRCARCHIVE3}"
HTSDL_URL="http://hts.sp.nitech.ac.jp/archives/${HTSVER}"

# if source is not present, download in source rootdir if possible
for file in \
  ${SRCARCHIVE} ${SRCARCHIVE2} \
  ${SRCARCHIVE20} ${SRCARCHIVE21} ${SRCARCHIVE22} ${SRCARCHIVE23}
do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
test -r ${CWD}/${SRCARCHIVE3} || ${DL_PROG} ${DL_OPTS} ${DL_URL3} || exit 1

for file in \
  ${SRCARCHIVE30} ${SRCARCHIVE31} ${SRCARCHIVE32} \
  ${SRCARCHIVE33} ${SRCARCHIVE34} ${SRCARCHIVE35}
do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${HTSDL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1

tar -xvf ${CWD}/${SRCARCHIVE2} -C ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE3} -C ${SRCDIR} || exit 1

for file in \
  ${SRCARCHIVE20} ${SRCARCHIVE21} ${SRCARCHIVE22} ${SRCARCHIVE23}
do
  tar -xvf ${CWD}/${file} || exit 1
done

cd ${SRCDIR} || exit 1

for file in \
  ${SRCARCHIVE30} ${SRCARCHIVE31} ${SRCARCHIVE32} \
  ${SRCARCHIVE33} ${SRCARCHIVE34} ${SRCARCHIVE35}
do
  tar -xvf ${CWD}/${file} || exit 1
done

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|/usr/local/lib||g' config/systems/default.mak || exit 1
sed -i -e 's|-fno-shared-data||g' speech_tools/config/compilers/gcc_defaults.mak || exit 1

# zero length
rm -f ${SRCDIR3}/speech_tools/doc/index_html.jade
rm -f ${SRCDIR3}/speech_tools/doc/examples_gen/error_example_section.sgml
rm -f ${SRCDIR3}/speech_tools/doc/tex_stuff.jade

SB_CONFIGURE() {
  ./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --host=${SLKTARGET}-${SLKDTARGET}-linux \
  --target=${SLKTARGET}-${SLKDTARGET}-linux \
  --build=${SLKTARGET}-${SLKDTARGET}-linux $@
}

# build speech tools (and libraries)
export LD_LIBRARY_PATH="$(pwd)/speech_tools/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
( cd speech_tools

  SB_CONFIGURE || exit 1

  # -fPIC 'cause we're building shared libraries and it doesn't hurt
  # -fno-strict-aliasing because of a couple of warnings about code
  #   problems; if $SLKCFLAGS contains -O2 or above, this puts
  #   it back. Once that problem is gone upstream, remove this for
  #   better optimization.

  export CFLAGS="${SLKCFLAGS} -fPIC -fno-strict-aliasing"
  export CXXFLAGS="${SLKCFLAGS} -fPIC -fno-strict-aliasing"

  make -j${NJOBS} -e || make -e || exit $?
) || exit 1

# build the main program
export LD_LIBRARY_PATH="$(pwd)/src/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
# instead of doing this, maybe we should patch the make process
# so it looks in the right place explicitly:
export PATH=$(pwd)/bin:${PATH}

SB_CONFIGURE || exit 1

make -e \
  FTLIBDIR="/usr/share/festival/lib" \
  CFLAGS="${SLKCFLAGS} -fPIC" \
  CXXFLAGS="${SLKCFLAGS} -fPIC" || exit 1

# build the patched CMU dictionary
( cd lib/dicts/cmu
  make || exit 1
) || exit 1

# install speech tools libs, binaries, and include files
( cd speech_tools

  make INSTALLED_LIB=${PKG}/usr/lib${LIBDIRSUFFIX} make_installed_lib_shared || exit 1
  # no thanks, static libs.
  rm -f ${PKG}/usr/lib*/*.a

  make INSTALLED_BIN=${PKG}/usr/libexec/speech-tools make_installed_bin_static || exit 1
  # this list of the useful programs in speech_tools comes from
  # upstream developer Alan W. Black; the other stuff is to be removed.
  ( cd ${PKG}/usr/libexec/speech-tools
    ls |
        grep -Evw "ch_wave|ch_track|na_play|na_record|wagon|wagon_test" |
        grep -Evw "make_wagon_desc|pitchmark|pm|sig2fv|wfst_build" |
        grep -Evw "wfst_run|wfst_run" |
        xargs rm || exit 1
  ) || exit 1

  ( cd include
    for d in $( find . -type d | grep -v win32 ); do
      make -w -C $d INCDIR=${PKG}/usr/include/speech_tools/$d install_incs || exit 1
    done  
    # Um, yeah, so, "EST" is not a very meaningful name for the include dir.
    # The Red Hat / Fedora package has traditionally put this stuff under
    # "speech_tools", and that's what we're gonna do here too.
    mv ${PKG}/usr/include/speech_tools/EST/*.h \
       ${PKG}/usr/include/speech_tools/ || exit 1
    rmdir ${PKG}/usr/include/speech_tools/EST
  ) || exit 1

  cp README ../README.speechtools

) || exit 1

# install the dictionaries
TOPDIR=$( pwd )
( cd lib/dicts
  mkdir -p ${PKG}/usr/share/festival/lib/dicts
  # we want to put the licenses in the docs...
  cp COPYING.poslex ${OLDPWD}/COPYING.poslex || exit 1
  cp cmu/COPYING ${OLDPWD}/COPYING.cmudict || exit 1
  for f in wsj.wp39.poslexR wsj.wp39.tri.ngrambin ; do
    install -m 644 $f ${PKG}/usr/share/festival/lib/dicts/ || exit 1
  done
  mkdir -p ${PKG}/usr/share/festival/lib/dicts/cmu
  ( cd cmu
    # note I'm keeping cmudict-0.4.diff and cmudict_extensions.scm to
    # satisfy the "all changes clearly marked" part of the license -- these
    # are the changes. And yes, the ".out" file is the one actually used.
    # Sigh.
    for f in allowables.scm cmudict-0.4.diff cmudict-0.4.out \
             cmudict_extensions.scm cmulex.scm cmu_lts_rules.scm; do
      install -m 644 $f ${PKG}/usr/share/festival/lib/dicts/cmu/ || exit 1
    done
  ) || exit 1
) || exit 1

# install the voices
( cd lib/voices
  # get the licenses. This is probably too clever by half, but oh well.
  for f in $( find . -name COPYING ); do
    n=$( echo $f | sed 's/.*\/\(.*\)\/COPYING/COPYING.\1/' )
    mv ${f} ${OLDPWD}/${n}
  done
  # ditch the readme files -- these aren't very useful. 
  # Except keep a README.htsvoice, because it contains license information.
  cp us/nitech_us_awb_arctic_hts/hts/README.htsvoice $OLDPWD/README.htsvoice
  find . -name 'README*' -exec rm {} \;
) || exit 1
# kludge! nitech_us_awb_arctic_hts is missing its COPYING file. It should
# be the same as the other nitech files, though, so just copy one.
cp COPYING.nitech_us_bdl_arctic_hts COPYING.nitech_us_awb_arctic_hts
cp -a lib/voices ${PKG}/usr/share/festival/lib/ || exit 1

# okay, now install the main festival program.

# binaries:
make INSTALLED_BIN=${PKG}/usr/bin make_installed_bin_static || exit 1
install -m 755 bin/text2wave ${PKG}/usr/bin/ || exit 1

# install the shared library
cp -a src/lib/libFestival.so* ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1

# this is just nifty. and it's small.
install -m 755 examples/saytime ${PKG}/usr/bin/ || exit 1

# man pages
mkdir -p ${PKG}/usr/man/man1
cp -a doc/*.1 ${PKG}/usr/man/man1/ || exit 1

# lib: the bulk of the program -- the scheme stuff and so on
( cd lib
  mkdir -p ${PKG}/usr/share/festival/lib
  for f in *.scm festival.el *.ent *.gram *.dtd *.ngrambin speech.properties ; do
    install -m 644 $f ${PKG}/usr/share/festival/lib/ || exit 1
  done
  if [ "${SB_PADEF}" = "YES" ] ;then
    install -m0644 init.scm.pa ${PKG}/usr/share/festival/lib/init.scm.nopa || exit 1
  else
    cp -f init.scm.pa ${PKG}/usr/share/festival/lib/init.scm || exit 1
  fi
  mkdir -p ${PKG}/usr/share/festival/lib/multisyn/
  install -m 644 multisyn/*.scm ${PKG}/usr/share/festival/lib/multisyn/ || exit 1
) || exit 1

# "etc" -- not in the configuration sense, but in the sense of "extra helper
# binaries".
( cd lib/etc
  # not arch-specific
  mkdir -p ${PKG}/usr/share/festival/lib/etc
  install -m 755 email_filter ${PKG}/usr/share/festival/lib/etc/ || exit 1
  # arch-specific
  mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/festival/etc
  install -m 755 */audsp ${PKG}/usr/lib${LIBDIRSUFFIX}/festival/etc/ || exit 1
) || exit 1

# the actual /etc. :)
mkdir -p ${PKG}/etc/festival
# use our version of this file
rm -f ${PKG}/usr/share/festival/lib/siteinit.scm || exit 1
zcat ${CWD}/${SRCARCHIVE10} > ${PKG}/etc/festival/siteinit.scm.new || exit 1
zcat ${CWD}/${SRCARCHIVE11} > ${PKG}/etc/festival/sitevars.scm.new || exit 1

# copy in the intro.text. It's small and makes (intro) work. in the future,
# we may want include more examples in an examples subpackage
mkdir -p ${PKG}/usr/share/festival/examples/
install -m 644 examples/intro.text ${PKG}/usr/share/festival/examples || exit 1

# header files
mkdir -p ${PKG}/usr/include/festival
cp -a src/include/* ${PKG}/usr/include/festival || exit 1

# Clean up some junk from the docs tarball.
( cd ${SRCDIR3}/speech_tools/doc
  rm -fr CVS arch_doc/CVS man/CVS  speechtools/arch_doc/CVS
  rm -f .*_made .speechtools_html .tex_done
) || exit 1

# info pages
mkdir ${PKG}/usr/info
cp -p ${SRCDIR3}/festival/info/* ${PKG}/usr/info/ || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ACKNOWLEDGMENTS COPYING NEWS README COPYING.poslex COPYING.cmudict \
  ${SRCDIR3}/festival/html/*html ${SRCDIR3}/speech_tools README.speechtools \
  COPYING.kal_diphone COPYING.ked_diphone COPYING.nitech_us_awb_arctic_hts \ 
  COPYING.hts README.htsvoice COPYING.nitech_us_bdl_arctic_hts \
  COPYING.nitech_us_clb_arctic_hts COPYING.nitech_us_jmk_arctic_hts \
  COPYING.nitech_us_rms_arctic_hts COPYING.nitech_us_slt_arctic_hts \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
      rm -f dir
      gzip -9 *
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Install the info files for this package
if [ -x /usr/bin/install-info ]
then
   /usr/bin/install-info --info-dir=/usr/info /usr/info/${NAME}.info.gz 2>/dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# Replicate slackbuild and patches
mkdir -p ${SBDIR}/patches
install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
               ${CWD}/apply-patches.sh ${CWD}/{${SRCARCHIVE10},${SRCARCHIVE11}} \
               ${SBDIR}/
install -m0755 ${CWD}/${NAME}.SlackBuild \
               ${SBDIR}/${NAME}.SlackBuild
install -m0644 ${CWD}/patches/*.gz \
               ${SBDIR}/patches/
sed -i "/^VERSION=/s/:-.*}/:-$VERSION}/
        /^BUILD=/s/:-.*}/:-$BUILD}/
        /^ARCH=/s/:-.*}/:-$ARCH}/
        " ${SBDIR}/${NAME}.SlackBuild

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/{${SRCARCHIVE10},${SRCARCHIVE11}} \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.gz \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
