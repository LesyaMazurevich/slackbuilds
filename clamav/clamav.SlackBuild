#!/bin/bash
#-- clamav for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ clamav.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.clamav.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=clamav
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.98.6}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable tests (currently broken).
SB_TEST=${SB_TEST:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

grep --quiet '^clamav:' /etc/group && SB_HGROUP=1
grep --quiet '^clamav:' /etc/passwd && SB_HUSER=1

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.sig

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native ${SB_ECFLAGS} -pipe "
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# make some of our own settings for good milter operation
sed -ri \
  -e 's!Example config!Config!' \
  -e 's!^Example$!#Example!' \
  -e 's!^#?(LogFile ).*!#\1/var/log/clamd.<SERVICE>!g' \
  -e 's!^#?(LocalSocket ).*!#\1/var/run/clamd.<SERVICE>/clamd.sock!g' \
  -e 's!^(#?PidFile ).*!\1/var/run/clamd.<SERVICE>/clamd.pid!g' \
  -e 's!^#?(User ).*!\1<USER>!g' \
  -e 's!^#?(AllowSupplementaryGroups|LogSyslog).*!\1 yes!g' \
  -e 's! /usr/local/share/clamav,! /var/lib/clamav,!g' \
  etc/clamd.conf.sample || exit 1

sed -ri \
  -e 's!Example config!Config!' \
  -e 's!^Example$!#Example!' \
  -e 's!^#?(UpdateLogFile )!#\1!g;' \
  -e 's!^#?(LogSyslog).*!\1 yes!g' \
  -e 's!(DatabaseOwner *)clamav$!\1clamav!g' \
  etc/freshclam.conf.sample || exit 1

# IPv6 check is buggy and does not work when there are no IPv6 interface on build machine
export have_cv_ipv6=yes

CFLAGS="${SLKCFLAGS} -Wall -W -Wmissing-prototypes -Wmissing-declarations -std=gnu99" \
CXXFLAGS="${SLKCFLAGS}" \
LDFLAGS="${LDFLAGS} -Wl,--as-needed" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --disable-dependency-tracking \
  --disable-static \
  --disable-rpath \
  --enable-milter \
  --with-dbdir=/var/lib/clamav \
  --with-user=clamav \
  --with-group=clamav \
  --disable-clamav \
  --enable-clamdtop \
  --with-system-llvm \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} all || exit 1
make install DESTDIR=${PKG} || exit 1

rm -f ${PKG}/usr/lib*/*.la

if [ "${SB_TEST}" = "YES" ] ;then
  echo ====================TESTING=========================
  unset FAILED
  for F in $(find test -maxdepth 1 -type f -name 'clam*' \
    ! -name 'clam-error.rar' ! -name 'clam2.cab')
  do
    clamscan/clamscan --database=./database ${F}
    if test $? = 1; then
      echo -e "\e[32mTest scan of file \e[4m${F}\e[0;32m passed.\e[0m"
    else
      echo -e "\e[31mTest scan of file \e[4m${F}\e[0;31;1m FAILED.\e[0m"
      FAILED=1
    fi
  done
  echo ====================TESTING END=====================
  test -z ${FAILED} || exit 1
fi

mkdir -p ${PKG}/var/lib/clamav
rm -f ${PKG}/var/lib/clamav/*.c{l,v}d || exit 1
touch ${PKG}/var/lib/clamav/mirrors.dat.new
touch ${PKG}/var/lib/clamav/.plan
chmod 0664 ${PKG}/var/lib/clamav/*.new
chmod 0600 ${PKG}/var/lib/clamav/mirrors.dat.new

rm -f ${PKG}/etc/{clamd,clamav-milter}.conf*

mkdir ${PKG}/etc/clamd.d
sed -e 's!<SERVICE>!scan!g;s!<USER>!clamav!g' \
  etc/clamd.conf.sample > ${PKG}/etc/clamd.d/scan.conf.new || exit 1

mkdir -p ${PKG}/etc/mail
sed -r \
  -e 's!^#?(User).*!\1 clamav!g' \
  -e 's!^#?(AllowSupplementaryGroups|LogSyslog) .*!\1 yes!g' \
  -e 's! /tmp/clamav-milter.socket! /var/run/clamav-milter/clamav-milter.socket!g' \
  -e 's! /var/run/clamav-milter.pid! /var/run/clamav-milter/clamav-milter.pid!g' \
  -e 's! /tmp/clamav-milter.log! /var/log/clamav-milter.log!g' \
  etc/clamav-milter.conf.sample > ${PKG}/etc/mail/clamav-milter.conf.new || exit 1

mv ${PKG}/etc/freshclam.conf.sample ${PKG}/etc/freshclam.conf.new || exit 1

mkdir -p ${PKG}/var/run/{clamd.scan,clamav-milter} ${PKG}/var/log
chmod 0710 ${PKG}/var/run/{clamd.scan,clamav-milter}

touch ${PKG}/var/log/{clamd.scan,clamav-milter.log,freshclam.log}.new
chmod 0664 ${PKG}/var/log/{clamd.scan,freshclam.log}.new
chmod 0620 ${PKG}/var/log/clamav-milter.log.new

MC_BASENAMES=$(find /usr/share/sendmail/cf/cf -type f \
  -name 'sendmail-slackware*.mc' ! -name '*clamav*' -printf '%P ' |
  sed 's/\.mc / /g')

mkdir -p ${PKG}/usr/share/sendmail/cf/cf
for MCNAME in ${MC_BASENAMES}; do
  for FILE in ${MCNAME}-clamav.cf cf/cf/${MCNAME}-clamav.mc; do
    echo "# Dummy from Slackware package ${PKGNAME}.tgz" \
      > ${PKG}/usr/share/sendmail/${FILE}
    echo '# If you see this, the package wasnt installed correctly.' \
      >> ${PKG}/usr/share/sendmail/${FILE}
  done
done

mkdir -p ${PKG}/etc/cron.daily
install -pm0755 ${CWD}/${NAME}-update.cron \
  ${PKG}/etc/cron.daily/${NAME}-update.new || exit 1

mkdir -p ${PKG}/etc/logrotate.d
install -pm0644 ${CWD}/logrotate/${NAME}-update.logrotate \
  ${PKG}/etc/logrotate.d/${NAME}-update.new || exit 1

sed -e 's!<SERVICE>!scan!g' ${CWD}/logrotate/clamd.logrotate \
  > ${PKG}/etc/logrotate.d/clamd.scan.new || exit 1

mkdir -p ${PKG}/etc/rc.d
install -pm0755 ${CWD}/rc.${NAME} \
  ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.onlyonce.rc${NAME}.gz \
  > ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/systemd/*.service ${PKG}/lib/systemd/system/ || exit 1

mkdir -p ${PKG}/usr/lib/tmpfiles.d
cat > ${PKG}/usr/lib/tmpfiles.d/clamd.conf << EOF
d /run/clamd.scan 0710 clamav clamav
EOF
cat > ${PKG}/usr/lib/tmpfiles.d/clamav-milter.conf <<EOF
d /run/clamav-milter 0710 clamav clamav
EOF

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/clamav/template
install -pm0644 ${CWD}/clamd-README ${PKG}/usr/share/clamav/template/README || exit 1
install -pm0644 ${CWD}/logrotate/clamd.logrotate  \
  ${PKG}/usr/share/clamav/template/ || exit 1
install -pm0644 etc/clamd.conf.sample \
  ${PKG}/usr/share/clamav/template/clamd.conf || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS BUGS COPYING examples FAQ README UPGRADE \
  NEWS docs/{clamav-mirror-howto,signatures}.pdf ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
test -d docs/html && cp --a docs/html ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 120 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^clamav:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            clamav 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^clamav:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/var/lib/clamav:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "clamav"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
            -l clamav \
            -g clamav \
            -d /var/lib/clamav \
            -u ${USER_ID} \
            -s /bin/false \
            -c "ClamAV Antivirus Daemon" \
            ${OLD_USER} 2> /dev/null
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
           -d /var/lib/clamav \
           -g clamav \
           -c "ClamAV Antivirus Daemon" \
           -u $(free_user_id) \
           -s /bin/false \
           clamav 2> /dev/null
fi
echo -e " \e[1mclamav\e[0m (group \e[1mclamav\e[0m) to run the daemon." 1>&2

EOF

cat >> ${PKG}/install/doinst.sh <<EOF2
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.${NAME} -a -r etc/rc.d/rc.${NAME}.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF2

( cd ${PKG}
  find etc/ var/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ var/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/cron.daily -name '*.new' -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF3'
# Fix permissions
${CHROOT} /bin/chown clamav.clamav /var/lib/clamav /var/lib/clamav/*.{c{l,v}d,dat}* /var/lib/clamav/.plan
${CHROOT} /bin/chown clamav.clamav /var/run/clamd.*
${CHROOT} /bin/chown clamav.clamav /var/run/clamav-milter
${CHROOT} /bin/chown root.clamav /var/log/{clamd.scan,clamav-milter.log,freshclam.log}* >/dev/null 2>&1

# Generate Sendmail .mc and .cf files with support for the ClamAV milter
CLMILTER_MC_CMD="dnl# ClamAV milter integration from clamav-0.92.1-i686-1xinc.tgz:
INPUT_MAIL_FILTER(\`clamav', \`S=local:/var/run/clamav-milter/milter.sock, F=, T=S:4m;R:4m')dnl
define(\`confINPUT_MAIL_FILTERS', \`clamav')dnl
"
if test -r usr/share/sendmail/cf/cf/sendmail-slackware.mc &&
   test -x usr/sbin/sendmail && test -x usr/bin/m4
then
  cd usr/share/sendmail/cf/cf

  for MCNAME in sendmail-slackware-tls sendmail-slackware-tls-sasl sendmail-slackware ; do
    SLACK_MC=${MCNAME}.mc
    CLAM_MC=${MCNAME}-clamav.mc
    CLAM_CF=${MCNAME}-clamav.cf
    if test -f ${SLACK_MC}; then
      echo "Generating ${ROOTDIR}usr/share/sendmail/${CLAM_CF} ..."
      sed "/VERSIONID/ s/')dnl/ with ClamAV milter support')dnl/" ${SLACK_MC} > ${CLAM_MC}
      echo "$CLMILTER_MC_CMD" >> ${CLAM_MC}
      m4 ../m4/cf.m4 ${CLAM_MC} > ../../${CLAM_CF} 2> /dev/null
    else
      echo "WARNING: Cannot generate ${ROOTDIR}usr/share/sendmail/$CLAM_CF because"
      echo "the file ${ROOTDIR}usr/share/sendmail/cf/cf/$SLACK_MC doesn't exist."
      rm -f ${CLAM_MC} ${CLAM_CF}	# remove dummies
    fi
  done

  cd ../../../../..
  echo -e "	\e[36mTo enable Sendmail integration, copy one of these .cf files to\e[0m"
  echo -e "	\e[36m${ROOTDIR}etc/mail/sendmail.cf, then start ClamAV and restart Sendmail.\e[0m"
else
  # if we can't make 'em, remove the dummies
  for NAME in sendmail-slackware-tls sendmail-slackware-tls-sasl sendmail-slackware ; do
     rm -f usr/share/sendmail/${MCNAME}-clamav.cf usr/share/sendmail/cf/cf/${MCNAME}-clamav.mc
  done
  echo -e "\e[1;31mWARNING: \e[0mThe ClamAV-enabled config files for Sendmail could not be generated."
  echo -e " If you want ClamAV to work with Sendmail, first make sure the"
  echo -e " \e[1msendmail\e[0m, \e[1msendmail-cf\e[0m, and \e[1mm4\e[0m packages for Slackware are installed,"
fi

EOF3

cat >> ${PKG}/install/doinst.sh <<EOF4
  echo -e " and then do: \e[31m# \e[32mupgradepkg --reinstall ${PKGNAME}.tgz\e[0m"
  echo -e " If Sendmail support is not desired, ignore this warning."
EOF4

cat >> ${PKG}/install/doinst.sh <<'EOF5'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF5

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

# in case someone does `finger clamav'
sed "s/^$NAME: //" install/slack-desc > ${PKG}/var/lib/clamav/.plan

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{logrotate,patches,systemd}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}-*.cron ${CWD}/rc.* ${CWD}/setup.*.rc*.gz \
    ${CWD}/clamd-README ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
     ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/logrotate/*.logrotate \
    ${SBDIR}/logrotate/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/systemd/*.* \
    ${SBDIR}/systemd/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown clamav.clamav ./var/lib/clamav ./var/lib/clamav/*.new ./var/lib/clamav/.plan ;
  [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown clamav.clamav ./var/run/clamd.* ;
  [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown clamav.clamav ./var/run/clamav-milter ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.clamav ./var/log/{clamd.scan,clamav-milter.log,freshclam.log}* ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
