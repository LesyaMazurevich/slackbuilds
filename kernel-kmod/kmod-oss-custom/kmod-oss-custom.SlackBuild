#!/bin/sh
#-- kmod-oss for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ kmod-oss-custom.SlackBuild 2>&1 | tee build-custom.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.opensound.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

KERNNAME=${KERNNAME:-custom}
PNAME=oss
NAME=kmod-${PNAME}-${KERNNAME}
SB_NAME=$(echo ${NAME} | sed "s|${KERNNAME}$|custom|g")
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.2-2011}
SVER="$(echo ${VERSION} | cut -d - -f1)"
BVER="$(echo ${VERSION} | cut -d - -f2)"
ARCH=${ARCH:-$(uname -m)}
BUILD=${BUILD:-3}
KVERSION=${KVERSION:-$(uname -r)}
PKVERSION="$(echo ${KVERSION} | tr - _ )"
KMODDIR=${PKG}/lib/modules/${KVERSION}/extra/$(echo ${NAME} |cut -d - -f2)
SBDIR=${PKG}/usr/src/slackbuilds/kernel-kmod/${NAME}-${VERSION}_${KVERSION}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )_${PKVERSION}-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
RSRCDIR=${PNAME}-v${SVER}-build${BVER}-src-gpl
SRCARCHIVE=${RSRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.4front-tech.com/developer/sources/testing/gpl/${SRCARCHIVE} "
DL_URLB="http://www.4front-tech.com/developer/sources/stable/gpl/${SRCARCHIVE} "

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

unset LDFLAGS CFLAGS CXXFLAGS CPPFLAGS OSFLAGS LIBRARIES
export BINUTILS_LD=bfd

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${KMODDIR}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR}/build
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

FSRCDIR="${TMP}/${SRCDIR}/${RSRCDIR}"
export NO_WARNING_CHECKS=yes

( cd build || exit 1

  "${FSRCDIR}/configure" || exit 1

  sed -i -e '/^SUBDIRS=/s|=.*$|=os_cmd kernel kernel/OS/Linux|g' Makefile || exit 1
  sed -i -e '/^SUBDIRS=/s|=.*$|=ossvermagic|g' os_cmd/Linux/Makefile || exit 1
  
  make build || exit 1
) || exit 1

( cd build/prototype/usr/lib/oss/build || exit 1

  # Check if we should use REGPARM or non-REGPARM modules
  if ../../../sbin/ossvermagic -r || /sbin/modinfo ext3|grep -q REGPARM ; then
    rm -rf ../objects
    ln -s objects.regparm ../objects
    rm -rf ../modules
    ln -s modules.regparm ../modules
  else
    rm -rf ../objects
    ln -s objects.noregparm ../objects
    rm -rf ../modules
    ln -s modules.noregparm ../modules
  fi

  mkdir kernel

  cp -f ../objects/osscore.o osscore_mainline.o
  ln -sf ../include/sys/*.h ../include/sys/ossddk .

  rm -f Makefile
  ln -s Makefile.osscore Makefile

  sed -i \
    -e '/^include \/etc\/oss.conf/d' \
    -e "s|\${OSSLIBDIR}|${TMP}/${SRCDIR}/build/prototype/usr/lib/oss|g" \
    -e "s|/usr/sbin/ossvermagic|${TMP}/${SRCDIR}/build/prototype\0|g" \
    Makefile || exit 1

  make KERNELDIR=/lib/modules/${KVERSION}/build || exit 1
  ld -r osscore.ko osscore_mainline.o -o kernel/osscore.ko || exit 1

  if ! [ -f Module.symvers ] ;then
    exit 1
  fi

  #Take generated symbol information and add it to module.inc
  rm -f osscore_symbols.inc
  echo "static const struct modversion_info ____versions[]" >> osscore_symbols.inc
  echo " __attribute__((used))" >> osscore_symbols.inc
  echo "__attribute__((section(\"__versions\"))) = {" >> osscore_symbols.inc
  sed -e "s:^:{:" -e "s:\t:, \":" -e "s:\t\(.\)*:\"},:" < Module.symvers >> osscore_symbols.inc
  echo "};" >> osscore_symbols.inc

  sed -i \
    -e '/^include \/etc\/oss.conf/d' \
    -e "s|\${OSSLIBDIR}|${TMP}/${SRCDIR}/build/prototype/usr/lib/oss|g" \
    -e "s|/usr/sbin/ossvermagic|${TMP}/${SRCDIR}/build/prototype\0|g" \
    Makefile.tmpl || exit 1

  for n in ../modules/*.o ; do
    N=$(basename $n .o)
    rm -f ${N}_mainline.o Makefile
    sed "s/MODNAME/${N}/" Makefile.tmpl > Makefile
    ln -s ${n} ${N}_mainline.o
    make KERNELDIR=/lib/modules/${KVERSION}/build || echo "make ${N}" >> modbuild-error
    ld -r ${N}.ko ${N}_mainline.o -o kernel/${N}.ko || echo "ld ${N}" >> modbuild-error
    rm -f ${N}_mainline.o
    make clean
  done
  if [ -f modbuild-error ] ;then
    exit 1
  fi

) || exit 1

install -m0644 build/prototype/usr/lib/oss/build/kernel/*.ko \
               ${KMODDIR}/ || exit 1

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required
echo "kernel-${KERNNAME} = ${PKVERSION}-${ARCH}-$( echo ${PKVERSION} | cut -d _ -f2 )" >> \
     ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# A good idea whenever kernel modules are added or changed:
if [ -x sbin/depmod ]; then
  chroot . /sbin/depmod -a ${KVERSION} 1> /dev/null 2> /dev/null
fi
EOF

sed -i "s|_KERNNAME|${KERNNAME}|g;
        s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${SB_NAME}.SlackBuild \
                 ${SBDIR}/${SB_NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
