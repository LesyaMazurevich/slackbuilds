#!/bin/sh
#-- kbd for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ kbd.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# ftp://ftp.win.tue.nl/pub/linux-local/utils/kbd/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=kbd
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.0.3}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable pam support (for vlock)
SB_PAM=${SB_PAM:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCDIR}.tar.sign

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KERNEL=${MIRROR_KERNEL:-http://www.kernel.org/pub}
DL_URL="${MIRROR_KERNEL}/linux/utils/${NAME}"
DL_URLB="ftp://devel.altlinux.org/legion/${NAME}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} ||  ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${SRCARCHIVE} || exit 1
test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SSRCARCHIVE}

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

EXTRADIR=${CWD}/extra

# Add some extra fonts:
mkdir -p ${PKG}/lib/kbd ${PKG}/usr/share
ln -s ../../lib/kbd ${PKG}/usr/share/kbd || exit 1
( cd ${PKG} ; /sbin/explodepkg ${EXTRADIR}/extraf.tgz ) || exit 1

cd ${TMP}
rm -rf ${SRCDIR}
 tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

tar -xjvf ${EXTRADIR}/kbd-latsun-fonts.tar.bz2 || exit 1
tar -xjvf ${EXTRADIR}/ro_maps.tar.bz2 || exit 1
tar -xjvf ${EXTRADIR}/kbd-latarcyrheb-16-fixed.tar.bz2 || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

find . \( -name '*~' -o -name '*.orig' \) -exec rm -f {} ';'

# 7-bit maps are obsolete; so are non-euro maps
( cd data/keymaps/i386
  cp qwerty/pt-latin9.map qwerty/pt.map || exit 1
  cp qwerty/sv-latin1.map qwerty/se-latin1.map || exit 1
  mv azerty/fr.map azerty/fr-old.map || exit 1
  cp azerty/fr-latin9.map azerty/fr.map || exit 1

  # legacy alias
  cp azerty/fr-latin9.map azerty/fr-latin0.map || exit 1

  # Rename conflicting keymaps
  mv dvorak/no.map dvorak/no-dvorak.map || exit 1
  mv fgGIod/trf.map fgGIod/trf-fgGIod.map || exit 1
  mv olpc/es.map olpc/es-olpc.map || exit 1
  mv olpc/pt.map olpc/pt-olpc.map || exit 1
  mv qwerty/cz.map qwerty/cz-qwerty.map || exit 1
) || exit 1

unset SB_PAMOPTS
[ "${SB_PAM}" = "YES" ] || SB_PAMOPTS='--disable-vlock'

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  autoreconf -ivf || exit $?
fi

SB_CONFIGURE() {
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --datadir=/lib/kbd \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --localedir=/usr/share/locale \
  --disable-silent-rules \
  --enable-nls \
  ${SB_PAMOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux $@
}

SB_CONFIGURE || exit 1
make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.setconsolefont.gz \
  > ${PKG}/var/log/setup/setup.setconsolefont || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.setconsolefont
zcat ${CWD}/setconsolefont.gz \
  > ${PKG}/usr/bin/setconsolefont || exit 1
chmod 0755 ${PKG}/usr/bin/setconsolefont

rm -f ${PKG}/lib/kbd/keymaps/i386/qwerty/ro_win.map.gz

# Create additional name for Serbian latin keyboard
ln -s sr-cy.map.gz \
      ${PKG}/lib/kbd/keymaps/i386/qwerty/sr-latin.map.gz || exit 1

# The rhpl keyboard layout table is indexed by kbd layout names, so we need a
# Korean keyboard
ln -s us.map.gz \
     ${PKG}/lib/kbd/keymaps/i386/qwerty/ko.map.gz || exit 1

# Move binaries which we use before /usr is mounted from /usr/bin to /bin.
mkdir -p ${PKG}/bin
for binary in loadkeys setfont dumpkeys kbd_mode unicode_start unicode_stop ; do
  mv ${PKG}/usr/bin/${binary} ${PKG}/bin/ || exit 1
  ln -s  ../../bin/${binary} ${PKG}/usr/bin/${binary}
done

# Some microoptimization
sed -i -e 's,\<kbd_mode\>,/bin/kbd_mode,g;s,\<setfont\>,/bin/setfont,g' \
  ${PKG}/bin/unicode_start

# Link open to openvt
ln -s openvt ${PKG}/usr/bin/open || exit 1

# This is the keymap for Speakup (http://linux-speakup.org) users:
install -m0644 ${EXTRADIR}/speakupmap.map.gz \
    ${PKG}/lib/kbd/keymaps/i386/qwerty/speakupmap.map.gz
# Another keymap for Speakup from Thomas Ward, for JFW users.
tar xzvf ${EXTRADIR}/speakup-jfw.tar.gz || exit 1
( cd speakup-jfw
  cat speakup-jfw.map | gzip -9c \
    > ${PKG}/lib/kbd/keymaps/i386/qwerty/speakup-jfw.map.gz
  cat readme > ${PKG}/lib/kbd/keymaps/i386/qwerty/speakup-jfw.readme
) || exit 1

## Borrowed from Fedora (ckbcomp from console-setup)
################################# X and legacy #################################
if [ -x /usr/bin/ckbcomp ] ;then
  # Move original keymaps to legacy directory
  mkdir -p ${PKG}/lib/kbd/keymaps/legacy
  mv ${PKG}/lib/kbd/keymaps/{amiga,atari,i386,include,mac,ppc,sun} \
    ${PKG}/lib/kbd/keymaps/legacy || exit 1

  # Convert X keyboard layouts to console keymaps
  mkdir -p ${PKG}/lib/kbd/keymaps/xkb
  install -pm0644 ${CWD}/xml2lst.pl .
  perl xml2lst.pl < /usr/share/X11/xkb/rules/base.xml > layouts-variants.lst
  while read line; do
    XKBLAYOUT=$(echo "${line}" | cut -d " " -f 1)
    echo "${XKBLAYOUT}" >> layouts-list.lst
    XKBVARIANT=$(echo "${line}" | cut -d " " -f 2)
    ckbcomp "${XKBLAYOUT}" "${XKBVARIANT}" | gzip > ${PKG}/lib/kbd/keymaps/xkb/"${XKBLAYOUT}"-"${XKBVARIANT}".map.gz
  done < layouts-variants.lst

  # Convert X keyboard layouts (plain, no variant)
  cat layouts-list.lst | sort -u >> layouts-list-uniq.lst
  while read line; do
    ckbcomp "$line" | gzip > ${PKG}/lib/kbd/keymaps/xkb/"${line}".map.gz
  done < layouts-list-uniq.lst

  # wipe converted layouts which cannot input ASCII (rh#1031848)
  zgrep -L "U+0041" ${PKG}/lib/kbd/keymaps/xkb/* | xargs rm -f

  # remove converted fi layout (rh#1117891)
  rm -f ${PKG}/lib/kbd/keymaps/xkb/fi.map.gz

  # Exit if exists dangling symlinks
  [ -n "$(find -L lib -type l)" ] && exit 1

fi
############################### X and legacy end ###############################

mkdir -p ${PKG}/etc/rc.d
cat > ${PKG}/etc/rc.d/rc.font.new <<EOF
#!/bin/sh
#
# This selects your default screen font from among the ones in
# /lib/kbd/consolefonts.
#
setfont -v
EOF
chmod 0755 ${PKG}/etc/rc.d/rc.font.new

if [ "${SB_PAM}" = "YES" ] ;then
  mkdir -p ${PKG}/etc/pam.d
  install -pm0644 ${CWD}/vlock.pamd ${PKG}/etc/pam.d/vlock.new || exit 1
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}/html
cp -a \
  ChangeLog AUTHORS README docs/doc/utf/utf* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
cp -a docs/doc/kbd.FAQ*.html doc/font-formats/*.html ${DOCDIR}/html/
rm -f ${DOCDIR}/openvt/kbd.FAQ.sgml
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.font -a -r etc/rc.d/rc.font.new ]; then
  chmod --reference=etc/rc.d/rc.font etc/rc.d/rc.font.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{extra,patches}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/setconsolefont.gz ${CWD}/xml2lst.pl \
    ${CWD}/setup.setconsolefont.gz ${CWD}/vlock.pamd ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/extra/* \
    ${SBDIR}/extra/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
