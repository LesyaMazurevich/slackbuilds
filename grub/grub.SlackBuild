#!/bin/sh
#-- grub for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ grub.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.gnu.org/software/grub/grub.html

# Required:
#  unifont-bdf

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=grub
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.02~beta2}
PVER=${PVER:-2.02~beta2-26}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-4}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr -- -\~ . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to build efi too
SB_EFI=${SB_EFI:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

if [ -r /usr/share/fonts/misc/unifont/unifont.bdf ] ;then
  SB_UNIFONTDIR=/usr/share/fonts/misc/unifont
elif [ -r /usr/share/fonts/misc/unifont.bdf ] ;then
  SB_UNIFONTDIR=/usr/share/fonts/misc
else
  echo "No unifont.bdf file installed" && exit 1
fi

if [ -r /usr/share/fonts/TTF/DejaVuSans.ttf ] ;then
  SB_DJVUFONTDIR=/usr/share/fonts/TTF
else
  echo "No DejaVuSans.ttf file installed" && exit 1
fi

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.sig
PSRCARCHIVE=${NAME}2_${PVER}.debian.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${NAME}"
MIRROR_GNUA=${MIRROR_GNUA:-http://alpha.gnu.org/gnu}
DL_URLB="${MIRROR_GNUA}/${NAME}"
MIRROR_DEB=${MIRROR_DEB:-http://ftp.debian.org}
PDL_URL="${MIRROR_DEB}/debian/pool/main/$(echo ${NAME} | sed -e 's/\(.\).*/\1/')/${NAME}2/${PSRCARCHIVE}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file} || exit 1
done
test -r ${CWD}/${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
case "${ARCH}" in
  i[3-6]86)
    grubefiarch=i386-efi
    grubefiname=grubia32.efi
    grubeficdname=gcdia32.efi
    ;;
  x86_64)
    grubefiarch="x86_64-efi"
    grubefiname=grubx64.efi
    grubeficdname=gcdx64.efi
    ;;
  *)
    SB_EFI=NO
    ;;
esac
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS
export BINUTILS_LD=bfd

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i.chinfo -e '/OS=/s|GNU/Linux|Linux|g' \
  util/grub.d/{10_linux,20_linux_xen}.in || exit 1

sed -i \
  -e "s|/usr/share/fonts/unifont|${SB_UNIFONTDIR}|g" \
  -e "s|/usr/share/fonts/dejavu|${SB_DJVUFONTDIR}|g" \
  -e 's|-Wcast-align|\0 -U_FORTIFY_SOURCE|g' \
  configure.ac || return 1

completionsdir=$(pkg-config --variable=completionsdir bash-completion 2>/dev/null || echo /usr/share/bash-completion/completions)
sed -i -e "/^bashcompletiondir =/s|=.*$|= ${completionsdir}|g" \
  util/bash-completion.d/Makefile.am || exit 1

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  sh ./autogen.sh || exit $?
fi

SB_CONFIGURE(){
TARGET_LDFLAGS=-static \
../configure \
  --prefix=/usr \
  --sbindir=/sbin \
  --bindir=/bin \
  --libdir=/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-werror \
  --enable-grub-mkfont \
  --build=${SLKTARGET}-${SLKDTARGET}-linux "$@"
}

if [ "${SB_EFI}" = "YES" ] ;then
  mkdir -p grub-efi-build
( cd grub-efi-build || exit 1

  mkdir grub-core
  cp -a ../grub-core/* grub-core/ || exit 1

  SB_CONFIGURE \
    --with-platform=efi || exit $?

  make -j${NJOBS} || make || return $?
  make install DESTDIR=${PKG} || exit $?

  find ${PKG}  -iname '*.module' -exec chmod a-x {} ';'

GRUB_MODULES="all_video boot btrfs cat chain configfile echo efifwsetup \
  efinet ext2 fat font gfxmenu gfxterm gzio halt hfsplus iso9660 \
  jpeg linuxefi lvm minicmd normal part_apple part_msdos \
  part_gpt password_pbkdf2 png reboot search search_fs_uuid \
  search_fs_file search_label sleep test video xfs \
  mdraid09 mdraid1x multiboot2 multiboot"

  ./grub-mkimage -O ${grubefiarch} -o ${grubeficdname} -p /EFI/BOOT \
    -d grub-core ${GRUB_MODULES} || exit $?

  ./grub-mkimage -O ${grubefiarch} -o ${grubefiname} -p /EFI/slackware \
    -d grub-core ${GRUB_MODULES} || exit $?

    mkdir -p ${PKG}/boot/efi/EFI/slackware/fonts/
    install -pm0755 ${grubefiname} ${PKG}/boot/efi/EFI/slackware/${grubefiname} || exit 1
    install -pm0755 ${grubeficdname} ${PKG}/boot/efi/EFI/slackware/${grubeficdname} || exit 1
    
    install -pm0644 unicode.pf2 ${PKG}/boot/efi/EFI/slackware/fonts/unicode.pf2 || exit 1
) || exit $?

  touch ${PKG}/boot/efi/EFI/slackware/grub.cfg.new
  ln -s ../boot/efi/EFI/slackware/grub.cfg ${PKG}/etc/grub-efi.cfg || exit 1

fi

mkdir -p grub-pc-build
( cd grub-pc-build || exit 1

  SB_CONFIGURE \
    --with-platform=pc \
    --disable-efiemu || exit $?

  make -j${NJOBS} || make || return $?
  make install DESTDIR=${PKG} || exit $?
) || exit $?

mkdir -p ${PKG}/boot/grub
touch ${PKG}/boot/grub/grub.cfg.new
ln -s ../boot/grub/grub.cfg ${PKG}/etc/grub.cfg || exit 1

cat >> ${PKG}/usr/share/grub/grub-mkconfig_lib <<EOF
GRUB_DISTRIBUTOR="${SLKDIST}"
EOF

install -pm0755 ${CWD}/grub.d/* ${PKG}/etc/grub.d/ || exit 1

GRUBD_FILES="00_header 10_linux 20_linux_xen 20_memtest86plus 30_os-prober \
  40_custom 41_custom 90_persistent"

( cd ${PKG}/etc/grub.d || exit 1
  for file in ${GRUBD_FILES} ;do
    mv ${file} ${file}.new
  done
) || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

cat >> ${PKG}/bin/grub-mkrescue-i386-pc <<EOF
#!/bin/sh
/bin/grub-mkrescue -d /lib${LIBDIRSUFFIX}/grub/i386-pc "\$@"
EOF
chmod 755 ${PKG}/bin/grub-mkrescue-i386-pc || exit 1

cat >> ${PKG}/sbin/update-grub <<'EOF'
#!/bin/sh
set -e

[ -e /etc/default/grub ] && source /etc/default/grub
GRUB_DISABLE_UPDATE_GRUB=${GRUB_DISABLE_UPDATE_GRUB:-false}

[ "${GRUB_DISABLE_UPDATE_GRUB}" = "true" ] && exit 0

if [ -w /boot ] && [ -w /boot/grub ] ;then
  exec /sbin/grub-mkconfig -o /boot/grub/grub.cfg "$@"
else
  echo "/boot or /boot/grub is not writeable!" && exit 1
fi
EOF
chmod 0755 ${PKG}/sbin/update-grub

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/${NAME}.new <<'EOF'
# If you change this file, run 'update-grub' afterwards to update
# /boot/grub/grub.cfg.


GRUB_DEFAULT=0
GRUB_HIDDEN_TIMEOUT=5
GRUB_HIDDEN_TIMEOUT_QUIET=false
GRUB_TIMEOUT=5
GRUB_CMDLINE_LINUX_DEFAULT=""
GRUB_CMDLINE_LINUX=""
GRUB_DISABLE_SUBMENU="true"

# Uncomment to enable BadRAM filtering, modify to suit your needs
# This works with Linux (no patch required) and with any kernel that obtains
# the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)
#GRUB_BADRAM="0x01234567,0xfefefefe,0x89abcdef,0xefefefef"

# Uncomment to disable graphical terminal (grub-pc only)
# Set to gfxterm to use graphical
#GRUB_TERMINAL=console

# The resolution used on graphical terminal
# note that you can use only modes which your graphic card supports via VBE
# you can see them in real GRUB with the command `vbeinfo'
#GRUB_GFXMODE=640x480

# The resolution used on console, set to "keep" to use the same as GRUB_GFXMODE
#GRUB_GFXPAYLOAD_LINUX=keep

# Uncomment if you don't want GRUB to pass "root=UUID=xxx" parameter to Linux
#GRUB_DISABLE_LINUX_UUID=true

# Uncomment to disable generation of recovery mode menu entries
#GRUB_DISABLE_RECOVERY="true"

# Uncomment to get a beep at grub start
#GRUB_INIT_TUNE="480 440 1"

# Enables/disables the os-prober check of other partitions for operating systems. 
#GRUB_DISABLE_OS_PROBER="true"

# Uncomment to disable update-grub
#GRUB_DISABLE_UPDATE_GRUB=true

# Set default gfx font
#GRUB_FONT="/usr/share/grub/unicode.pf2"

EOF

install -pm0644 ${CWD}/update-grub.8.gz ${PKG}/usr/man/man8/ || exit 1

mkdir -p ${PKG}/etc/prelink.conf.d
cat > ${PKG}/etc/prelink.conf.d/${NAME}-${ARCH}.conf <<EOF
-b /bin/grub-script-check
-b /bin/grub-mkrelpath
-b /bin/grub-fstest
-b /sbin/grub-bios-setup
-b /sbin/grub-probe
-b /sbin/grub-sparc64-setup
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS NEWS README THANKS TODO docs/grub.cfg ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/${NAME}.info.gz 2>/dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
for file in ${GRUBD_FILES} ;do
  if [ -r etc/grub.d/\${file} -a -r etc/grub.d/\${file}.new ]; then
    chmod --reference=etc/grub.d/\${file} etc/grub.d/\${file}.new
  fi
done

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find boot/ etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find boot/ etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{grub.d,patches}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/*.8.gz ${CWD}/90_persistent ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/grub.d/* \
    ${SBDIR}/grub.d/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
