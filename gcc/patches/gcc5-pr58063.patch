From 3381bd0cf40e7014c2faf8aebd7af18b32677f59 Mon Sep 17 00:00:00 2001
From: jason <jason@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Wed, 17 Jun 2015 14:33:17 +0000
Subject: [PATCH] 	PR c++/58063 	* tree.c (bot_manip): Remap SAVE_EXPR.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-5-branch@224559 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/cp/ChangeLog                         |  3 +++
 gcc/cp/tree.c                            | 23 +++++++++++++++++++++++
 gcc/testsuite/g++.dg/overload/defarg10.C | 28 ++++++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
 create mode 100644 gcc/testsuite/g++.dg/overload/defarg10.C

diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog
index bd00070..f374338 100644
--- a/gcc/cp/ChangeLog
+++ b/gcc/cp/ChangeLog
@@ -1,5 +1,8 @@
 2015-06-17  Jason Merrill  <jason@redhat.com>
 
+	PR c++/58063
+	* tree.c (bot_manip): Remap SAVE_EXPR.
+
 	PR c++/66387
 	* pt.c (tsubst_copy) [VAR_DECL]: Use process_outer_var_ref.
 
diff --git a/gcc/cp/tree.c b/gcc/cp/tree.c
index e150cbd..e1301b2 100644
--- a/gcc/cp/tree.c
+++ b/gcc/cp/tree.c
@@ -2358,6 +2358,29 @@ bot_manip (tree* tp, int* walk_subtrees, void* data)
       *walk_subtrees = 0;
       return NULL_TREE;
     }
+  if (TREE_CODE (*tp) == SAVE_EXPR)
+    {
+      t = *tp;
+      splay_tree_node n = splay_tree_lookup (target_remap,
+					     (splay_tree_key) t);
+      if (n)
+	{
+	  *tp = (tree)n->value;
+	  *walk_subtrees = 0;
+	}
+      else
+	{
+	  copy_tree_r (tp, walk_subtrees, NULL);
+	  splay_tree_insert (target_remap,
+			     (splay_tree_key)t,
+			     (splay_tree_value)*tp);
+	  /* Make sure we don't remap an already-remapped SAVE_EXPR.  */
+	  splay_tree_insert (target_remap,
+			     (splay_tree_key)*tp,
+			     (splay_tree_value)*tp);
+	}
+      return NULL_TREE;
+    }
 
   /* Make a copy of this node.  */
   t = copy_tree_r (tp, walk_subtrees, NULL);
diff --git a/gcc/testsuite/g++.dg/overload/defarg10.C b/gcc/testsuite/g++.dg/overload/defarg10.C
new file mode 100644
index 0000000..b8275d6
--- /dev/null
+++ b/gcc/testsuite/g++.dg/overload/defarg10.C
@@ -0,0 +1,28 @@
+// PR c++/58063
+// { dg-do run }
+
+struct basic_ios
+{
+  bool operator!() const { return false; }
+};
+
+struct ostream : virtual basic_ios
+{
+};
+
+int i;
+
+ostream& operator<<(ostream& os, const char* s) {
+  ++i;
+  return os;
+}
+
+ostream cout;
+
+void f(bool x = !(cout << "hi!\n")) { }
+
+int main() {
+  f();
+  if (i != 1)
+    __builtin_abort();
+}
-- 
1.9.4

