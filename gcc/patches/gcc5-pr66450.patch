From 1e73fe198129ab14a6a3897fdf2b94db86c41028 Mon Sep 17 00:00:00 2001
From: jason <jason@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Wed, 17 Jun 2015 14:33:02 +0000
Subject: [PATCH] 	PR c++/66450 	* constexpr.c
 (cxx_eval_store_expression): Avoid messing up outer 	ctx->ctor.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-5-branch@224557 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/cp/ChangeLog                               |  4 ++++
 gcc/cp/constexpr.c                             | 18 ++++++++++++++----
 gcc/testsuite/g++.dg/cpp0x/constexpr-fwctor1.C | 19 +++++++++++++++++++
 3 files changed, 37 insertions(+), 4 deletions(-)
 create mode 100644 gcc/testsuite/g++.dg/cpp0x/constexpr-fwctor1.C

diff --git a/gcc/cp/ChangeLog b/gcc/cp/ChangeLog
index eeb080c..af87f4d 100644
--- a/gcc/cp/ChangeLog
+++ b/gcc/cp/ChangeLog
@@ -1,5 +1,9 @@
 2015-06-17  Jason Merrill  <jason@redhat.com>
 
+	PR c++/66450
+	* constexpr.c (cxx_eval_store_expression): Avoid messing up outer
+	ctx->ctor.
+
 	PR c++/66289
 	* cp-tree.h (TEMPLATE_DECL_COMPLEX_ALIAS_P): New.
 	* pt.c (push_template_decl_real): Set it.
diff --git a/gcc/cp/constexpr.c b/gcc/cp/constexpr.c
index 3c8c2cc..48b5983 100644
--- a/gcc/cp/constexpr.c
+++ b/gcc/cp/constexpr.c
@@ -2706,11 +2706,13 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,
     }
   release_tree_vector (refs);
 
-  if ((AGGREGATE_TYPE_P (TREE_TYPE (t)) || VECTOR_TYPE_P (TREE_TYPE (t))))
+  if (AGGREGATE_TYPE_P (type) || VECTOR_TYPE_P (type))
     {
       /* Create a new CONSTRUCTOR in case evaluation of the initializer
 	 wants to modify it.  */
-      *valp = new_ctx.ctor = build_constructor (TREE_TYPE (t), NULL);
+      new_ctx.ctor = build_constructor (type, NULL);
+      if (*valp == NULL_TREE)
+	*valp = new_ctx.ctor;
       CONSTRUCTOR_NO_IMPLICIT_ZERO (new_ctx.ctor) = true;
       new_ctx.object = target;
     }
@@ -2718,8 +2720,16 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,
   init = cxx_eval_constant_expression (&new_ctx, init, false,
 				       non_constant_p, overflow_p);
   if (target == object)
-    /* The hash table might have moved since the get earlier.  */
-    ctx->values->put (object, init);
+    {
+      /* The hash table might have moved since the get earlier.  */
+      valp = ctx->values->get (object);
+      if (TREE_CODE (init) == CONSTRUCTOR)
+	/* An outer ctx->ctor might be pointing to *valp, so just replace
+	   its contents.  */
+	CONSTRUCTOR_ELTS (*valp) = CONSTRUCTOR_ELTS (init);
+      else
+	*valp = init;
+    }
   else
     *valp = init;
 
diff --git a/gcc/testsuite/g++.dg/cpp0x/constexpr-fwctor1.C b/gcc/testsuite/g++.dg/cpp0x/constexpr-fwctor1.C
new file mode 100644
index 0000000..d25c9c7
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/constexpr-fwctor1.C
@@ -0,0 +1,19 @@
+// PR c++/66450
+// { dg-do compile { target c++11 } }
+
+struct foo {
+  constexpr foo(int a);
+  constexpr foo(int a, int b, int c): a{a}, b{b}, c{c} {}
+
+  int a, b, c;
+};
+
+constexpr foo make_foo(int a) { return foo{a, a+1, a+2}; }
+constexpr foo::foo(int a): foo{make_foo(a)} {}
+
+int main() {
+  constexpr const foo f{3};
+  static_assert(f.a == 3, "");
+  static_assert(f.b == 4, "");
+  static_assert(f.c == 5, "");
+}
-- 
1.9.4

