#!/bin/sh
#-- dracut for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ dracut.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# https://dracut.wiki.kernel.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=dracut
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-041}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES if using with systemd
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCDIR}.tar.sign

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KERNEL=${MIRROR_KERNEL:-http://www.kernel.org/pub}
DL_URL="${MIRROR_KERNEL}/linux/utils/boot/dracut"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i.libdir \
  -e '/dracutbasedir/s|/usr/lib/|/lib/|g' \
  -e '/modules\.d/s|/usr/lib/|/lib/|g' \
  -e '/\/usr\/lib\/udev/d' \
  -e '/\/usr\/lib\/systemd/d' \
  dracut.sh || exit 1

sed -i -e 's|mktemp |mktemp-coreutils |g' \
  Makefile dracut.sh test/test-functions || exit 1

export CFLAGS="${SLKCFLAGS}"
export bindir=/sbin
export sbindir=/sbin
export libdir=/lib
export sysconfdir=/etc
export mandir=/usr/man

make || exit $?
make install DESTDIR=${PKG} || exit $?

mv ${PKG}/sbin/mkinitrd ${PKG}/sbin/mkinitrd-dracut || exit 1
mv ${PKG}/usr/man/man8/mkinitrd.8 ${PKG}/usr/man/man8/mkinitrd-dracut.8

echo "DRACUT_VERSION=${NAME}-${VERSION}-${BUILD}${PACKAGER_ID}" \
  > ${PKG}/lib/dracut/dracut-version.sh || exit 1

rm -rf ${PKG}/lib/dracut/modules.d/0?fips*
rm -rf ${PKG}/lib/dracut/modules.d/50plymouth
rm -rf ${PKG}/lib/dracut/modules.d/50gensplash
rm -rf ${PKG}/lib/dracut/modules.d/60xen
rm -rf ${PKG}/lib/dracut/modules.d/96securityfs
rm -rf ${PKG}/lib/dracut/modules.d/97masterkey
rm -rf ${PKG}/lib/dracut/modules.d/98integrity
rm -rf ${PKG}/lib/dracut/modules.d/98selinux

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/boot/dracut
mkdir -p ${PKG}/var/lib/dracut/overlay
mkdir -p ${PKG}/var/log
touch ${PKG}/var/log/dracut.log.new
mkdir -p ${PKG}/var/lib/initramfs

mv ${PKG}/etc/dracut.conf ${PKG}/etc/dracut.conf.new || exit 1

cat > ${PKG}/lib/dracut/dracut.conf.d/01-dist.conf <<EOF
# Dracut config file customized for Slackware.

install_items+=" vim /etc/vimrc ps grep cat rm "

# pkgtools
install_items+=" removepkg explodepkg pkgtool upgradepkg makepkg installpkg "
install_items+=" bzip2 cut dialog du lzma paste tar-1.13 xz "

prefix="/"
udevdir=/lib/udev
EOF

if [ "${SB_SYSTEMD}" = "YES" ] ;then
cat >> ${PKG}/lib/dracut/dracut.conf.d/01-dist.conf <<EOF
realinitpath=/lib/systemd/systemd
systemdutildir=/lib/systemd
systemdsystemunitdir=/lib/systemd/system
systemdsystemconfdir=/etc/systemd/system
EOF
fi

mkdir -p ${PKG}/etc/logrotate.d
install -pm0644 dracut.logrotate ${PKG}/etc/logrotate.d/dracut.new || exit 1

cat > ${PKG}/sbin/update-dracut <<'EOF'
#!/bin/sh
set -e

unset DRACUT_AUTO DRACUT_HOSTONLY DRACUT_KERNEL
[ -e /etc/default/dracut ] && source /etc/default/dracut
DRACUT_AUTO=${DRACUT_AUTO:-false}
DRACUT_HOSTONLY=${DRACUT_HOSTONLY:-true}
DRACUT_KERNEL=${DRACUT_KERNEL:-true}

[ "${DRACUT_AUTO}" = "true" ] || exit 0

unset DRACUT_HOSTONLY_OPT DRACUT_KERNEL_OPT
[ "${DRACUT_HOSTONLY}" != "true" ] && DRACUT_HOSTONLY_OPT='--no-hostonly'
[ "${DRACUT_KERNEL}" != "true" ] && DRACUT_KERNEL_OPT='--no-kernel'

if [ -z "${1}" ] ;then
  KVER="$(uname -r)"
else
  KVER="${1}"
fi

if [ -w /boot ] && [ -w /boot/dracut ] ;then
  exec /sbin/dracut -q ${DRACUT_HOSTONLY_OPT:---hostonly} ${DRACUT_KERNEL_OPT} --xz /boot/initramfs-"${KVER}".img "${KVER}"
else
  echo "/boot or /boot/dracut is not writeable!" && exit 1
fi
EOF
chmod 0755 ${PKG}/sbin/update-dracut || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/dracut.new <<'EOF'
# Set to true to run dracut on every kernel installation
DRACUT_AUTO=false

# Set to true to install only what is needed for booting the local host
DRACUT_HOSTONLY=true

# Set to true to install kernel drivers and firmware files
DRACUT_KERNEL=true
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
   AUTHORS COPYING HACKING NEWS README TODO dracut.{html,png,svg} ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ var/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ var/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/*-module-setup.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
