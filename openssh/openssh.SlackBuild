#!/bin/sh
#-- openssh for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ openssh.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.openssh.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=openssh
ANAME=pam_ssh_agent_auth
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-6.8p1}
AVER=${AVER:-0.9.3}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable pam support
SB_PAM=${SB_PAM:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SB_PAMD_DIR=${CWD}/pamd

grep --quiet '^ssh_keys:' /etc/group && SB_HGROUP=1

SRCDIR=${NAME}-${VERSION}
ASRCDIR=${ANAME}-${AVER}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.asc
ASRCARCHIVE=${ASRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable"
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
ADL_URL="${MIRROR_SF}/pamsshagentauth/${ASRCARCHIVE}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
if [ "${SB_PAM}" = "YES" ] ;then
  test -r ${CWD}/${ASRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${ADL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
if [ "${SB_PAM}" = "YES" ] ;then
  tar -xvf ${CWD}/${ASRCARCHIVE} || exit 1
fi

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e "s|${withval}/lib\"|${withval}/lib${LIBDIRSUFFIX}\"|g" configure.ac || exit 1

autoreconf -ivf || exit 1
if [ "${SB_PAM}" = "YES" ] ;then
  ( cd ${ASRCDIR} && autoreconf -ivf ) || exit 1
fi

unset SB_PAMOPTS
if [ "${SB_PAM}" = "YES" ] ;then
  SB_PAMOPTS='--with-pam'
else
  SB_PAMOPTS='--without-pam'
fi

case "${ARCH}" in
  s390)
    PICFLAG="-fpic"
    ;;
  *)
    PICFLAG="-fpic"
    ;;
esac
export CFLAGS="${SLKCFLAGS} ${PICFLAG} -fvisibility=hidden"
SAVE_LDFLAGS="${LDFLAGS}"
export LDFLAGS="${SAVE_LDFLAGS} -pie -z relro -z now"


SB_CONFIGURE() {
./configure \
    --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --infodir=/usr/info \
    --mandir=/usr/man \
    --docdir=/usr/doc/${NAME}-${VERSION} \
    --disable-silent-rules \
    --build=${SLKTARGET}-${SLKDTARGET}-linux "$@"
}

SB_CONFIGURE \
  --sysconfdir=/etc/ssh \
  --disable-strip \
  ${SB_PAMOPTS} \
  --without-kerberos5 \
  --with-md5-passwords \
  --with-tcp-wrappers \
  --with-default-path=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin \
  --with-ipv4-default \
  --with-privsep-path=/var/empty \
  --with-privsep-user=sshd \
  --with-ldap=/usr \
  --with-sandbox=rlimit \
  --with-authorized-keys-command \
  --enable-vendor-patchlevel="${SLKDIST}-${VERSION}-${BUILD}" \
  || exit $?

if [ "${SB_PAM}" = "YES" ] ;then
( cd ${ASRCDIR}
  export LDFLAGS="${SAVE_LDFLAGS}"

  SB_CONFIGURE \
    --sysconfdir=/etc \
    --libexecdir=/lib${LIBDIRSUFFIX}/security \
    --with-mantype=man
) || exit $?
fi

make -j${NJOBS} || make || exit $?
make install DESTDIR=${PKG} || exit $?

if [ "${SB_PAM}" = "YES" ] ;then
( cd ${ASRCDIR}
  unset LDFLAGS
  make -j${NJOBS} || make || exit $?
  make install DESTDIR=${PKG}
) || exit $?
fi

rm -f ${PKG}/etc/ssh/ldap.conf

# Install also 'ssh-copy-id' and its manpage from contrib:
install -pm0755 contrib/ssh-copy-id ${PKG}/usr/bin/ssh-copy-id || exit 1
install -pm0644 contrib/ssh-copy-id.1 ${PKG}/usr/man/man1/ || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/var/empty/sshd
chmod 755 ${PKG}/var/empty
chmod 711 ${PKG}/var/empty/sshd

for file in ssh_host_{ec,}dsa_key{,.pub} ssh_host_rsa_key{,.pub} ssh_host_key{,.pub} ;do
  rm -f ${PKG}/etc/ssh/${file}
done
for file in ssh_config sshd_config ;do
  mv ${PKG}/etc/ssh/${file} ${PKG}/etc/ssh/${file}.new || exit 1
done

install -pm0755 ${CWD}/sshd-keygen ${PKG}/usr/sbin/ || exit 1

mkdir -p ${PKG}/etc/rc.d
install -m0755 ${CWD}/rc.sshd \
  ${PKG}/etc/rc.d/rc.sshd.new || exit 1

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/systemd/*.{service,socket} ${PKG}/lib/systemd/system/ || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/sshd.new <<EOF
# Configuration file for the sshd service.

# The server keys are automatically generated if they are missing.
# To change the automatic creation uncomment and change the appropriate
# line. Accepted key types are: DSA RSA ECDSA ED25519.
# The default is "RSA ECDSA ED25519"

# AUTOCREATE_SERVER_KEYS=""
# AUTOCREATE_SERVER_KEYS="RSA ECDSA ED25519"

# Do not change this option unless you have hardware random
# generator and you REALLY know what you are doing/

SSH_USE_STRONG_RNG=0
# SSH_USE_STRONG_RNG=1

# Daemon options
# OPTIONS=
EOF

mkdir -p ${PKG}/usr/lib/tmpfiles.d
cat > ${PKG}/usr/lib/tmpfiles.d/sshd.conf <<EOF
d /var/empty/sshd 711 root root -
EOF

if [ "${SB_PAM}" = "YES" ] ;then
  mkdir -p ${PKG}/etc/pam.d
  for file in sshd ;do
    install -pm0644 ${SB_PAMD_DIR}/${file}.pam ${PKG}/etc/pam.d/${file}.new || exit 1
  done
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  CREDITS LICENCE OVERVIEW README README.privsep README.smartcard RFC.nroff \
  TODO WARNING.RNG ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
 CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up groups.
if ! grep --quiet '^ssh_keys:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            ssh_keys 2> /dev/null
fi
EOF

cat >> ${PKG}/install/doinst.sh <<EOF

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.sshd.new:
if [ -r etc/rc.d/rc.sshd -a -r etc/rc.d/rc.sshd.new ]; then
  chmod --reference=etc/rc.d/rc.sshd etc/rc.d/rc.sshd.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# If the sshd user/group/shadow don't exist, add them:

if ! grep -q "^sshd:" etc/passwd ; then
  echo "sshd:x:33:33:sshd:/:" >> etc/passwd
fi

if ! grep -q "^sshd:" etc/group ; then
  echo "sshd::33:sshd" >> etc/group
fi

if ! grep -q "^sshd:" etc/shadow ; then
  echo "sshd:*:9797:0:::::" >> etc/shadow
fi

# Add a btmp file to store login failure if one doesn't exist:
if [ ! -r var/log/btmp ]; then
  ( cd var/log ; umask 077 ; touch btmp )
fi

${CHROOT} /bin/chown root.ssh_keys /usr/libexec/ssh-keysign
${CHROOT} /bin/chmod 2111 /usr/libexec/ssh-keysign

if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{pamd,patches,systemd}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/rc.sshd ${CWD}/sshd-keygen ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${SB_PAMD_DIR}/*.pam \
    ${SBDIR}/pamd/
  install -m0644 ${CWD}/systemd/*.* \
    ${SBDIR}/systemd/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chown root.nobody ./usr/bin/ssh-agent ;
  /bin/chmod 2111 ./usr/bin/ssh-agent ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.ssh_keys ./usr/libexec/ssh-keysign ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chmod 2111 ./usr/libexec/ssh-keysign ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
