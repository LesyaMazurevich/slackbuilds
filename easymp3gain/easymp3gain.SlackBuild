#!/bin/sh
#-- easymp3gain for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ easymp3gain.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2012 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://sourceforge.net/projects/easymp3gain/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to use binary package (do not need lazarus >= 2.2.2)
SB_BIN=${SB_BIN:-YES}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=easymp3gain
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.5.0-1}
BVER="$( echo ${VERSION} | cut -d- -f1 )"
ARCH=${ARCH:-$(uname -m)}
if [ "${SB_BIN}" = "YES" ] && [ "${ARCH}" = "x86_64" ] ;then
  DARCH=amd64
else
  DARCH=i386
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

if [ "${SB_BIN}" = "YES" ] ;then
  SRCDIR=${NAME}-gtk2_${VERSION}_${DARCH}
  SRCARCHIVE=${NAME}-gtk2_${BVER}_${DARCH}.tar.gz
else
  SRCDIR=${NAME}-${VERSION}
  SRCARCHIVE=${NAME}-${VERSION}.src.tar.gz
fi

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

if [ -f ${CWD}/${NAME}-pt_BR.po.gz ] ;then
  zcat ${CWD}/${NAME}-pt_BR.po.gz > lang/${NAME}.pt.po || exit 1
fi

mkdir -p ${PKG}/usr/bin
cat > ${PKG}/usr/bin/${NAME} <<EOF
#!/bin/sh
exec /usr/lib${LIBDIRSUFFIX}/${NAME}/${NAME} "\$@"
EOF
chmod 0755 ${PKG}/usr/bin/${NAME}

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/{help,lang}
install -m0644 help/*.html ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/help/ || exit 
install -m0644 lang/*.po ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/lang/ || exit 1

if [ "${SB_BIN}" = "YES" ] ;then
  install -m0755 ${NAME} ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit 1
else
  make || exit 1
  install -m0755 bin/${NAME} ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit 1
  strip --strip-unneeded ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/${NAME}
  mv doc/*.txt .
  mv pixmaps/*.png .
fi

mkdir -p ${PKG}/usr/share/applications
desktop-file-install --vendor="" \
  --dir ${PKG}/usr/share/applications \
  --remove-category="Application" \
  --add-category="GTK" \
  --add-mime-type="application/ogg" \
  --add-mime-type="application/x-vorbis+ogg" \
  --add-mime-type="audio/aac" \
  --add-mime-type="audio/mp4" \
  --add-mime-type="audio/mpeg" \
  --add-mime-type="audio/x-mp3" \
  applications/${NAME}.desktop || exit 1

for res in 16 22 24 32 48 64 128 192 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -p -m 0644 icons/${NAME}-${res}.png ${dir}/${NAME}.png || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  {README,RELEASE}.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r CHANGELOG.txt ] && head -n 1000 CHANGELOG.txt > ${DOCDIR}/CHANGELOG.txt
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${NAME}*.po.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
