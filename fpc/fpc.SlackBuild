#!/bin/sh
#-- fpc for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ fpc.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.freepascal.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=fpcbuild
NAME=fpc
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.6.4}
SVER="$(echo ${VERSION} | cut -d _ -f1 | cut -d r -f1)"
unset RCV
echo ${VERSION} | grep -q rc && RCV="r$(echo ${VERSION} | cut -d r -f2)"
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/freepascal/${SRCARCHIVE}"
DL_URLB="ftp://ftp.freepascal.org/pub/fpc/dist/${SVER}/source/${SRCARCHIVE}"
DL_URLC="ftp://ftp.freepascal.org/pub/fpc/beta/${SVER}-${RCV}/source/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} \
  || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || ${DL_PROG} ${DL_OPTS} ${DL_URLC} || exit 1

if ! [ $(which fpc 2>/dev/null) ]; then
  echo "fpc os missing."
  echo
  echo "Needs fpc installed to compile."
  echo "Try upstream binary rpm."
  echo
  exit 1
fi

case "${ARCH}" in
  i[3-6]86)    SLKPPCNAME="ppc386"
               fpcdebugopt="-gl"
               LIBDIRSUFFIX=""
               ;;
  x86_64)      SLKPPCNAME="ppcx64"
               LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
               ;;
esac

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

export BINUTILS_LD=bfd

mkdir -p fpc_src
cp -a fpcsrc/rtl fpc_src
cp -a fpcsrc/packages fpc_src
rm -rf fpc_src/packages/extra/amunits
rm -rf fpc_src/packages/extra/winunits

STARTPP=${SLKPPCNAME}

fpcopt=''

( cd fpcsrc || exit 1
  NEWPP=$(pwd)/compiler/${SLKPPCNAME}
  NEWFPDOC=$(pwd)/utils/fpdoc/fpdoc
  DATA2INC=$(pwd)/utils/data2inc
  make compiler_cycle FPC=${STARTPP} OPT="${fpcopt}  ${fpcdebugoptl}" || exit 1
  make rtl_clean rtl_smart FPC=${NEWPP} OPT="${fpcopt}" || exit 1
  make packages_smart FPC=${NEWPP} OPT="${fpcopt}" || exit 1
  make ide_all FPC=${NEWPP} OPT="${fpcopt} ${fpcdebugoptl}" || exit 1
  make utils_all FPC=${NEWPP} DATA2INC=${DATA2INC} OPT="${fpcopt} ${fpcdebugoptl}" || exit 1

  make -C ../fpcdocs pdf FPC=${NEWPP} FPDOC=${NEWFPDOC} || exit 1

  FPCMAKE=$(pwd)/utils/fpcm/fpcmake
  NEWPP=$(pwd)/compiler/${SLKPPCNAME}
  INSTALLOPTS="FPC=${NEWPP} FPCMAKE=${FPCMAKE} \
             INSTALL_PREFIX=${PKG}/usr \
             INSTALL_LIBDIR=${PKG}/usr/lib${LIBDIRSUFFIX} \
             INSTALL_BASEDIR=${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/${SVER} \
             CODPATH=${PKG}/usr/lib/${NAME}/lexyacc \
             INSTALL_DOCDIR=${DOCDIR} \
             INSTALL_BINDIR=${PKG}/usr/bin \
             INSTALL_EXAMPLEDIR=${DOCDIR}/examples"
  make compiler_distinstall ${INSTALLOPTS} || exit 1
  make rtl_distinstall ${INSTALLOPTS} || exit 1
  make packages_distinstall ${INSTALLOPTS} || exit 1
  make ide_distinstall ${INSTALLOPTS} || exit 1
  make utils_distinstall ${INSTALLOPTS} || exit 1

  make -C ../install/doc ${INSTALLOPTS} || exit 1
  make -C ../install/man ${INSTALLOPTS} INSTALL_MANDIR=${PKG}/usr/man

  make -C ../fpcdocs pdfinstall ${INSTALLOPTS} || exit 1

) || exit 1

# create link
ln -sf ../lib${LIBDIRSUFFIX}/${NAME}/${SVER}/${SLKPPCNAME} ${PKG}/usr/bin/${SLKPPCNAME}

mkdir -p ${PKG}/etc/fppkg

# Create a version independent compiler-configuration file with build-id
# enabled by default
# For this purpose some non-default templates are used. So the samplecfg
# script could not be used and fpcmkcfg is called directly.
${PKG}/usr/bin/fpcmkcfg -p -t ${CWD}/fpc.cft -d "basepath=/usr" \
  -o ${PKG}/etc/fpc.cfg || exit 1
# Create the IDE configuration files
${PKG}/usr/bin/fpcmkcfg -p -1 -d "basepath=/usr/lib${LIBDIRSUFFIX}/${NAME}/\$fpcversion" \
  -o ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/${SVER}/ide/text/fp.cfg || exit 1
${PKG}/usr/bin/fpcmkcfg -p -2 \
  -o ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/${SVER}/ide/text/fp.ini || exit 1
# Create the fppkg configuration files
${PKG}/usr/bin/fpcmkcfg -p -t ${CWD}/fppkg.cfg -d CompilerConfigDir=/etc/fppkg \
  -d arch=${ARCH} -o ${PKG}/etc/fppkg.cfg
${PKG}/usr/bin/fpcmkcfg -p -t ${CWD}/default.cft -d fpcbin=/usr/bin/fpc \
  -d GlobalPrefix=/usr -d lib=/lib${LIBDIRSUFFIX} -o ${PKG}/etc/fppkg/default_${ARCH} || exit 1
 
mv ${PKG}/etc/${NAME}.cfg ${PKG}/etc/${NAME}.cfg.new || exit 1
mv ${PKG}/etc/fppkg.cfg ${PKG}/etc/fppkg.cfg.new || exit 1
mv ${PKG}/etc/fppkg/default_${ARCH} ${PKG}/etc/fppkg/default_${ARCH}.new || exit 1

# The source-files:
mkdir -p ${PKG}/usr/share/fpcsrc
cp -a fpc_src/* ${PKG}/usr/share/fpcsrc/ || exit 1

# delete lexyacc
rm -rf ${PKG}/usr/lib*/${NAME}/lexyacc
rmdir -p ${PKG}/usr/lib*/${NAME}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  fpcsrc/compiler/COPYING ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
cp -a fpcsrc/rtl/COPYING ${DOCDIR}/COPYING.rtl
cp -a fpcsrc/rtl/COPYING.FPC ${DOCDIR}/COPYING.FPC
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/*.{cft,cfg} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
