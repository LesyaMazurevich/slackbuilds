#!/bin/sh
#-- freenx for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ freenx.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2014 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://freenx.berlios.de/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=freenx-server
PKG=${TMP}/package-${NAME}

VERSION=${VERSION:-0.7.3}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-3}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

grep --quiet '^nx:' /etc/group && SB_HGROUP=1
grep --quiet '^nx:' /etc/passwd && SB_HUSER=1

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_BERLIOS=${MIRROR_BERLIOS:-http://download.berlios.de}
DL_URL="${MIRROR_BERLIOS}/freenx/${SRCARCHIVE}"
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} \
  || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${SRCARCHIVE} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

PKGLIBDIR=/usr/lib${LIBDIRSUFFIX}/nx
PKGLIBEXECDIR=/usr/libexec/nx

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e "s/3\.\[012\]/3.[0123]/g" nxloadconfig || exit 1

sed -i \
  -e "s,\$NX_DIR/bin,${PKGLIBEXECDIR},g"\
  -e "s,\$NX_DIR/lib,${PKGLIBDIR},g"\
  nxloadconfig nxserver || exit 1
sed -i -e's,^NX_LOGFILE=.*,NX_LOGFILE=/var/log/nx/nxserver.log,' \
  nxloadconfig node.conf.sample || exit 1

export CFLAGS="${SLKCFLAGS}"
export MODULE_CFLAGS="${SLKCFLAGS}"
export LOCAL_LDFLAGS="${LDFLAGS}"
make || exit $?
make install DESTDIR=${PKG} NX_ETC_DIR=/etc/nxserver || exit $?

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

mkdir -p ${PKG}/usr/sbin
reldir=$(abs2rel ${PKGLIBEXECDIR} /usr/sbin)
ln -s ${reldir}/nx{setup,keygen} ${PKG}/usr/sbin/ || exit 1

rename .sample "" ${PKG}/etc/nxserver/node.conf.sample

for file in users.id_dsa client.id_dsa.key server.id_dsa.pub.key \
  passwords{,.orig} ; do
  touch ${PKG}/etc/nxserver/${file}
  chmod 600 ${PKG}/etc/nxserver/${file}
done
touch ${PKG}/etc/nxserver/users.id_dsa.pub

# Create the nx user home
mkdir -p ${PKG}/var/lib/nxserver/home/.ssh
chmod -R 0700 ${PKG}/var/lib/nxserver
touch ${PKG}/var/lib/nxserver/home/.ssh/authorized_keys.new
touch ${PKG}/var/lib/nxserver/home/.ssh/authorized_keys.disabled.new
touch ${PKG}/var/lib/nxserver/home/.ssh/client.id_dsa.key.new
touch ${PKG}/var/lib/nxserver/home/.ssh/known_hosts.new
touch ${PKG}/var/lib/nxserver/home/.ssh/server.id_dsa.pub.key.new
chmod 0600 ${PKG}/var/lib/nxserver/home/.ssh/*
mkdir -p ${PKG}/var/lib/nxserver/db/closed
mkdir -p ${PKG}/var/lib/nxserver/db/running
mkdir -p ${PKG}/var/lib/nxserver/db/failed
chmod -R 0700 ${PKG}/var/lib/nxserver/db

touch ${PKG}/etc/nxserver/client.id_dsa.key.new
touch ${PKG}/etc/nxserver/server.id_dsa.pub.key.new

mkdir -p ${PKG}/var/log/nx
chmod 0700 ${PKG}/var/log/nx

ln -s ipp ${PKG}/usr/lib/cups/backend/nxipp

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null


mkdir -p ${PKG}/etc/logrotate.d
cat > ${PKG}/etc/logrotate.d/${NAME}.new <<'EOF'
/var/log/nxserver.log {
    rotate 4
    size=4M
    notifempty
    missingok
    sharedscripts
    copytruncate
}
EOF

cat > ${PKG}/${PKGLIBEXECDIR}/${NAME}-check-setup <<'EOF'
#!/bin/sh

if [ ! -f /etc/nxserver/users.id_dsa ] ; then
  logger -s -p daemon.err -t freenx-server.service \
    'FreeNX server not set up, run "nxsetup --install"'
  exit 6
fi
EOF
chmod 0755 ${PKG}/${PKGLIBEXECDIR}/${NAME}-check-setup || exit 1

mkdir -p ${PKG}/etc/rc.d
install -pm0755 ${CWD}/rc.${NAME} \
  ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

mkdir -p ${PKG}/var/log/setup
install -pm0755 ${CWD}/setup.onlyonce.rc${NAME} \
  ${PKG}/var/log/setup/setup.onlyonce.rc${NAME} || exit 1

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/${NAME}.service ${PKG}/lib/systemd/system/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING CONTRIB nxsetup ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 100 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^nx:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            nx 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
# In any case, make sure it has or gets a user ID between 100 and 999.
# If username changed, determine old username so we can change it (look
# for entry with homedir /var/lib/nxserver/home).
if OLD_ENTRY=$(grep --max-count=1 '^nx:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
    ':/var/lib/nxserver/home:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "nx"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
    -d /var/lib/nxserver/home \
    -u ${USER_ID} \
    -s /usr/libexec/nx/nxserver \
    -g nx \
    ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
    -d /var/lib/nxserver/home \
    -u $(free_user_id) \
    -g nx \
    -s /usr/libexec/nx/nxserver \
    nx
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.adb -a -r etc/rc.d/rc.${NAME}.new ]; then
  chmod --reference=etc/rc.d/rc.adb etc/rc.d/rc.${NAME}.new
fi

EOF

( cd ${PKG}
  find etc/ var/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ var/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Set up permissions
${CHROOT} /bin/chown --recursive nx:root \
  /etc/nxserver \
  /var/lib/nxserver \
  /var/log/nx

${CHROOT} /bin/chown nx.nx /etc/nxserver/client.id_dsa.key
${CHROOT} /bin/chown nx.nx /etc/nxserver/server.id_dsa.pub.key
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${FEDORADIST} ${CWD}/${NAME}.service \
    ${CWD}/rc.${NAME} ${CWD}/setup.*${NAME} ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HUSER}\" = 1 ] && /bin/chown -R nx.root ./var/lib/nxserver ./etc/nxserver ./var/log/nx ;
  [ \"${SB_HUSER}\" = 1 ] && [ \"${SB_HGROUP}\" = 1 ] && /bin/chown -R nx.nx ./etc/nxserver/client.id_dsa.key ./etc/nxserver/server.id_dsa.pub.key ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
