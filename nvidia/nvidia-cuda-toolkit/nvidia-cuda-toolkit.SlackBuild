#!/bin/sh
#-- nvidia-cuda-toolkit for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ nvidia-cuda-toolkit.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2012 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://developer.nvidia.com/cuda

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=cudatoolkit
NAME=nvidia-cuda-toolkit
NAME32=${NAME}-compat32
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
PKG32=${PKGF}/${NAME32}

VERSION=${VERSION:-4.2.9}
RVER=$( echo ${VERSION} | cut -d. -f1-2 )
PDIST=${PDIST:-ubuntu11.04}
# x86 or x86_64
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  DARCH=64
  ARCH32=x86
else
  DARCH=32
  ARCH=x86
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
  export SB_MULTILIB=NO
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/nvidia/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME32=${NAME32}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

# Set to YES to enable multilib libs
SB_MULTILIB=${SB_MULTILIB:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}_${VERSION}_linux_${DARCH}_${PDIST}
SRCARCHIVE=${SRCDIR}.run

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://developer.download.nvidia.com/compute/cuda/${RVER//./_}/rel/toolkit/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
sh ${CWD}/${SRCARCHIVE} --nox11 --noexec --target ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i \
  -e '/^TOP/s|=.*$|= /usr|g' \
  -e "/^LD_LIBRARY_PATH/s|\$(TOP)/lib:|\0\$(TOP)/lib/nvidia:|g" \
  -e "s|open64/bin|lib${LIBDIRSUFFIX}/open64/bin|g" \
  -e 's|\$(_HERE_)|/usr/bin|g' \
  -e '/^INCLUDES/s|/cudart|/nvidia|g' \
  bin/nvcc.profile || exit 1

if [ "${ARCH}" = "x86_64" ] ;then
  sed -i \
    -e '/^TOP/s|\$(_HERE_)/\.\.|/usr|g' \
    -e "/^PATH/s|/open64|/nvidia/open64|g" \
    -e "/^PATH/s|\$(TOP)/nvvm|$(TOP)/lib${LIBDIRSUFFIX}/nvidia/nvvm|g" \
    -e "/^LD_LIBRARY_PATH/s|\$(TOP)/lib:|\$(TOP)/lib${LIBDIRSUFFIX}:\0|g" \
    -e "/^LD_LIBRARY_PATH/s|\$(TOP)/lib/nvidia:|\$(TOP)/lib${LIBDIRSUFFIX}/nvidia:\0|g" \
    bin/nvcc.profile || exit 1
fi

mkdir -p ${PKG}/usr/bin
install -pm0755 bin/* ${PKG}/usr/bin/ || exit 1
chmod 0644 ${PKG}/usr/bin/nvcc.profile

cat > ${PKG}/usr/bin/nvvp <<EOF
#!/bin/sh
export UBUNTU_MENUPROXY=0
export LIBOVERLAY_SCROLLBAR=0
export LD_LIBRARY_PATH="/usr/lib64/nvidia:/usr/lib/nvidia:/usr/lib64:/usr/lib\${LD_LIBRARY_PATH:+:\${LD_LIBRARY_PATH}}"
exec /usr/lib${LIBDIRSUFFIX}/nvidia/libnvvp/nvvp
EOF
chmod 755 ${PKG}/usr/bin/nvvp

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/open64/{bin,lib}
cp -r lib${LIBDIRSUFFIX}/* ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1
install -pm0755 open64/bin/* ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/open64/bin/ || exit 1
install -pm0755 open64/lib/* ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/open64/lib/ || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/{libnvvp,nvvm}
cp -r libnvvp/* ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/libnvvp/ || exit 1
cp -r nvvm/* ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/nvvm/ || exit 1

mkdir -p ${PKG}/usr/include/nvidia
cp -r include/* ${PKG}/usr/include/nvidia/ || exit 1

mkdir -p ${PKG}/usr/share/${NAME}/src
cp -r src/* ${PKG}/usr/share/${NAME}/src/ || exit 1

if [ "${SB_MULTILIB}" = "YES" ] ;then
  mkdir -p ${PKG32}/usr/lib
  cp -r lib/* ${PKG32}/usr/lib/ || exit 1
  
  mkdir -p ${PKG32}/install
  cat ${CWD}/slack-desc-compat32 > ${PKG32}/install/slack-desc
  cat ${CWD}/slack-required > ${PKG32}/install/slack-required
fi

mkdir -p ${PKG}/etc/prelink.conf.d
cat > ${PKG}/etc/prelink.conf.d/${NAME}-${ARCH}.conf <<EOF
-b /usr/lib${LIBDIRSUFFIX}/nvidia/libnvvp
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  doc/* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${PKG32}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

if [ "${SB_MULTILIB}" = "YES" ] ;then
  ROOTCOMMANDS32="set -o errexit -o xtrace ; cd ${PKG32} ;
    /bin/chown --recursive root:root .  ;"
  
  ROOTCOMMANDS32="${ROOTCOMMANDS32}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME32}.${PKGFORMAT} "
  
  if test ${UID} = 0; then
    eval ${ROOTCOMMANDS32}
    set +o xtrace
  elif test "$(type -t fakeroot)" = 'file'; then
    echo -e "\e[1mEntering fakeroot environment.\e[0m"
    echo ${ROOTCOMMANDS32} | fakeroot
  else
    echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
    /bin/su -c "${ROOTCOMMANDS32}"
  fi
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
