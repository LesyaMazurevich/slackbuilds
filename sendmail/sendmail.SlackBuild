#!/bin/sh
#-- sendmail for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ sendmail.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2014 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.sendmail.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=sendmail
NAMECF=${NAME}-cf
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
PKGCF=${PKGF}/${NAMECF}

VERSION=${VERSION:-8.15.2}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAMECF=${NAMECF}-$(echo ${VERSION} | tr - . )-noarch-${BUILD}${PACKAGER_ID}

# Set to YES to enable wrapper to set default MTA
SB_DEFWRAP=${SB_DEFWRAP:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

sendmailcf=/usr/share/sendmail/cf
stdir=/var/log/mail
smshell=/sbin/nologin
spooldir=/var/spool
maildir=/etc/mail

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR//-/.}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.sendmail.org/pub/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

cat > slk.config.m4 << EOF
define(\`confMAPDEF', \`-DNEWDB -DNIS -DHESIOD -DMAP_REGEX -DSOCKETMAP -DNAMED_BIND=1')
define(\`confOPTIMIZE', \`\`\`\`${SLKCFLAGS}'''')
define(\`confENVDEF', \`-I/usr/include/db5 -Wall -DXDEBUG=0 -DTCPWRAPPERS -DNETINET6 -DHES_GETMAILHOST -DUSE_VENDOR_CF_PATH=1 -D_FFR_TLS_1 -D_FFR_LINUX_MHNL -D_FFR_TLS_EC -D_FILE_OFFSET_BITS=64 -DHESIOD_ALLOW_NUMERIC_LOGIN')
define(\`confLIBS', \`-lnsl -lwrap -lhesiod -lcrypt -ldb')
define(\`confMANOWN', \`root')
define(\`confMANGRP', \`root')
define(\`confMANMODE', \`644')
define(\`confMAN1SRC', \`1')
define(\`confMAN5SRC', \`5')
define(\`confMAN8SRC', \`8')
define(\`confSTDIR', \`${stdir}')
define(\`STATUS_FILE', \`${stdir}/statistics')
define(\`confLIBSEARCH', \`db resolv 44bsd')
APPENDDEF(\`confOPTIMIZE', \`')
APPENDDEF(\`confOPTIMIZE', \`-fpie')
APPENDDEF(\`confLIBS', \`-pie')
APPENDDEF(\`conf_sendmail_ENVDEF', \`-DSTARTTLS')dnl
APPENDDEF(\`conf_sendmail_LIBS', \`-lssl -lcrypto')dnl
APPENDDEF(\`confENVDEF', \`-DSASL=2')dnl
APPENDDEF(\`confLIBS', \`-lsasl2 -lcrypto')dnl
APPENDDEF(\`conf_sendmail_ENVDEF', \`-DMILTER')dnl
APPENDDEF(\`confMAPDEF', \`-DLDAPMAP -DLDAP_DEPRECATED')dnl
APPENDDEF(\`confENVDEF', \`-DSM_CONF_LDAP_MEMFREE=1')dnl
APPENDDEF(\`confLIBS', \`-lldap -llber -lssl -lcrypto')dnl
EOF

DIRS="libsmutil sendmail mailstats rmail praliases smrsh makemap libmilter"
for i in ${DIRS}; do
  ( cd ${i} || exit 1
    sh Build -f ../slk.config.m4 || exit 1
  ) || exit 1
done

#make -C doc/op op.pdf || exit 1

# create directories
for d in /usr/bin /usr/sbin /usr/include/libmilter \
  /usr/lib${LIBDIRSUFFIX} /usr/lib /usr/man/man{1,5,8} ${maildir} ${stdir} \
  ${sendmailcf} /etc/smrsh ${spooldir}/{clientmqueue,mqueue} /etc/rc.d

do
  mkdir -p ${PKG}/${d}
done

nameuser=$(id -nu)
namegroup=$(id -ng)

Make() {
  make $@ \
    DESTDIR=${PKG} \
    LIBDIR=/usr/lib${LIBDIRSUFFIX} \
    MANROOT=/usr/man/man \
    LIBMODE=0755 INCMODE=0644 \
    SBINOWN=${nameuser} SBINGRP=${namegroup} \
    UBINOWN=${nameuser} UBINGRP=${namegroup} \
    MANOWN=${nameuser} MANGRP=${namegroup} \
    INCOWN=${nameuser} INCGRP=${namegroup} \
    LIBOWN=${nameuser} LIBGRP=${namegroup} \
    GBINOWN=${nameuser} GBINGRP=${namegroup} \
    CFOWN=${nameuser} CFGRP=${namegroup} \
    CFMODE=0644 MSPQOWN=${nameuser}
}

OBJDIR=obj.$(uname -s).$(uname -r).$(uname -m)

Make install -C ${OBJDIR}/libmilter || exit 1
Make install -C ${OBJDIR}/sendmail || exit 1
Make install -C ${OBJDIR}/mailstats || exit 1
Make force-install -C ${OBJDIR}/rmail || exit 1
Make install -C ${OBJDIR}/praliases || exit 1
Make install -C ${OBJDIR}/smrsh || exit 1
Make install -C ${OBJDIR}/makemap || exit 1

# replace absolute with relative symlinks
ln -sf ../sbin/makemap ${PKG}/usr/bin/makemap

# fix permissions to allow debuginfo extraction and stripping
chmod 755 ${PKG}/usr/sbin/{mailstats,makemap,praliases,sendmail,smrsh}
chmod 755 ${PKG}/usr/bin/rmail

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# use /usr/lib, even for 64 bit architectures
ln -sf ../sbin/sendmail ${PKG}/usr/lib/sendmail

install -m0644 ${CWD}/config/rc.d/rc.${NAME}.new \
  ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

install -pm0644 ${CWD}/config/mail/*.new ${PKG}/${maildir}/ || exit 1
mv ${PKG}/${maildir}/aliases*.new ${PKG}/etc/ || exit 1
chmod 600 ${PKG}/${maildir}/statistics.new
if [ "${stdir}" != "${maildir}" ] ;then
  mv ${PKG}/${maildir}/statistics.new ${PKG}/${stdir}
fi
chmod 640 ${PKG}/${maildir}/access.new
chmod 640 ${PKG}/etc/aliases.db.new
chmod 640 ${PKG}/${maildir}/{access,domaintable,mailertable,virtusertable}.db.new 
chmod 750 ${PKG}/${maildir}/make.new

touch ${PKG}/${maildir}/aliasesdb-stamp.new

( cd cf/cf || exit 1
  for file in ${CWD}/config/mc/*.mc ;do
    cat ${file} > config.mc || exit 1
    /usr/bin/m4 ../../cf/m4/cf.m4 config.mc > config.cf || exit 1
    sed -i '/##### built by.*on/,+3d' config.cf
    mv config.cf ${PKG}/${sendmailcf}/$(basename ${file} .mc).cf || exit 1
  done
) || exit 1
zcat ${CWD}/README.linux.gz > ${PKG}/${sendmailcf}/README.linux

# Add a sample sendmail.cf:
cat ${PKG}/${sendmailcf}/sendmail-slackware.cf \
  > ${PKG}/${maildir}/sendmail.cf.new || exit 1
cat ${CWD}/config/mc/sendmail-slackware.mc \
  > ${PKG}/${maildir}/sendmail.mc.new || exit 1
cat cf/cf/submit.cf > ${PKG}/${maildir}/submit.cf.new || exit 1
cat cf/cf/submit.mc > ${PKG}/${maildir}/submit.mc.new || exit 1
sed -i '/##### built by.*on/,+3d' ${PKG}/${maildir}/submit.cf.new

chmod 770 ${PKG}/var/spool/clientmqueue
chmod 700 ${PKG}/var/spool/mqueue

# install the cf files for the sendmail-cf package.
mkdir -p ${PKGCF}/${sendmailcf}
chmod 0644 cf/cf/*.cf
cp -ar cf/* ${PKGCF}/${sendmailcf}
install -pm 0644 ${CWD}/config/mc/*.mc ${PKGCF}/${sendmailcf}/cf/ || exit 1

# remove patch backup files
rm -rf ${PKGCF}/${sendmailcf}/cf/Build.*
rm -rf ${PKGCF}/${sendmailcf}/*/*.mc.*
rm -rf ${PKGCF}/${sendmailcf}/*/*.m4.*

cp -a ${PKGCF}/${sendmailcf}/cf/Build \
  ${PKGCF}/${sendmailcf}/cf/Build.orig || exit 1
zcat ${CWD}/Build.gz > ${PKGCF}/${sendmailcf}/cf/Build || exit 1

if [ "${stdir}" != "${maildir}" ] ;then
  sed -i -e "s:${maildir}/statistics:${stdir}/statistics:" ${PKG}/usr/man/man*/*
fi

defwrapper(){
  cat > $1 <<'EOF'
#!/bin/sh
# mta wrapper

unset DEF_MTA
[ -e /etc/default/mta-default ] && . /etc/default/mta-default
DEF_MTA=${DEF_MTA:-sendmail}

for i in sendmail mailq newaliases rmail; do
  if ! [ -x /usr/libexec/${DEF_MTA}/${i} ] ; then
    echo "/usr/libexec/${DEF_MTA}/${i} is not executable or not exists"
    echo '/etc/default/mta-default is correct?'
    exit 1
  fi
done

exec /usr/libexec/${DEF_MTA}/$(basename $0) ${1+"$@"}

EOF
chmod 0755 $1
}

if [ "${SB_DEFWRAP}" = "YES" ] ;then
  mkdir -p ${PKG}/usr/libexec/${NAME}
  mv ${PKG}/usr/sbin/sendmail ${PKG}/usr/libexec/${NAME}/ || exit 1
  defwrapper ${PKG}/usr/sbin/sendmail.new || exit 1
  for i in mailq newaliases rmail; do
    mv ${PKG}/usr/bin/${i} ${PKG}/usr/libexec/${NAME}/ || exit 1
    defwrapper ${PKG}/usr/bin/${i}.new || exit 1
  done

  for f in hoststat purgestat ; do
    ln -sf ../libexec/${NAME}/sendmail ${PKG}/usr/bin/${f}
  done
  for f in mailq newaliases ; do
    ln -sf sendmail ${PKG}/usr/libexec/${NAME}/${f}
  done

  mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/mta-default.new <<EOF
# Set default MTA
DEF_MTA=sendmail
EOF

  sed -i \
    -e 's,^_TEST_$,[ -e /etc/default/mta-default ] || exit 1,g' \
    -e 's,^_TEST2_$,. /etc/default/mta-default,g' \
    -e 's,^_TEST3_$,[ "${DEF_MTA}" = "sendmail" ] || exit 1,g' \
    ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

  SENDMAILBIN=/usr/libexec/sendmail/sendmail

else

  for f in hoststat mailq newaliases purgestat ; do
    ln -sf ../sbin/sendmail ${PKG}/usr/bin/${f}
  done

  sed -i \
    -e '/^_TEST.*_$/d' \
    ${PKG}/etc/rc.d/rc.${NAME}.new || exit 1

  SENDMAILBIN=/usr/sbin/sendmail
fi

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/${NAME}.new <<'EOF'
# queue options (do not forget the "-q"
SENDMAIL_QOPTS=-q25m

# Other arguments
#SENDMAIL_OPTARG=
EOF

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/config/systemd/*.service ${PKG}/lib/systemd/system/ || exit 1

mkdir -p ${PKG}/etc/NetworkManager/dispatcher.d
cat > ${PKG}/etc/NetworkManager/dispatcher.d/10-sendmail <<'EOF'
#!/bin/sh

case "$2" in
  up|down|vpn-up|vpn-down)
    /bin/systemctl try-restart sendmail.service > /dev/null 2>/dev/null || test -x /etc/rc.d/rc.sendmail && /etc/rc.d/rc.sendmail condrestart || :
    ;;
esac
EOF
chmod 0755 ${PKG}/etc/NetworkManager/dispatcher.d/10-sendmail

# Add a documentation directory:
mkdir -p ${DOCDIR}/contrib
cp -a \
  FAQ KNOWNBUGS LICENSE README RELEASE_NOTES sendmail/SECURITY contrib \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
gzip -9 ${DOCDIR}/RELEASE_NOTES
for doc in cf libmilter smrsh ;do
  cp -a ${doc}/README ${DOCDIR}/README.${doc}
done
sed -i 's|/usr/local/bin/perl|/usr/bin/perl|' ${DOCDIR}/contrib/*.pl
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install ${PKGCF}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat ${CWD}/slack-desc.cf > ${PKGCF}/install/slack-desc
echo "${NAME} = ${VERSION}" > ${PKGCF}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.${NAME} -a -r etc/rc.d/rc.${NAME}.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ var/ usr/sbin/ usr/bin/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find usr/sbin/ usr/bin/ -name '*.new' -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ var/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<EOF
# Fix permissions

\${CHROOT} /bin/chown root.smmsp ${SENDMAILBIN}
\${CHROOT} /bin/chmod 2555 ${SENDMAILBIN}

\${CHROOT} /bin/chown smmsp.smmsp /var/spool/clientmqueue
\${CHROOT} /bin/chmod 770 /var/spool/clientmqueue

\${CHROOT} /bin/chown root.mail /var/spool/mqueue
\${CHROOT} /bin/chmod 700 /var/spool/mqueue

\${CHROOT} /bin/chown root.smmsp /etc/aliases.db*
\${CHROOT} /bin/chmod 0640 /etc/aliases.db*

EOF

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${PKGCF}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{config,patches}
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/README.linux.gz ${CWD}/Build.gz ${CWD}/${NAME}.service \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  for dir in mail rc.d mc systemd ;do
    mkdir -p ${SBDIR}/config/${dir}
    install -m0644 ${CWD}/config/${dir}/* ${SBDIR}/config/${dir}/
  done
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chown root.smmsp ./${SENDMAILBIN} ;
  /bin/chmod 2555 ./${SENDMAILBIN} ;
  /bin/chown smmsp.smmsp ./var/spool/clientmqueue ;
  /bin/chown root.mail ./var/spool/mqueue ;
  /bin/chown root.smmsp ./etc/aliases.db.new ; "

ROOTCOMMANDSCF="set -o errexit -o xtrace ; cd ${PKGCF} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "
ROOTCOMMANDSCF="${ROOTCOMMANDSCF}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMECF}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${ROOTCOMMANDSCF}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${ROOTCOMMANDSCF} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
  /bin/su -c "${ROOTCOMMANDSCF}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
