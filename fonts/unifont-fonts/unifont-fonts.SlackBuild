#!/bin/sh
#-- unifont-fonts for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ unifont-fonts.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://unifoundry.com/unifont.html

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=unifont
NAME=${PNAME}-fonts
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-8.0.01}
ARCH=noarch
SLKTARGET=${SLKTARGET:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/fonts/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

MISCDIR=usr/share/fonts/misc/${PNAME}
TTFDIR=usr/share/fonts/TTF/${PNAME}

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOWNDIR=${CWD}/fonts

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.bdf.gz
TTFSRCARCHIVE0=${SRCDIR}.ttf
TTFSRCARCHIVE1=${PNAME}_csur-${VERSION}.ttf
TTFSRCARCHIVE2=${PNAME}_upper-${VERSION}.ttf
TTFSRCARCHIVE3=${PNAME}_upper_csur-${VERSION}.ttf

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://unifoundry.com/pub/${SRCDIR}/font-builds"

# if source is not present, download in source rootdir if possible
mkdir -p ${DOWNDIR}
( cd ${DOWNDIR} || exit 1
  for file in ${SRCARCHIVE} ${TTFSRCARCHIVE0} ${TTFSRCARCHIVE1} ${TTFSRCARCHIVE2} ${TTFSRCARCHIVE3} ;do
    test -r ${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
  done
) || exit $?

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}

mkdir -p ${PKG}/${MISCDIR}
mkdir -p ${PKG}/${TTFDIR}

zcat ${DOWNDIR}/${SRCARCHIVE} > ${PKG}/${MISCDIR}/${PNAME}.bdf || exit 1

for file in ${TTFSRCARCHIVE0} ${TTFSRCARCHIVE1} ${TTFSRCARCHIVE2} ${TTFSRCARCHIVE3} ;do
  install -pm0644 ${DOWNDIR}/${file} ${PKG}/${TTFDIR}/${file//-${VERSION}} || exit 1
done

touch ${PKG}/${MISCDIR}/fonts.scale
touch ${PKG}/${MISCDIR}/fonts.dir

touch ${PKG}/${TTFDIR}/fonts.cache-1
touch ${PKG}/${TTFDIR}/fonts.scale
touch ${PKG}/${TTFDIR}/fonts.dir

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
zcat ${CWD}/LICENSE.gz > ${DOCDIR}/LICENSE
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Update the X font indexes:
if [ -x usr/bin/mkfontscale -a -x usr/bin/mkfontdir ]; then
  \${CHROOT} /usr/bin/mkfontscale /${MISCDIR#\/} >/dev/null 2>&1
  \${CHROOT} /usr/bin/mkfontdir /${MISCDIR#\/} >/dev/null 2>&1
  \${CHROOT} /usr/bin/mkfontscale /${TTFDIR#\/} >/dev/null 2>&1
  \${CHROOT} /usr/bin/mkfontdir /${TTFDIR#\/} >/dev/null 2>&1
fi
if [ -x usr/bin/update-fccache ]; then
  \${CHROOT} /usr/bin/update-fccache
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/LICENSE.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
