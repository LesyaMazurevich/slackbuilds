#!/bin/sh
#-- dhcp for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ dhcp.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://isc.org/products/DHCP/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=dhcp
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.3.2}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable krb gssapi
SB_KRB5=${SB_KRB5:-NO}
# Set to YES to enable systemd notify support
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
LSRCDIR=ldap-for-dhcp-${LVER}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://ftp.isc.org/isc/${NAME}"
DL_URLB="http://ftp.isc.org/isc/${NAME}/${VERSION}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

rm -f bind/bind.tar.gz

# Remove libdst
rm -rf dst/
rm -rf includes/isc-dhcp


sed -i -e 's/\r//' contrib/ms2isc/{readme.txt,Registry.pm,ms2isc.pl}

sed -i -e "s|@PRODUCTNAME@|${SLKDIST}|g" common/dhcp-options.5
sed -i -e "s|@PRODUCTNAME@|${SLKDIST}|g" configure.ac

# Update paths in all man pages
for page in \
  client/dhclient.conf.5 client/dhclient.leases.5 \
  client/dhclient-script.8 client/dhclient.8 \
  server/dhcpd.conf.5 server/dhcpd.leases.5 server/dhcpd.8
do
  sed -i \
    -e 's|CLIENTBINDIR|/sbin|g' \
    -e 's|RUNDIR|/var/run|g' \
    -e 's|DBDIR|/var/state/dhcp|g' \
    -e 's|ETCDIR|/etc|g' ${page} || exit 1
done

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  autoreconf -ivf || exit $?
fi

unset SB_KRB5OPTS SB_SYSTEMDOPTS
[ "${SB_KRB5}" = "YES" ] && SB_KRB5OPTS=yes
[ "${SB_SYSTEMD}" = "YES" ] && SB_SYSTEMDOPTS='--with-systemd'

CFLAGS="${SLKCFLAGS} -fPIC -fno-strict-aliasing -D_GNU_SOURCE" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-static \
  --enable-ipv6 \
  --disable-systemtap \
  --with-srv-lease-file=/var/state/dhcp/dhcpd.leases \
  --with-srv6-lease-file=/var/state/dhcp/dhcpd6.leases \
  --with-cli-lease-file=/var/state/dhcp/dhclient.leases \
  --with-cli6-lease-file=/var/state/dhcp/dhclient6.leases \
  --with-ldap \
  --with-ldapcrypto \
  --with-libbind=/usr/include/bind9 \
  --with-libbind-libs=/usr/lib${LIBDIRSUFFIX} \
  --with-krb5=${SB_KRB5OPTS:-no} \
  ${SB_SYSTEMDOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit $?

make -j${NJOBS} || make || exit $?
make install DESTDIR=${PKG} || exit $?

find ${PKG} -type f -name '*.la' -delete

# We need this in /sbin
mkdir -p ${PKG}/sbin
mv ${PKG}/usr/sbin/dhclient ${PKG}/sbin/ || exit 1

# Install the dhclient-script for linux
cat client/scripts/linux > ${PKG}/sbin/dhclient-script
chmod 700 ${PKG}/sbin/dhclient-script

mkdir -p ${PKG}/var/state/dhcp
# The daemon should create these automatically as needed
#touch ${PKG}/var/state/dhcp/dhcpd.leases.new
#touch ${PKG}/var/state/dhcp/dhcpd6.leases.new
#touch ${PKG}/var/state/dhcp/dhclient.leases.new
#touch ${PKG}/var/state/dhcp/dhclient6.leases.new

cat > ${PKG}/etc/dhcpd.conf.new <<'EOF'
# dhcpd.conf
#
# Configuration file for ISC dhcpd (see 'man dhcpd.conf')
#
EOF

cat > ${PKG}/etc/dhcpd6.conf.new <<'EOF'
# dhcpd.conf
#
# Configuration file for ISC dhcpd6 (see 'man dhcpd.conf')
#
EOF

cat > ${PKG}/etc/dhclient.conf.new <<'EOF'
# dhclient.conf
#
# Configuration file for ISC dhclient (see 'man dhclient.conf')
#
EOF

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/systemd/*.service ${PKG}/lib/systemd/system/ || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/dhcrelay.new <<'EOF'
# Command line options here
#Example: DHCRELAYARGS="-4 -i eth0 192.168.0.1"
#Example: DHCRELAYARGS="-6 -l eth1 -u eth0"
DHCRELAYARGS=""
# Note: We don't use INTERFACES and DHCPSERVERS anymore (they were DHCPv4 only)
EOF

cat > ${PKG}/etc/default/dhcpd.new <<'EOF'
# Command line options here
DHCPDARGS=""
EOF

cat > ${PKG}/etc/default/dhcpd6.new <<'EOF'
# Command line options here
DHCPDARGS=""
EOF

mkdir -p ${PKG}/etc/NetworkManager/dispatcher.d
cat > ${PKG}/etc/NetworkManager/dispatcher.d/12-dhcp <<'EOF'
#!/bin/sh
INTERFACE=$1 # The interface which is brought up or down
STATUS=$2 # The new state of the interface

if [ "$STATUS" = "up" ]; then
  # restart the services
  systemctl -q is-enabled dhcpd.service && systemctl restart dhcpd.service || :
  systemctl -q is-enabled dhcpd6.service && systemctl restart dhcpd6.service || :
fi
EOF
chmod 0755 ${PKG}/etc/NetworkManager/dispatcher.d/12-dhcp 

# Add a documentation directory:
mkdir -p ${DOCDIR}/examples
cp -a \
  LICENSE README RELNOTES ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
mv ${PKG}/etc/dhcpd.conf ${PKG}/etc/dhclient.conf ${DOCDIR}/examples/
cp -a doc/examples/{dhclient,dhcpd}-dhcpv6.conf ${DOCDIR}/examples/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/systemd/*.service \
    ${SBDIR}/systemd/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
