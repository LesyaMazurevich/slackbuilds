#!/bin/sh
#-- db51-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ db51.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2013 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.oracle.com/us/products/database/berkeley-db/index.html

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=db
PNAME2=libdb
NAME=libdb-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.3.28}
SOVER="$( echo ${VERSION} | cut -d . -f1-2 )"
SOMVER="$( echo ${VERSION} | cut -d . -f1 )"
SVER="$( echo ${VERSION} | cut -d . -f1-3 )"
ONAME="db${SOVER//./}"
DBCVER=${DBCVER:-1.85.4}
DBCSVER="$( echo ${DBCVER} | cut -d . -f1-2 )"
DBCPATCHLEVEL="$( echo ${DBCVER} | cut -d . -f3 )"
[ "${DBCPATCHLEVEL}" = "" ] && DBCPATCHLEVEL=0
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
SLKTARGET32=${SLKTARGET32:-i586}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME2}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

# Set to YES if is the default db
SB_DBDEF=${SB_DBDEF:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOWNDIR=${CWD}/patches/updates

SRCDIR=${PNAME}-${VERSION}
DBCSRCDIR=${PNAME}.${DBCSVER}
SRCARCHIVE=${SRCDIR}.tar.gz
DBCSRCARCHIVE=${DBCSRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://download.oracle.com/berkeley-db"
PDL_URL="http://www.oracle.com/technology/products/berkeley-db/db/update"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${DBCSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
mkdir -p ${DOWNDIR}
if [ "${DBCPATCHLEVEL}" -gt 0 ] ;then
( cd ${DOWNDIR} || exit 1
  for i in $( seq -w ${DBCPATCHLEVEL} ) ; do
    file=patch.1.${i}
    test -r ${file} || ${DL_PROG} ${DL_OPTS} ${PDL_URL}/${DBCSVER}/${file} || exit 1
  done
) || exit $?
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${DBCSRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

SLKCFLAGS="${SLKCFLAGS} -fno-strict-aliasing"
SLKCFLAGS="${SLKCFLAGS} -DSQLITE_ENABLE_COLUMN_METADATA=1 -DSQLITE_DISABLE_DIRSYNC=1 -DSQLITE_ENABLE_FTS3=3 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_SECURE_DELETE=1 -DSQLITE_ENABLE_UNLOCK_NOTIFY=1 -I../../../lang/sql/sqlite/ext/fts3/"

# Build the old db-185 libraries.
make -C db.1.85/PORT/linux OORG="${SLKCFLAGS}" || exit 1

( cd dist && ./s_config ) || exit 1

mkdir build

/bin/sh libtool --mode=compile ${CC} ${SLKCFLAGS} \
  -I${DBCSRCDIR}/PORT/linux/include -D_REENTRANT -c util/db_dump185.c \
  -o build/db_dump185.lo || exit 1
/bin/sh libtool --mode=link ${CC} -o build/db_dump185 build/db_dump185.lo \
  ${DBCSRCDIR}/PORT/linux/libdb.a || exit 1

( cd build || exit 1

  CFLAGS="${SLKCFLAGS}" \
  CXXFLAGS="${SLKCFLAGS}" \
  ../dist/configure \
    --prefix=/usr \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --includedir=/usr/include/${ONAME} \
    --sysconfdir=/etc \
    --localstatedir=/var/lib \
    --infodir=/usr/info \
    --mandir=/usr/man \
    --docdir=/usr/doc/${NAME}-${VERSION} \
    --enable-shared \
    --enable-cxx \
    --enable-dbm \
    --enable-sql \
    --enable-compat185 \
    --enable-dump185 \
    --disable-java \
    --build=${SLKTARGET32}-${SLKDTARGET}-linux || exit $?

  sed -i -e 's/^predep_objects=".*$/predep_objects=""/' libtool
  sed -i -e 's/^postdep_objects=".*$/postdep_objects=""/' libtool
  sed -i -e 's/-shared -nostdlib/-shared/' libtool

  make -j${NJOBS} || make || exit $?
  make install DESTDIR=${PKG} || exit $?
) || exit 1

find ${PKG} -type f -print0 | xargs -0 chmod u+w

[ "${SB_RMLA}" = "YES" ] && rm -f ${PKG}/usr/lib*/*.la

if [ -x /usr/bin/chrpath ] ;then
  chrpath -d ${PKG}/usr/lib*/*.so
fi

mkdir -p ${PKG}/lib${LIBDIRSUFFIX}
mv ${PKG}/usr/lib${LIBDIRSUFFIX}/libdb-${SOVER}.so \
  ${PKG}/lib${LIBDIRSUFFIX}/ || exit 1
ln -s ../../lib${LIBDIRSUFFIX}/libdb-${SOVER}.so \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/libdb-${SOVER}.so || exit 1

if [ "${SB_DBDEF}" = "YES" ] ;then
  libname=libdb
  reldir=$(echo /usr/lib${LIBDIRSUFFIX} | sed 's,/$,,;s,/[^/]\+,../,g')lib${LIBDIRSUFFIX}
  oldlink=$(readlink ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so)
  ln -sf ${reldir}/$(basename ${oldlink}) ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so || exit 1
fi

rm -f ${PKG}/usr/lib*/libdb*-${SOMVER}.so
rm -f ${PKG}/usr/lib*/libdb_tcl.so
rm -f ${PKG}/usr/lib*/libdb{,_{cxx,tcl,sql}}.a

chmod +x ${PKG}/usr/lib*/lib*.so*

if [ "${SB_DBDEF}" != "YES" ] ;then
  rm -f ${PKG}/usr/lib*/libdb{,_cxx,_sql}.so
  # We will not be linking statically against this, either.
  # If you need to do that, drag up an old package from the Slackware 10.2 era...
  rm -f ${PKG}/usr/lib*/*.a
fi

rm -rf ${PKG}/usr/{bin,sbin,doc,docs,include,libexec,man,info,share} ${PKG}/{etc,var}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
