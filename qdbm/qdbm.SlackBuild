#!/bin/sh
#-- qdbm for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ qdbm.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://fallabs.com/qdbm/index.html

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=qdbm
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.8.78}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

PERLVENDORARCH=$(eval "$(perl -V:vendorarch)"; echo ${vendorarch})
PERLVENDORLIB=$(eval "$(perl -V:vendorlib)"; echo ${vendorlib})
PERLARCHLIB=$(eval "$(perl -V:archlib)"; echo ${archlib})
PERLVER=$(eval "$(perl -V:version)"; echo ${version})

DATE=$(LC_ALL=C date +%d-%b-%Y)

RUBYVER=$(ruby -r rbconfig -e 'print RbConfig::CONFIG["ruby_version"]')
RBVENDORLIB=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["vendorlibdir"]')
RBVENDORARCH=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["vendorarchdir"]')
SB_JAVADIR=${SB_JAVADIR:-/usr/share/java}
unset JAVA_HOME

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://fallabs.com/qdbm/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1cd ${TMP}
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

## 0. First:
## - remove rpath
## - fix pc file to hide header files
## - fix Makefile to keep timestamps
for f in $(find . -name Makefile.in) ; do
  sed -i.rpath -e '/^LDENV/d' ${f}
done
sed -i.misc \
    -e '/^Libs/s|@LIBS@||' \
    -e '/Cflags/s|^\(.*\)|\1 -I\/usr/include/qdbm|' \
     qdbm.pc.in || exit 1
sed -i.stamp \
    -e 's|cp \(-R*f \)|cp -p \1| ' \
    -e 's|^CP =.*$|CP = cp -p|' \
    $(find . -name \*[mM]akefile.in -or -name \*[mM]akefile)

## 1. for main
sed -i.flags -e "/^CFLAGS/s|-O3.*$|${SLKCFLAGS}|" Makefile.in || exit 1

SB_CONFIGURE() {
  ./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --build=${SLKTARGET}-${SLKDTARGET}-linux
}

SB_CONFIGURE \
  --enable-pthread \
  --enable-zlib \
  --enable-bzip \
  --enable-iconv || exit 1

make -j${NJOBS} || make || exit 1

make install DESTDIR=${PKG} || exit 1

rm -rf ${PKG}/usr/lib*/lib*.a
rm -rf ${PKG}/usr/share/${NAME}/

## 2. for C++
( cd plus || exit 1
  sed -i.flags -e "/^CXXFLAGS/s|@MYOPTS@|${SLKCFLAGS}|" Makefile.in
  SB_CONFIGURE || exit 1
  make -j${NJOBS} || make || exit 1
  make install DESTDIR=${PKG} || exit 1
) || exit 1

rm -rf ${PKG}/usr/lib*/lib*.a
rm -rf ${PKG}/usr/share/qdbm/plus/xapidoc
rm -f ${PKG}/usr/share/qdbm/plus/*.html
rmdir ${PKG}/usr/share/qdbm/plus
rmdir ${PKG}/usr/share/qdbm

## 3. for java
( cd java || exit 1
  sed -i.flags -e "/^CFLAGS/s|@MYOPTS@|${SLKCFLAGS}|" Makefile.in
  SB_CONFIGURE --with-gcj || exit 1
  make JAR=/usr/bin/fastjar JAVAC="/usr/bin/gcj -C" || exit 1
  make install DESTDIR=${PKG} JAR=/usr/bin/fastjar || exit 1
) || exit 1

mkdir -p ${PKG}/${SB_JAVADIR}
mv -f ${PKG}/usr/lib${LIBDIRSUFFIX}/*.jar \
      ${PKG}/${SB_JAVADIR}/ || exit 1

rm -rf ${PKG}/usr/share/qdbm/java/japidoc
rm -f ${PKG}/usr/share/qdbm/java/*.html
rmdir ${PKG}/usr/share/qdbm/java
rmdir ${PKG}/usr/share/qdbm

## 4. for cgi
( cd cgi || exit 1
  sed -i.flags -e \
      "/^CFLAGS/s|-O2.*$|${SLKCFLAGS} -DCONFDIR="\\"@sysconfdir@/qdbm/\\""|" Makefile.in
  SB_CONFIGURE || exit 1
  make -j${NJOBS} || make || exit 1
  make install DESTDIR=${PKG} || exit 1
) || exit 1

rm -rf ${PKG}/usr/share/${NAME}/cgi/*.html
mkdir -p ${PKG}/etc/qdbm

mv ${PKG}/usr/share/qdbm/cgi/*.conf \
   ${PKG}/etc/qdbm/
rmdir ${PKG}/usr/share/qdbm/cgi
rmdir ${PKG}/usr/share/qdbm

## 5. for perl
( cd perl || exit 1
  SB_CONFIGURE || exit 1
  make -j${NJOBS} CC="gcc ${SLKCFLAGS}" LDDLFLAGS="-shared" INSTALLDIRS=vendor || exit 1
  make install DESTDIR=${PKG} INSTALLDIRS=vendor || exit 1
) || exit 1

rm -rf ${PKG}/usr/share/qdbm/perl/plapidoc
rm -f ${PKG}/usr/share/qdbm/perl/*.html
rmdir ${PKG}/usr/share/qdbm/perl
rmdir ${PKG}/usr/share/qdbm

# Fix perl modules..
rm -f ${PKG}/${PERLARCHLIB}/perllocal.pod
rmdir -p ${PKG}/${PERLARCHLIB}/
find ${PKG}/${PERLVENDORARCH} \
    -name \*.bs -or -name .packlist | \
    xargs rm -f
find ${PKG}/${PERLVENDORARCH} \
    -name \*.so | \
    xargs chmod 0755

## 6. for Ruby
( cd ruby || exit 1
  SB_CONFIGURE || exit 1
  sed -i 's|extconf.rb |extconf.rb --vendor |' Makefile || exit 1
  make -j${NJOBS} CC="gcc ${SLKCFLAGS}" || exit 1
  make install ruby_headers= DESTDIR=${PKG} || exit 1
) || exit 1

( cd ${PKG}/etc/qdbm || exit 1
  for f in *.conf ;do
    mv ${f} ${f}.new
  done
) || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING NEWS README THANKS spex.html ${CWD}/ChangeLog.SB \
  cgi/cgispex.html java/{japidoc,jspex.html} perl/{plapidoc,plspex.html} \
  plus/{xapidoc,xspex.html} ruby/{rbapidoc,rbspex.html} ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
