#!/bin/sh
#-- qt3 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ qt3.SlackBuild 2>&1 | tee build.log
#--
# Using code from Patrick Volkerding
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.trolltech.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

PNAME=qt
NAME=qt3
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.3.8b}
PVER=${PVER:-"$(LC_ALL=C date +%Y%m%d)"}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i486}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-22}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-x11-free-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SRCARCHIVE2=${NAME}-copy-patches-${PVER}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://ftp.trolltech.com/qt/source/${SRCARCHIVE}"
SNAPUPDATE=${NAME}-copy-patches-snapshot.sh
export snap=${PVER}

# if source is not present, download in source cd dir if possible, or in /tmp
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${SRCARCHIVE2} || sh ${CWD}/${SNAPUPDATE} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

unset CFLAGS CXXFLAGS CPPFLAGS

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE2} || exit 1

# Make sure ownerships and permissions are sane:
chmod -R u+w,go+r-w,a-s .

unset QTDIR QTINC QTLIB
export QTDIR="$(pwd)"
export LD_LIBRARY_PATH="${QTDIR}/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
export PATH="${QTDIR}/bin${PATH:+:${PATH}}"
export QTDEST=/usr/lib${LIBDIRSUFFIX}/${NAME}

if [ ${ARCH} = "i486" ]; then
  zcat ${CWD}/patches/${PNAME}.x86.cflags.diff.gz | patch -p1 -E --backup --verbose || exit 1
else
  sed -i -e "s|-O2|$INCLUDES ${SLKCFLAGS} -fno-strict-aliasing|g" \
      mkspecs/*/qmake.conf || exit 1
fi

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# For immodule patch
sh ./make-symlinks.sh

# set correct X11 prefix
sed -i -e "s,QMAKE_LIBDIR_X11.*,QMAKE_LIBDIR_X11\t=," mkspecs/*/qmake.conf || exit 1
sed -i -e "s,QMAKE_INCDIR_X11.*,QMAKE_INCDIR_X11\t=," mkspecs/*/qmake.conf || exit 1
sed -i -e "s,QMAKE_INCDIR_OPENGL.*,QMAKE_INCDIR_OPENGL\t=," mkspecs/*/qmake.conf || exit 1
sed -i -e "s,QMAKE_LIBDIR_OPENGL.*,QMAKE_LIBDIR_OPENGL\t=," mkspecs/*/qmake.conf || exit 1

# don't use rpath
sed -i -e "s|-Wl,-rpath,| |" mkspecs/*/qmake.conf || exit 1

if [ "${LDFLAGS}" ] ;then
  sed -i -e "/^QMAKE_LFLAGS_RELEASE/s|$| ${LDFLAGS}|g" mkspecs/*/qmake.conf || exit 1
fi
unset LDFLAGS

# set correct lib path
if [ "${LIBDIRSUFFIX}" = "64" ] ; then
  sed -i -e "s,/usr/lib /lib,/usr/lib64 /lib64,g" config.tests/{unix,x11}/*.test
  sed -i -e "s,/lib /usr/lib,/lib64 /usr/lib64,g" config.tests/{unix,x11}/*.test
fi

if [ "${ARCH}" = "x86_64" ] ;then
  SB_QT_PLAT=linux-g++-64
else 
  SB_QT_PLAT=linux-g++
fi

# Configure:

# And here's what we are currently using.  The "yes" agrees to the GPL, so don't run this script if you
# don't agree.  :-)
echo "yes" | ./configure \
 -prefix ${QTDEST} \
 -platform ${SB_QT_PLAT} \
 -release \
 -shared \
 -largefile \
 -system-zlib \
 -system-libpng \
 -qt-imgfmt-png \
 -system-libmng \
 -qt-imgfmt-mng \
 -system-libjpeg \
 -qt-imgfmt-jpeg \
 -qt-gif \
 -no-exceptions \
 -enable-styles \
 -enable-tools \
 -enable-kernel \
 -enable-widgets \
 -enable-dialogs \
 -enable-iconview \
 -enable-workspace \
 -enable-network \
 -enable-canvas \
 -enable-table \
 -enable-xml \
 -enable-opengl \
 -dlopen-opengl \
 -enable-sql \
 -thread \
 -stl \
 -xft \
 -cups \
 -sm \
 -xinerama \
 -xrender \
 -xkb \
 -ipv6 \
 -xft \
 -tablet \
 -plugin-sql-mysql \
 -plugin-sql-sqlite \
 -plugin-style-cde \
 -plugin-style-compact \
 -qt-style-motif \
 -plugin-style-motifplus \
 -plugin-style-platinum \
 -plugin-style-sgi \
 -plugin-style-windows || exit 1

# We're using '-i' to work around a bug where the build tries to strip html files.
# Build the important stuff:
make -j${NJOBS} src-qmake || exit 1

# build sqlite plugin
( cd plugins/src/sqldrivers/sqlite
  ../../../../bin/qmake -o Makefile sqlite.pro || exit 1
) || exit 1

# build mysql plugin
( cd plugins/src/sqldrivers/mysql
  ../../../../bin/qmake -o Makefile "INCLUDEPATH+=/usr/include/mysql" "LIBS+=-L/usr/lib${LIBDIRSUFFIX}/mysql -lmysqlclient" mysql.pro || exit 1
) || exit 1

make -j${NJOBS} src-moc || exit 1
make -j${NJOBS} sub-src || exit 1
make -j${NJOBS} sub-tools UIC="${QTDIR}/bin/uic -nostdlib -L ${QTDIR}/plugins" || exit 1

# Make the msg2qm utility (not made by default)
( cd tools/msg2qm
  ../../bin/qmake || exit 1
  make || exit 1
) || exit 1

find . \( -name '*~' -o -name '*.orig' \) -exec rm -f {} ';'

make install INSTALL_ROOT=${PKG} || exit 1

mkdir -p ${PKG}/${qtdir}/etc/settings
cat > ${PKG}/${qtdir}/etc/settings/qtrc.new <<EOF
[3.3]
libraryPath=${qtdir}/plugins:/usr/lib${LIBDIRSUFFIX}/kde3/plugins

[General]
font=Sans,10,-1,0,50,0,0,0,0,0
style=Platinum
EOF

# Install msg2qm and qembed utilities
if [ -x tools/msg2qm/msg2qm ] ;then
  install -m0755 tools/msg2qm/msg2qm  \
                 ${PKG}/${QTDEST}/bin/msg2qm || exit 1
fi

for i in findtr qt20fix qtrename140 lrelease lupdate ; do
   if [ -x bin/${i} ] ;then 
     install bin/${i} ${PKG}/${QTDEST}/bin/ || exit 1
   fi
done

# install man pages
mkdir -p ${PKG}/usr/man/
cp -fR doc/man/* ${PKG}/usr/man/

# clean up
make -C tutorial clean
make -C examples clean

rm -f ${PKG}/usr/lib*/lib*.so*
for libname in libqt-mt libqui ;do
  reldir=${NAME}/lib
  oldlink=$(readlink ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/lib/${libname}.so)
  ln -sf ${reldir}/$(basename ${oldlink}) ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so || exit 1
done

# Make sure the examples can be built outside the source tree.
find examples -name "*.pro" | xargs sed -e "s,^DEPENDPATH.*,,g;s,^REQUIRES.*,,g" -i

# don't include Makefiles of qt examples/tutorials
find examples -name "Makefile" | xargs rm -f
find examples -name "*.obj" | xargs rm -rf
find examples -name "*.moc" | xargs rm -rf
find tutorial -name "Makefile" | xargs rm -f

for a in */*/Makefile ; do
  sed "s|^SYSCONF_MOC.*|SYSCONF_MOC		= ${QTDEST}/bin/moc|" < ${a} > ${a}.2
  mv -v ${a}.2 ${a}
done

# Patch qmake to use qt-mt unconditionally
sed -i -e "s,-lqt ,-lqt-mt ,g;s,-lqt$,-lqt-mt,g" \
        ${PKG}/${QTDEST}/mkspecs/*/qmake.conf

# Remove the last vestiges of the build in /tmp:
rm -f ${PKG}/${QTDEST}/mkspecs/linux-g++/linux-g++
rm -f ${PKG}/${QTDEST}/mkspecs/default/linux-g++*

[ "${SB_RMLA}" = "YES" ] && rm -f ${PKG}/${QTDEST}/lib/*.la

if [ ${ARCH} = "i486" ]; then
  # Put this back as shipped:
  ( cd ${PKG}/${QTDEST}
    zcat ${CWD}/patches/${PNAME}.x86.cflags.diff.gz | patch -p1 -R )
else
  sed -i -e "s|${SLKCFLAGS}|-O2|g" \
      ${PKG}/${QTDEST}/mkspecs/*/qmake.conf || exit 1
fi

# Put a ton of links to more "normal" places.  I'd just use a prefix of /usr, but it
# creates a ton of new (and ambiguously named) /usr directories...

mkdir -p ${PKG}/usr/bin
reldir=$(perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' /usr/bin ${QTDEST}/bin)
reldir2=$(perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' ${QTDEST}/bin /usr/bin)
( cd ${PKG}/${QTDEST}/bin
  for i in assistant designer findtr linguist lrelease lupdate moc msg2qm qembed qm2ts qmake qt20fix qtconfig qtrename140 uic; do
    ln -sv  ${reldir2}/${i} ${reldir}/${i}-qt3
    ln -sv ${i} ${i}-qt3
  done
)

sed -i \
  -e "/^QMAKE_PRL_BUILD_DIR/d" \
  -e "s|^QMAKE_PRL_LIBS =.*$|QMAKE_PRL_LIBS = -lqt-mt|" \
  ${PKG}/${QTDEST}/lib/*.prl

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig
mv ${PKG}/${QTDEST}/lib/pkgconfig/*.pc \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/ || exit 1
rmdir -p ${PKG}/${QTDEST}/lib/pkgconfig

sed -i -e 's|^Libs: .*$|Libs: -L${libdir} -lqt-mt|g' \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/*.pc || exit 1

# own style directory
mkdir -p ${PKG}/${QTDEST}/plugins/styles

mkdir -p ${PKG}/etc/ld.so.conf.d
cat > ${PKG}/etc/ld.so.conf.d/${NAME}-${ARCH}.conf << EOF
${QTDEST}/lib
EOF

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

unset MARCH
case "${ARCH}" in
  i[3-6]86)  MARCH=32
             ;;
    s390)    MARCH=32
             ;;
    x86_64)  MARCH=64
             ;;
esac

mkdir -p ${PKG}/etc/xdg/qtchooser
( cd ${PKG}/etc/xdg/qtchooser
  echo "${QTDEST}/bin" > 3.conf
  echo "${QTDEST}" >> 3.conf
  if [ -n "${MARCH}" ] ;then
    mv 3.conf 3-${MARCH}.conf
    ln -sf 3-${MARCH}.conf 3.conf
  fi
)

# Add desktop file(s)
mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}-assistant.desktop <<EOF1
[Desktop Entry]
Name=Qt3 Assistant
Comment=Shows Qt3 documentation and examples
Exec=assistant-qt3
Icon=assistant3
Terminal=false
Type=Application
Categories=Qt;Development;
EOF1

cat > ${PKG}/usr/share/applications/${NAME}-designer.desktop <<EOF2
[Desktop Entry]
Name=Qt3 Designer
GenericName=Interface Designer
Comment=Design GUIs for Qt3 applications
Exec=designer-qt3
Icon=designer3
MimeType=application/x-designer;
Terminal=false
Type=Application
Categories=Qt;Development;
EOF2

cat > ${PKG}/usr/share/applications/${NAME}-linguist.desktop <<EOF3
[Desktop Entry]
Name=Qt3 Linguist
Comment=Add translations to Qt3 applications
Exec=linguist-qt3
Icon=linguist3
MimeType=application/x-linguist;
Terminal=false
Type=Application
Categories=Qt;Development;Translation;
EOF3

cat > ${PKG}/usr/share/applications/${NAME}config.desktop <<EOF4
[Desktop Entry]
Name=Qt3 Config
Comment=Configure Qt3 behavior, styles, fonts
Exec=qtconfig-qt3
Icon=qtconfig3
Terminal=false
Type=Application
Categories=Qt;Settings;
EOF4

# install icons
mkdir -p ${PKG}/usr/share/pixmaps
install -m 0644 tools/assistant/images/qt.png ${PKG}/usr/share/pixmaps/qtconfig3.png
for icon in assistant designer linguist ;do
  install -m 644 tools/assistant/images/${icon}.png \
    ${PKG}/usr/share/pixmaps/${icon}3.png
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  FAQ INSTALL LICENSE.GPL LICENSE.QPL MANIFEST PLATFORMS README* changes* \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
( cd ${DOCDIR} ; ln -sf /usr/lib/${NAME}/doc/html . )
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Add man pages:
mkdir -p ${PKG}/usr/man
cp -a doc/man/* ${PKG}/usr/man/

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.*
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF


( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find ${QTDEST#\/}/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${SNAPUPDATE} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
